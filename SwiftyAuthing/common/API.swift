// @generated
//  This file was automatically generated and should not be edited.

import Apollo
import Foundation

public enum SortByEnum: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 按照创建时间降序（后创建的在前面）
  case createdatDesc
  /// 按照创建时间升序（先创建的在前面）
  case createdatAsc
  /// 按照更新时间降序（最近更新的在前面）
  case updatedatDesc
  /// 按照更新时间升序（最近更新的在后面）
  case updatedatAsc
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "CREATEDAT_DESC": self = .createdatDesc
      case "CREATEDAT_ASC": self = .createdatAsc
      case "UPDATEDAT_DESC": self = .updatedatDesc
      case "UPDATEDAT_ASC": self = .updatedatAsc
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .createdatDesc: return "CREATEDAT_DESC"
      case .createdatAsc: return "CREATEDAT_ASC"
      case .updatedatDesc: return "UPDATEDAT_DESC"
      case .updatedatAsc: return "UPDATEDAT_ASC"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: SortByEnum, rhs: SortByEnum) -> Bool {
    switch (lhs, rhs) {
      case (.createdatDesc, .createdatDesc): return true
      case (.createdatAsc, .createdatAsc): return true
      case (.updatedatDesc, .updatedatDesc): return true
      case (.updatedatAsc, .updatedatAsc): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [SortByEnum] {
    return [
      .createdatDesc,
      .createdatAsc,
      .updatedatDesc,
      .updatedatAsc,
    ]
  }
}

public enum UserStatus: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 已停用
  case suspended
  /// 已离职
  case resigned
  /// 已激活（正常状态）
  case activated
  /// 已归档
  case archived
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "Suspended": self = .suspended
      case "Resigned": self = .resigned
      case "Activated": self = .activated
      case "Archived": self = .archived
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .suspended: return "Suspended"
      case .resigned: return "Resigned"
      case .activated: return "Activated"
      case .archived: return "Archived"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: UserStatus, rhs: UserStatus) -> Bool {
    switch (lhs, rhs) {
      case (.suspended, .suspended): return true
      case (.resigned, .resigned): return true
      case (.activated, .activated): return true
      case (.archived, .archived): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [UserStatus] {
    return [
      .suspended,
      .resigned,
      .activated,
      .archived,
    ]
  }
}

public enum PolicyAssignmentTargetType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case user
  case role
  case group
  case org
  case akSk
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "USER": self = .user
      case "ROLE": self = .role
      case "GROUP": self = .group
      case "ORG": self = .org
      case "AK_SK": self = .akSk
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .user: return "USER"
      case .role: return "ROLE"
      case .group: return "GROUP"
      case .org: return "ORG"
      case .akSk: return "AK_SK"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: PolicyAssignmentTargetType, rhs: PolicyAssignmentTargetType) -> Bool {
    switch (lhs, rhs) {
      case (.user, .user): return true
      case (.role, .role): return true
      case (.group, .group): return true
      case (.org, .org): return true
      case (.akSk, .akSk): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [PolicyAssignmentTargetType] {
    return [
      .user,
      .role,
      .group,
      .org,
      .akSk,
    ]
  }
}

public enum WhitelistType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case username
  case email
  case phone
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "USERNAME": self = .username
      case "EMAIL": self = .email
      case "PHONE": self = .phone
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .username: return "USERNAME"
      case .email: return "EMAIL"
      case .phone: return "PHONE"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: WhitelistType, rhs: WhitelistType) -> Bool {
    switch (lhs, rhs) {
      case (.username, .username): return true
      case (.email, .email): return true
      case (.phone, .phone): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [WhitelistType] {
    return [
      .username,
      .email,
      .phone,
    ]
  }
}

public enum ResourceType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case data
  case api
  case menu
  case ui
  case button
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "DATA": self = .data
      case "API": self = .api
      case "MENU": self = .menu
      case "UI": self = .ui
      case "BUTTON": self = .button
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .data: return "DATA"
      case .api: return "API"
      case .menu: return "MENU"
      case .ui: return "UI"
      case .button: return "BUTTON"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: ResourceType, rhs: ResourceType) -> Bool {
    switch (lhs, rhs) {
      case (.data, .data): return true
      case (.api, .api): return true
      case (.menu, .menu): return true
      case (.ui, .ui): return true
      case (.button, .button): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [ResourceType] {
    return [
      .data,
      .api,
      .menu,
      .ui,
      .button,
    ]
  }
}

public struct AuthorizedTargetsActionsInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - op
  ///   - list
  public init(op: Operator, list: [String?]) {
    graphQLMap = ["op": op, "list": list]
  }

  public var op: Operator {
    get {
      return graphQLMap["op"] as! Operator
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "op")
    }
  }

  public var list: [String?] {
    get {
      return graphQLMap["list"] as! [String?]
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "list")
    }
  }
}

public enum Operator: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case and
  case or
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "AND": self = .and
      case "OR": self = .or
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .and: return "AND"
      case .or: return "OR"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: Operator, rhs: Operator) -> Bool {
    switch (lhs, rhs) {
      case (.and, .and): return true
      case (.or, .or): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [Operator] {
    return [
      .and,
      .or,
    ]
  }
}

public struct AuthorizeResourceOpt: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - targetType
  ///   - targetIdentifier
  ///   - actions
  public init(targetType: PolicyAssignmentTargetType, targetIdentifier: String, actions: Swift.Optional<[String]?> = nil) {
    graphQLMap = ["targetType": targetType, "targetIdentifier": targetIdentifier, "actions": actions]
  }

  public var targetType: PolicyAssignmentTargetType {
    get {
      return graphQLMap["targetType"] as! PolicyAssignmentTargetType
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "targetType")
    }
  }

  public var targetIdentifier: String {
    get {
      return graphQLMap["targetIdentifier"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "targetIdentifier")
    }
  }

  public var actions: Swift.Optional<[String]?> {
    get {
      return graphQLMap["actions"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "actions")
    }
  }
}

public struct ConfigEmailTemplateInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - type: 邮件模版类型
  ///   - name: 模版名称
  ///   - subject: 邮件主题
  ///   - sender: 显示的邮件发送人
  ///   - content: 邮件模版内容
  ///   - redirectTo: 重定向链接，操作成功后，用户将被重定向到此 URL。
  ///   - hasUrl
  ///   - expiresIn: 验证码过期时间（单位为秒）
  public init(type: EmailTemplateType, name: String, subject: String, sender: String, content: String, redirectTo: Swift.Optional<String?> = nil, hasUrl: Swift.Optional<Bool?> = nil, expiresIn: Swift.Optional<Int?> = nil) {
    graphQLMap = ["type": type, "name": name, "subject": subject, "sender": sender, "content": content, "redirectTo": redirectTo, "hasURL": hasUrl, "expiresIn": expiresIn]
  }

  /// 邮件模版类型
  public var type: EmailTemplateType {
    get {
      return graphQLMap["type"] as! EmailTemplateType
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "type")
    }
  }

  /// 模版名称
  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  /// 邮件主题
  public var subject: String {
    get {
      return graphQLMap["subject"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "subject")
    }
  }

  /// 显示的邮件发送人
  public var sender: String {
    get {
      return graphQLMap["sender"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sender")
    }
  }

  /// 邮件模版内容
  public var content: String {
    get {
      return graphQLMap["content"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "content")
    }
  }

  /// 重定向链接，操作成功后，用户将被重定向到此 URL。
  public var redirectTo: Swift.Optional<String?> {
    get {
      return graphQLMap["redirectTo"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "redirectTo")
    }
  }

  public var hasUrl: Swift.Optional<Bool?> {
    get {
      return graphQLMap["hasURL"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "hasURL")
    }
  }

  /// 验证码过期时间（单位为秒）
  public var expiresIn: Swift.Optional<Int?> {
    get {
      return graphQLMap["expiresIn"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "expiresIn")
    }
  }
}

public enum EmailTemplateType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 重置密码确认
  case resetPassword
  /// 重置密码通知
  case passwordResetedNotification
  /// 修改密码验证码
  case changePassword
  /// 注册欢迎邮件
  case welcome
  /// 验证邮箱
  case verifyEmail
  /// 修改绑定邮箱
  case changeEmail
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "RESET_PASSWORD": self = .resetPassword
      case "PASSWORD_RESETED_NOTIFICATION": self = .passwordResetedNotification
      case "CHANGE_PASSWORD": self = .changePassword
      case "WELCOME": self = .welcome
      case "VERIFY_EMAIL": self = .verifyEmail
      case "CHANGE_EMAIL": self = .changeEmail
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .resetPassword: return "RESET_PASSWORD"
      case .passwordResetedNotification: return "PASSWORD_RESETED_NOTIFICATION"
      case .changePassword: return "CHANGE_PASSWORD"
      case .welcome: return "WELCOME"
      case .verifyEmail: return "VERIFY_EMAIL"
      case .changeEmail: return "CHANGE_EMAIL"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: EmailTemplateType, rhs: EmailTemplateType) -> Bool {
    switch (lhs, rhs) {
      case (.resetPassword, .resetPassword): return true
      case (.passwordResetedNotification, .passwordResetedNotification): return true
      case (.changePassword, .changePassword): return true
      case (.welcome, .welcome): return true
      case (.verifyEmail, .verifyEmail): return true
      case (.changeEmail, .changeEmail): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [EmailTemplateType] {
    return [
      .resetPassword,
      .passwordResetedNotification,
      .changePassword,
      .welcome,
      .verifyEmail,
      .changeEmail,
    ]
  }
}

public struct CreateFunctionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - name: 函数名称
  ///   - sourceCode: 源代码
  ///   - description: 描述信息
  ///   - url: 云函数链接
  public init(name: String, sourceCode: String, description: Swift.Optional<String?> = nil, url: Swift.Optional<String?> = nil) {
    graphQLMap = ["name": name, "sourceCode": sourceCode, "description": description, "url": url]
  }

  /// 函数名称
  public var name: String {
    get {
      return graphQLMap["name"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  /// 源代码
  public var sourceCode: String {
    get {
      return graphQLMap["sourceCode"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sourceCode")
    }
  }

  /// 描述信息
  public var description: Swift.Optional<String?> {
    get {
      return graphQLMap["description"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "description")
    }
  }

  /// 云函数链接
  public var url: Swift.Optional<String?> {
    get {
      return graphQLMap["url"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "url")
    }
  }
}

public struct PolicyStatementInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - resource
  ///   - actions
  ///   - effect
  ///   - condition
  public init(resource: String, actions: [String], effect: Swift.Optional<PolicyEffect?> = nil, condition: Swift.Optional<[PolicyStatementConditionInput]?> = nil) {
    graphQLMap = ["resource": resource, "actions": actions, "effect": effect, "condition": condition]
  }

  public var resource: String {
    get {
      return graphQLMap["resource"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "resource")
    }
  }

  public var actions: [String] {
    get {
      return graphQLMap["actions"] as! [String]
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "actions")
    }
  }

  public var effect: Swift.Optional<PolicyEffect?> {
    get {
      return graphQLMap["effect"] as? Swift.Optional<PolicyEffect?> ?? Swift.Optional<PolicyEffect?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "effect")
    }
  }

  public var condition: Swift.Optional<[PolicyStatementConditionInput]?> {
    get {
      return graphQLMap["condition"] as? Swift.Optional<[PolicyStatementConditionInput]?> ?? Swift.Optional<[PolicyStatementConditionInput]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "condition")
    }
  }
}

public enum PolicyEffect: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case allow
  case deny
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "ALLOW": self = .allow
      case "DENY": self = .deny
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .allow: return "ALLOW"
      case .deny: return "DENY"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: PolicyEffect, rhs: PolicyEffect) -> Bool {
    switch (lhs, rhs) {
      case (.allow, .allow): return true
      case (.deny, .deny): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [PolicyEffect] {
    return [
      .allow,
      .deny,
    ]
  }
}

public struct PolicyStatementConditionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - param
  ///   - operator
  ///   - value
  public init(param: String, `operator`: String, value: String) {
    graphQLMap = ["param": param, "operator": `operator`, "value": value]
  }

  public var param: String {
    get {
      return graphQLMap["param"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "param")
    }
  }

  public var `operator`: String {
    get {
      return graphQLMap["operator"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "operator")
    }
  }

  public var value: String {
    get {
      return graphQLMap["value"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "value")
    }
  }
}

public struct CreateSocialConnectionInstanceInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - provider: 社会化登录 provider
  ///   - fields
  public init(provider: String, fields: Swift.Optional<[CreateSocialConnectionInstanceFieldInput?]?> = nil) {
    graphQLMap = ["provider": provider, "fields": fields]
  }

  /// 社会化登录 provider
  public var provider: String {
    get {
      return graphQLMap["provider"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "provider")
    }
  }

  public var fields: Swift.Optional<[CreateSocialConnectionInstanceFieldInput?]?> {
    get {
      return graphQLMap["fields"] as? Swift.Optional<[CreateSocialConnectionInstanceFieldInput?]?> ?? Swift.Optional<[CreateSocialConnectionInstanceFieldInput?]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "fields")
    }
  }
}

public struct CreateSocialConnectionInstanceFieldInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - key
  ///   - value
  public init(key: String, value: String) {
    graphQLMap = ["key": key, "value": value]
  }

  public var key: String {
    get {
      return graphQLMap["key"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "key")
    }
  }

  public var value: String {
    get {
      return graphQLMap["value"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "value")
    }
  }
}

public struct CreateUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - username: 用户名，用户池内唯一
  ///   - email: 邮箱，不区分大小写，如 Bob@example.com 和 bob@example.com 会识别为同一个邮箱。用户池内唯一。
  ///   - emailVerified: 邮箱是否已验证
  ///   - phone: 手机号，用户池内唯一
  ///   - phoneVerified: 手机号是否已验证
  ///   - unionid
  ///   - openid
  ///   - nickname: 昵称，该字段不唯一。
  ///   - photo: 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
  ///   - password
  ///   - registerSource: 注册方式
  ///   - browser
  ///   - oauth: 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
  ///   - loginsCount: 用户累计登录次数，当你从你原有用户系统向 Authing 迁移的时候可以设置此字段。
  ///   - lastLogin
  ///   - company
  ///   - lastIp
  ///   - signedUp: 用户注册时间，当你从你原有用户系统向 Authing 迁移的时候可以设置此字段。
  ///   - blocked
  ///   - isDeleted
  ///   - device
  ///   - name
  ///   - givenName
  ///   - familyName
  ///   - middleName
  ///   - profile
  ///   - preferredUsername
  ///   - website
  ///   - gender
  ///   - birthdate
  ///   - zoneinfo
  ///   - locale
  ///   - address
  ///   - formatted
  ///   - streetAddress
  ///   - locality
  ///   - region
  ///   - postalCode
  ///   - country
  ///   - externalId
  public init(username: Swift.Optional<String?> = nil, email: Swift.Optional<String?> = nil, emailVerified: Swift.Optional<Bool?> = nil, phone: Swift.Optional<String?> = nil, phoneVerified: Swift.Optional<Bool?> = nil, unionid: Swift.Optional<String?> = nil, openid: Swift.Optional<String?> = nil, nickname: Swift.Optional<String?> = nil, photo: Swift.Optional<String?> = nil, password: Swift.Optional<String?> = nil, registerSource: Swift.Optional<[String]?> = nil, browser: Swift.Optional<String?> = nil, oauth: Swift.Optional<String?> = nil, loginsCount: Swift.Optional<Int?> = nil, lastLogin: Swift.Optional<String?> = nil, company: Swift.Optional<String?> = nil, lastIp: Swift.Optional<String?> = nil, signedUp: Swift.Optional<String?> = nil, blocked: Swift.Optional<Bool?> = nil, isDeleted: Swift.Optional<Bool?> = nil, device: Swift.Optional<String?> = nil, name: Swift.Optional<String?> = nil, givenName: Swift.Optional<String?> = nil, familyName: Swift.Optional<String?> = nil, middleName: Swift.Optional<String?> = nil, profile: Swift.Optional<String?> = nil, preferredUsername: Swift.Optional<String?> = nil, website: Swift.Optional<String?> = nil, gender: Swift.Optional<String?> = nil, birthdate: Swift.Optional<String?> = nil, zoneinfo: Swift.Optional<String?> = nil, locale: Swift.Optional<String?> = nil, address: Swift.Optional<String?> = nil, formatted: Swift.Optional<String?> = nil, streetAddress: Swift.Optional<String?> = nil, locality: Swift.Optional<String?> = nil, region: Swift.Optional<String?> = nil, postalCode: Swift.Optional<String?> = nil, country: Swift.Optional<String?> = nil, externalId: Swift.Optional<String?> = nil) {
    graphQLMap = ["username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "photo": photo, "password": password, "registerSource": registerSource, "browser": browser, "oauth": oauth, "loginsCount": loginsCount, "lastLogin": lastLogin, "company": company, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "country": country, "externalId": externalId]
  }

  /// 用户名，用户池内唯一
  public var username: Swift.Optional<String?> {
    get {
      return graphQLMap["username"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "username")
    }
  }

  /// 邮箱，不区分大小写，如 Bob@example.com 和 bob@example.com 会识别为同一个邮箱。用户池内唯一。
  public var email: Swift.Optional<String?> {
    get {
      return graphQLMap["email"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  /// 邮箱是否已验证
  public var emailVerified: Swift.Optional<Bool?> {
    get {
      return graphQLMap["emailVerified"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "emailVerified")
    }
  }

  /// 手机号，用户池内唯一
  public var phone: Swift.Optional<String?> {
    get {
      return graphQLMap["phone"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phone")
    }
  }

  /// 手机号是否已验证
  public var phoneVerified: Swift.Optional<Bool?> {
    get {
      return graphQLMap["phoneVerified"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phoneVerified")
    }
  }

  public var unionid: Swift.Optional<String?> {
    get {
      return graphQLMap["unionid"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "unionid")
    }
  }

  public var openid: Swift.Optional<String?> {
    get {
      return graphQLMap["openid"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "openid")
    }
  }

  /// 昵称，该字段不唯一。
  public var nickname: Swift.Optional<String?> {
    get {
      return graphQLMap["nickname"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "nickname")
    }
  }

  /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
  public var photo: Swift.Optional<String?> {
    get {
      return graphQLMap["photo"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "photo")
    }
  }

  public var password: Swift.Optional<String?> {
    get {
      return graphQLMap["password"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "password")
    }
  }

  /// 注册方式
  public var registerSource: Swift.Optional<[String]?> {
    get {
      return graphQLMap["registerSource"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "registerSource")
    }
  }

  public var browser: Swift.Optional<String?> {
    get {
      return graphQLMap["browser"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "browser")
    }
  }

  /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
  public var oauth: Swift.Optional<String?> {
    get {
      return graphQLMap["oauth"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "oauth")
    }
  }

  /// 用户累计登录次数，当你从你原有用户系统向 Authing 迁移的时候可以设置此字段。
  public var loginsCount: Swift.Optional<Int?> {
    get {
      return graphQLMap["loginsCount"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "loginsCount")
    }
  }

  public var lastLogin: Swift.Optional<String?> {
    get {
      return graphQLMap["lastLogin"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastLogin")
    }
  }

  public var company: Swift.Optional<String?> {
    get {
      return graphQLMap["company"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "company")
    }
  }

  public var lastIp: Swift.Optional<String?> {
    get {
      return graphQLMap["lastIP"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastIP")
    }
  }

  /// 用户注册时间，当你从你原有用户系统向 Authing 迁移的时候可以设置此字段。
  public var signedUp: Swift.Optional<String?> {
    get {
      return graphQLMap["signedUp"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "signedUp")
    }
  }

  public var blocked: Swift.Optional<Bool?> {
    get {
      return graphQLMap["blocked"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "blocked")
    }
  }

  public var isDeleted: Swift.Optional<Bool?> {
    get {
      return graphQLMap["isDeleted"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isDeleted")
    }
  }

  public var device: Swift.Optional<String?> {
    get {
      return graphQLMap["device"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "device")
    }
  }

  public var name: Swift.Optional<String?> {
    get {
      return graphQLMap["name"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var givenName: Swift.Optional<String?> {
    get {
      return graphQLMap["givenName"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "givenName")
    }
  }

  public var familyName: Swift.Optional<String?> {
    get {
      return graphQLMap["familyName"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "familyName")
    }
  }

  public var middleName: Swift.Optional<String?> {
    get {
      return graphQLMap["middleName"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "middleName")
    }
  }

  public var profile: Swift.Optional<String?> {
    get {
      return graphQLMap["profile"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "profile")
    }
  }

  public var preferredUsername: Swift.Optional<String?> {
    get {
      return graphQLMap["preferredUsername"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "preferredUsername")
    }
  }

  public var website: Swift.Optional<String?> {
    get {
      return graphQLMap["website"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "website")
    }
  }

  public var gender: Swift.Optional<String?> {
    get {
      return graphQLMap["gender"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gender")
    }
  }

  public var birthdate: Swift.Optional<String?> {
    get {
      return graphQLMap["birthdate"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "birthdate")
    }
  }

  public var zoneinfo: Swift.Optional<String?> {
    get {
      return graphQLMap["zoneinfo"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "zoneinfo")
    }
  }

  public var locale: Swift.Optional<String?> {
    get {
      return graphQLMap["locale"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "locale")
    }
  }

  public var address: Swift.Optional<String?> {
    get {
      return graphQLMap["address"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "address")
    }
  }

  public var formatted: Swift.Optional<String?> {
    get {
      return graphQLMap["formatted"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "formatted")
    }
  }

  public var streetAddress: Swift.Optional<String?> {
    get {
      return graphQLMap["streetAddress"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "streetAddress")
    }
  }

  public var locality: Swift.Optional<String?> {
    get {
      return graphQLMap["locality"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "locality")
    }
  }

  public var region: Swift.Optional<String?> {
    get {
      return graphQLMap["region"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "region")
    }
  }

  public var postalCode: Swift.Optional<String?> {
    get {
      return graphQLMap["postalCode"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "postalCode")
    }
  }

  public var country: Swift.Optional<String?> {
    get {
      return graphQLMap["country"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "country")
    }
  }

  public var externalId: Swift.Optional<String?> {
    get {
      return graphQLMap["externalId"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "externalId")
    }
  }
}

public struct CreateUserIdentityInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - provider
  ///   - userIdInIdp
  ///   - openid
  ///   - isSocial
  ///   - connectionId
  ///   - accessToken
  ///   - refreshToken
  public init(provider: String, userIdInIdp: String, openid: Swift.Optional<String?> = nil, isSocial: Swift.Optional<Bool?> = nil, connectionId: Swift.Optional<String?> = nil, accessToken: Swift.Optional<String?> = nil, refreshToken: Swift.Optional<String?> = nil) {
    graphQLMap = ["provider": provider, "userIdInIdp": userIdInIdp, "openid": openid, "isSocial": isSocial, "connectionId": connectionId, "accessToken": accessToken, "refreshToken": refreshToken]
  }

  public var provider: String {
    get {
      return graphQLMap["provider"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "provider")
    }
  }

  public var userIdInIdp: String {
    get {
      return graphQLMap["userIdInIdp"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userIdInIdp")
    }
  }

  public var openid: Swift.Optional<String?> {
    get {
      return graphQLMap["openid"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "openid")
    }
  }

  public var isSocial: Swift.Optional<Bool?> {
    get {
      return graphQLMap["isSocial"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "isSocial")
    }
  }

  public var connectionId: Swift.Optional<String?> {
    get {
      return graphQLMap["connectionId"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "connectionId")
    }
  }

  public var accessToken: Swift.Optional<String?> {
    get {
      return graphQLMap["accessToken"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "accessToken")
    }
  }

  public var refreshToken: Swift.Optional<String?> {
    get {
      return graphQLMap["refreshToken"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "refreshToken")
    }
  }
}

public enum UDFDataType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case string
  case number
  case datetime
  case boolean
  case object
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "STRING": self = .string
      case "NUMBER": self = .number
      case "DATETIME": self = .datetime
      case "BOOLEAN": self = .boolean
      case "OBJECT": self = .object
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .string: return "STRING"
      case .number: return "NUMBER"
      case .datetime: return "DATETIME"
      case .boolean: return "BOOLEAN"
      case .object: return "OBJECT"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: UDFDataType, rhs: UDFDataType) -> Bool {
    switch (lhs, rhs) {
      case (.string, .string): return true
      case (.number, .number): return true
      case (.datetime, .datetime): return true
      case (.boolean, .boolean): return true
      case (.object, .object): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [UDFDataType] {
    return [
      .string,
      .number,
      .datetime,
      .boolean,
      .object,
    ]
  }
}

public struct FindUserByIdentityInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - provider
  ///   - userIdInIdp
  public init(provider: String, userIdInIdp: String) {
    graphQLMap = ["provider": provider, "userIdInIdp": userIdInIdp]
  }

  public var provider: String {
    get {
      return graphQLMap["provider"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "provider")
    }
  }

  public var userIdInIdp: String {
    get {
      return graphQLMap["userIdInIdp"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userIdInIdp")
    }
  }
}

public struct LoginByEmailInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - email
  ///   - password
  ///   - captchaCode: 图形验证码
  ///   - autoRegister: 如果用户不存在，是否自动创建一个账号
  ///   - clientIp
  ///   - params: 设置用户自定义字段，要求符合 Array<{ key: string; value: string }> 格式
  ///   - context: 请求上下文信息，将会传递到 pipeline 中
  public init(email: String, password: String, captchaCode: Swift.Optional<String?> = nil, autoRegister: Swift.Optional<Bool?> = nil, clientIp: Swift.Optional<String?> = nil, params: Swift.Optional<String?> = nil, context: Swift.Optional<String?> = nil) {
    graphQLMap = ["email": email, "password": password, "captchaCode": captchaCode, "autoRegister": autoRegister, "clientIp": clientIp, "params": params, "context": context]
  }

  public var email: String {
    get {
      return graphQLMap["email"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var password: String {
    get {
      return graphQLMap["password"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "password")
    }
  }

  /// 图形验证码
  public var captchaCode: Swift.Optional<String?> {
    get {
      return graphQLMap["captchaCode"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "captchaCode")
    }
  }

  /// 如果用户不存在，是否自动创建一个账号
  public var autoRegister: Swift.Optional<Bool?> {
    get {
      return graphQLMap["autoRegister"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "autoRegister")
    }
  }

  public var clientIp: Swift.Optional<String?> {
    get {
      return graphQLMap["clientIp"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "clientIp")
    }
  }

  /// 设置用户自定义字段，要求符合 Array<{ key: string; value: string }> 格式
  public var params: Swift.Optional<String?> {
    get {
      return graphQLMap["params"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "params")
    }
  }

  /// 请求上下文信息，将会传递到 pipeline 中
  public var context: Swift.Optional<String?> {
    get {
      return graphQLMap["context"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "context")
    }
  }
}

public struct LoginByPhoneCodeInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - phone
  ///   - code
  ///   - autoRegister: 如果用户不存在，是否自动创建一个账号
  ///   - clientIp
  ///   - params: 设置用户自定义字段，要求符合 Array<{ key: string; value: string }> 格式
  ///   - context: 请求上下文信息，将会传递到 pipeline 中
  public init(phone: String, code: String, autoRegister: Swift.Optional<Bool?> = nil, clientIp: Swift.Optional<String?> = nil, params: Swift.Optional<String?> = nil, context: Swift.Optional<String?> = nil) {
    graphQLMap = ["phone": phone, "code": code, "autoRegister": autoRegister, "clientIp": clientIp, "params": params, "context": context]
  }

  public var phone: String {
    get {
      return graphQLMap["phone"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phone")
    }
  }

  public var code: String {
    get {
      return graphQLMap["code"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "code")
    }
  }

  /// 如果用户不存在，是否自动创建一个账号
  public var autoRegister: Swift.Optional<Bool?> {
    get {
      return graphQLMap["autoRegister"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "autoRegister")
    }
  }

  public var clientIp: Swift.Optional<String?> {
    get {
      return graphQLMap["clientIp"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "clientIp")
    }
  }

  /// 设置用户自定义字段，要求符合 Array<{ key: string; value: string }> 格式
  public var params: Swift.Optional<String?> {
    get {
      return graphQLMap["params"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "params")
    }
  }

  /// 请求上下文信息，将会传递到 pipeline 中
  public var context: Swift.Optional<String?> {
    get {
      return graphQLMap["context"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "context")
    }
  }
}

public struct LoginByPhonePasswordInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - phone
  ///   - password
  ///   - captchaCode: 图形验证码
  ///   - autoRegister: 如果用户不存在，是否自动创建一个账号
  ///   - clientIp
  ///   - params: 设置用户自定义字段，要求符合 Array<{ key: string; value: string }> 格式
  ///   - context: 请求上下文信息，将会传递到 pipeline 中
  public init(phone: String, password: String, captchaCode: Swift.Optional<String?> = nil, autoRegister: Swift.Optional<Bool?> = nil, clientIp: Swift.Optional<String?> = nil, params: Swift.Optional<String?> = nil, context: Swift.Optional<String?> = nil) {
    graphQLMap = ["phone": phone, "password": password, "captchaCode": captchaCode, "autoRegister": autoRegister, "clientIp": clientIp, "params": params, "context": context]
  }

  public var phone: String {
    get {
      return graphQLMap["phone"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phone")
    }
  }

  public var password: String {
    get {
      return graphQLMap["password"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "password")
    }
  }

  /// 图形验证码
  public var captchaCode: Swift.Optional<String?> {
    get {
      return graphQLMap["captchaCode"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "captchaCode")
    }
  }

  /// 如果用户不存在，是否自动创建一个账号
  public var autoRegister: Swift.Optional<Bool?> {
    get {
      return graphQLMap["autoRegister"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "autoRegister")
    }
  }

  public var clientIp: Swift.Optional<String?> {
    get {
      return graphQLMap["clientIp"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "clientIp")
    }
  }

  /// 设置用户自定义字段，要求符合 Array<{ key: string; value: string }> 格式
  public var params: Swift.Optional<String?> {
    get {
      return graphQLMap["params"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "params")
    }
  }

  /// 请求上下文信息，将会传递到 pipeline 中
  public var context: Swift.Optional<String?> {
    get {
      return graphQLMap["context"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "context")
    }
  }
}

public struct LoginByUsernameInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - username
  ///   - password
  ///   - captchaCode: 图形验证码
  ///   - autoRegister: 如果用户不存在，是否自动创建一个账号
  ///   - clientIp
  ///   - params: 设置用户自定义字段，要求符合 Array<{ key: string; value: string }> 格式
  ///   - context: 请求上下文信息，将会传递到 pipeline 中
  public init(username: String, password: String, captchaCode: Swift.Optional<String?> = nil, autoRegister: Swift.Optional<Bool?> = nil, clientIp: Swift.Optional<String?> = nil, params: Swift.Optional<String?> = nil, context: Swift.Optional<String?> = nil) {
    graphQLMap = ["username": username, "password": password, "captchaCode": captchaCode, "autoRegister": autoRegister, "clientIp": clientIp, "params": params, "context": context]
  }

  public var username: String {
    get {
      return graphQLMap["username"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "username")
    }
  }

  public var password: String {
    get {
      return graphQLMap["password"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "password")
    }
  }

  /// 图形验证码
  public var captchaCode: Swift.Optional<String?> {
    get {
      return graphQLMap["captchaCode"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "captchaCode")
    }
  }

  /// 如果用户不存在，是否自动创建一个账号
  public var autoRegister: Swift.Optional<Bool?> {
    get {
      return graphQLMap["autoRegister"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "autoRegister")
    }
  }

  public var clientIp: Swift.Optional<String?> {
    get {
      return graphQLMap["clientIp"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "clientIp")
    }
  }

  /// 设置用户自定义字段，要求符合 Array<{ key: string; value: string }> 格式
  public var params: Swift.Optional<String?> {
    get {
      return graphQLMap["params"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "params")
    }
  }

  /// 请求上下文信息，将会传递到 pipeline 中
  public var context: Swift.Optional<String?> {
    get {
      return graphQLMap["context"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "context")
    }
  }
}

public struct RegisterByEmailInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - email
  ///   - password
  ///   - profile
  ///   - forceLogin
  ///   - generateToken
  ///   - clientIp
  ///   - params: 设置用户自定义字段，要求符合 Array<{ key: string; value: string }> 格式
  ///   - context: 请求上下文信息，将会传递到 pipeline 中
  public init(email: String, password: String, profile: Swift.Optional<RegisterProfile?> = nil, forceLogin: Swift.Optional<Bool?> = nil, generateToken: Swift.Optional<Bool?> = nil, clientIp: Swift.Optional<String?> = nil, params: Swift.Optional<String?> = nil, context: Swift.Optional<String?> = nil) {
    graphQLMap = ["email": email, "password": password, "profile": profile, "forceLogin": forceLogin, "generateToken": generateToken, "clientIp": clientIp, "params": params, "context": context]
  }

  public var email: String {
    get {
      return graphQLMap["email"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var password: String {
    get {
      return graphQLMap["password"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "password")
    }
  }

  public var profile: Swift.Optional<RegisterProfile?> {
    get {
      return graphQLMap["profile"] as? Swift.Optional<RegisterProfile?> ?? Swift.Optional<RegisterProfile?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "profile")
    }
  }

  public var forceLogin: Swift.Optional<Bool?> {
    get {
      return graphQLMap["forceLogin"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "forceLogin")
    }
  }

  public var generateToken: Swift.Optional<Bool?> {
    get {
      return graphQLMap["generateToken"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "generateToken")
    }
  }

  public var clientIp: Swift.Optional<String?> {
    get {
      return graphQLMap["clientIp"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "clientIp")
    }
  }

  /// 设置用户自定义字段，要求符合 Array<{ key: string; value: string }> 格式
  public var params: Swift.Optional<String?> {
    get {
      return graphQLMap["params"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "params")
    }
  }

  /// 请求上下文信息，将会传递到 pipeline 中
  public var context: Swift.Optional<String?> {
    get {
      return graphQLMap["context"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "context")
    }
  }
}

public struct RegisterProfile: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - ip
  ///   - oauth
  ///   - username
  ///   - nickname
  ///   - company
  ///   - photo
  ///   - device
  ///   - browser
  ///   - name
  ///   - givenName
  ///   - familyName
  ///   - middleName
  ///   - profile
  ///   - preferredUsername
  ///   - website
  ///   - gender
  ///   - birthdate
  ///   - zoneinfo
  ///   - locale
  ///   - address
  ///   - formatted
  ///   - streetAddress
  ///   - locality
  ///   - region
  ///   - postalCode
  ///   - country
  ///   - udf
  public init(ip: Swift.Optional<String?> = nil, oauth: Swift.Optional<String?> = nil, username: Swift.Optional<String?> = nil, nickname: Swift.Optional<String?> = nil, company: Swift.Optional<String?> = nil, photo: Swift.Optional<String?> = nil, device: Swift.Optional<String?> = nil, browser: Swift.Optional<String?> = nil, name: Swift.Optional<String?> = nil, givenName: Swift.Optional<String?> = nil, familyName: Swift.Optional<String?> = nil, middleName: Swift.Optional<String?> = nil, profile: Swift.Optional<String?> = nil, preferredUsername: Swift.Optional<String?> = nil, website: Swift.Optional<String?> = nil, gender: Swift.Optional<String?> = nil, birthdate: Swift.Optional<String?> = nil, zoneinfo: Swift.Optional<String?> = nil, locale: Swift.Optional<String?> = nil, address: Swift.Optional<String?> = nil, formatted: Swift.Optional<String?> = nil, streetAddress: Swift.Optional<String?> = nil, locality: Swift.Optional<String?> = nil, region: Swift.Optional<String?> = nil, postalCode: Swift.Optional<String?> = nil, country: Swift.Optional<String?> = nil, udf: Swift.Optional<[UserDdfInput]?> = nil) {
    graphQLMap = ["ip": ip, "oauth": oauth, "username": username, "nickname": nickname, "company": company, "photo": photo, "device": device, "browser": browser, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "country": country, "udf": udf]
  }

  public var ip: Swift.Optional<String?> {
    get {
      return graphQLMap["ip"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ip")
    }
  }

  public var oauth: Swift.Optional<String?> {
    get {
      return graphQLMap["oauth"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "oauth")
    }
  }

  public var username: Swift.Optional<String?> {
    get {
      return graphQLMap["username"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "username")
    }
  }

  public var nickname: Swift.Optional<String?> {
    get {
      return graphQLMap["nickname"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "nickname")
    }
  }

  public var company: Swift.Optional<String?> {
    get {
      return graphQLMap["company"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "company")
    }
  }

  public var photo: Swift.Optional<String?> {
    get {
      return graphQLMap["photo"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "photo")
    }
  }

  public var device: Swift.Optional<String?> {
    get {
      return graphQLMap["device"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "device")
    }
  }

  public var browser: Swift.Optional<String?> {
    get {
      return graphQLMap["browser"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "browser")
    }
  }

  public var name: Swift.Optional<String?> {
    get {
      return graphQLMap["name"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var givenName: Swift.Optional<String?> {
    get {
      return graphQLMap["givenName"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "givenName")
    }
  }

  public var familyName: Swift.Optional<String?> {
    get {
      return graphQLMap["familyName"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "familyName")
    }
  }

  public var middleName: Swift.Optional<String?> {
    get {
      return graphQLMap["middleName"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "middleName")
    }
  }

  public var profile: Swift.Optional<String?> {
    get {
      return graphQLMap["profile"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "profile")
    }
  }

  public var preferredUsername: Swift.Optional<String?> {
    get {
      return graphQLMap["preferredUsername"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "preferredUsername")
    }
  }

  public var website: Swift.Optional<String?> {
    get {
      return graphQLMap["website"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "website")
    }
  }

  public var gender: Swift.Optional<String?> {
    get {
      return graphQLMap["gender"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gender")
    }
  }

  public var birthdate: Swift.Optional<String?> {
    get {
      return graphQLMap["birthdate"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "birthdate")
    }
  }

  public var zoneinfo: Swift.Optional<String?> {
    get {
      return graphQLMap["zoneinfo"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "zoneinfo")
    }
  }

  public var locale: Swift.Optional<String?> {
    get {
      return graphQLMap["locale"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "locale")
    }
  }

  public var address: Swift.Optional<String?> {
    get {
      return graphQLMap["address"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "address")
    }
  }

  public var formatted: Swift.Optional<String?> {
    get {
      return graphQLMap["formatted"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "formatted")
    }
  }

  public var streetAddress: Swift.Optional<String?> {
    get {
      return graphQLMap["streetAddress"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "streetAddress")
    }
  }

  public var locality: Swift.Optional<String?> {
    get {
      return graphQLMap["locality"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "locality")
    }
  }

  public var region: Swift.Optional<String?> {
    get {
      return graphQLMap["region"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "region")
    }
  }

  public var postalCode: Swift.Optional<String?> {
    get {
      return graphQLMap["postalCode"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "postalCode")
    }
  }

  public var country: Swift.Optional<String?> {
    get {
      return graphQLMap["country"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "country")
    }
  }

  public var udf: Swift.Optional<[UserDdfInput]?> {
    get {
      return graphQLMap["udf"] as? Swift.Optional<[UserDdfInput]?> ?? Swift.Optional<[UserDdfInput]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "udf")
    }
  }
}

public struct UserDdfInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - key
  ///   - value
  public init(key: String, value: String) {
    graphQLMap = ["key": key, "value": value]
  }

  public var key: String {
    get {
      return graphQLMap["key"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "key")
    }
  }

  public var value: String {
    get {
      return graphQLMap["value"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "value")
    }
  }
}

public struct RegisterByPhoneCodeInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - phone
  ///   - code
  ///   - password
  ///   - profile
  ///   - forceLogin
  ///   - generateToken
  ///   - clientIp
  ///   - params: 设置用户自定义字段，要求符合 Array<{ key: string; value: string }> 格式
  ///   - context: 请求上下文信息，将会传递到 pipeline 中
  public init(phone: String, code: String, password: Swift.Optional<String?> = nil, profile: Swift.Optional<RegisterProfile?> = nil, forceLogin: Swift.Optional<Bool?> = nil, generateToken: Swift.Optional<Bool?> = nil, clientIp: Swift.Optional<String?> = nil, params: Swift.Optional<String?> = nil, context: Swift.Optional<String?> = nil) {
    graphQLMap = ["phone": phone, "code": code, "password": password, "profile": profile, "forceLogin": forceLogin, "generateToken": generateToken, "clientIp": clientIp, "params": params, "context": context]
  }

  public var phone: String {
    get {
      return graphQLMap["phone"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phone")
    }
  }

  public var code: String {
    get {
      return graphQLMap["code"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "code")
    }
  }

  public var password: Swift.Optional<String?> {
    get {
      return graphQLMap["password"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "password")
    }
  }

  public var profile: Swift.Optional<RegisterProfile?> {
    get {
      return graphQLMap["profile"] as? Swift.Optional<RegisterProfile?> ?? Swift.Optional<RegisterProfile?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "profile")
    }
  }

  public var forceLogin: Swift.Optional<Bool?> {
    get {
      return graphQLMap["forceLogin"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "forceLogin")
    }
  }

  public var generateToken: Swift.Optional<Bool?> {
    get {
      return graphQLMap["generateToken"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "generateToken")
    }
  }

  public var clientIp: Swift.Optional<String?> {
    get {
      return graphQLMap["clientIp"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "clientIp")
    }
  }

  /// 设置用户自定义字段，要求符合 Array<{ key: string; value: string }> 格式
  public var params: Swift.Optional<String?> {
    get {
      return graphQLMap["params"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "params")
    }
  }

  /// 请求上下文信息，将会传递到 pipeline 中
  public var context: Swift.Optional<String?> {
    get {
      return graphQLMap["context"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "context")
    }
  }
}

public struct RegisterByUsernameInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - username
  ///   - password
  ///   - profile
  ///   - forceLogin
  ///   - generateToken
  ///   - clientIp
  ///   - params: 设置用户自定义字段，要求符合 Array<{ key: string; value: string }> 格式
  ///   - context: 请求上下文信息，将会传递到 pipeline 中
  public init(username: String, password: String, profile: Swift.Optional<RegisterProfile?> = nil, forceLogin: Swift.Optional<Bool?> = nil, generateToken: Swift.Optional<Bool?> = nil, clientIp: Swift.Optional<String?> = nil, params: Swift.Optional<String?> = nil, context: Swift.Optional<String?> = nil) {
    graphQLMap = ["username": username, "password": password, "profile": profile, "forceLogin": forceLogin, "generateToken": generateToken, "clientIp": clientIp, "params": params, "context": context]
  }

  public var username: String {
    get {
      return graphQLMap["username"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "username")
    }
  }

  public var password: String {
    get {
      return graphQLMap["password"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "password")
    }
  }

  public var profile: Swift.Optional<RegisterProfile?> {
    get {
      return graphQLMap["profile"] as? Swift.Optional<RegisterProfile?> ?? Swift.Optional<RegisterProfile?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "profile")
    }
  }

  public var forceLogin: Swift.Optional<Bool?> {
    get {
      return graphQLMap["forceLogin"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "forceLogin")
    }
  }

  public var generateToken: Swift.Optional<Bool?> {
    get {
      return graphQLMap["generateToken"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "generateToken")
    }
  }

  public var clientIp: Swift.Optional<String?> {
    get {
      return graphQLMap["clientIp"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "clientIp")
    }
  }

  /// 设置用户自定义字段，要求符合 Array<{ key: string; value: string }> 格式
  public var params: Swift.Optional<String?> {
    get {
      return graphQLMap["params"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "params")
    }
  }

  /// 请求上下文信息，将会传递到 pipeline 中
  public var context: Swift.Optional<String?> {
    get {
      return graphQLMap["context"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "context")
    }
  }
}

public enum UDFTargetType: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  case node
  case org
  case user
  case userpool
  case role
  case permission
  case application
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "NODE": self = .node
      case "ORG": self = .org
      case "USER": self = .user
      case "USERPOOL": self = .userpool
      case "ROLE": self = .role
      case "PERMISSION": self = .permission
      case "APPLICATION": self = .application
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .node: return "NODE"
      case .org: return "ORG"
      case .user: return "USER"
      case .userpool: return "USERPOOL"
      case .role: return "ROLE"
      case .permission: return "PERMISSION"
      case .application: return "APPLICATION"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: UDFTargetType, rhs: UDFTargetType) -> Bool {
    switch (lhs, rhs) {
      case (.node, .node): return true
      case (.org, .org): return true
      case (.user, .user): return true
      case (.userpool, .userpool): return true
      case (.role, .role): return true
      case (.permission, .permission): return true
      case (.application, .application): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [UDFTargetType] {
    return [
      .node,
      .org,
      .user,
      .userpool,
      .role,
      .permission,
      .application,
    ]
  }
}

public struct SearchUserDepartmentOpt: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - departmentId
  ///   - includeChildrenDepartments
  public init(departmentId: Swift.Optional<String?> = nil, includeChildrenDepartments: Swift.Optional<Bool?> = nil) {
    graphQLMap = ["departmentId": departmentId, "includeChildrenDepartments": includeChildrenDepartments]
  }

  public var departmentId: Swift.Optional<String?> {
    get {
      return graphQLMap["departmentId"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "departmentId")
    }
  }

  public var includeChildrenDepartments: Swift.Optional<Bool?> {
    get {
      return graphQLMap["includeChildrenDepartments"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "includeChildrenDepartments")
    }
  }
}

public struct SearchUserGroupOpt: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - code
  public init(code: Swift.Optional<String?> = nil) {
    graphQLMap = ["code": code]
  }

  public var code: Swift.Optional<String?> {
    get {
      return graphQLMap["code"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "code")
    }
  }
}

public struct SearchUserRoleOpt: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - namespace
  ///   - code
  public init(namespace: Swift.Optional<String?> = nil, code: String) {
    graphQLMap = ["namespace": namespace, "code": code]
  }

  public var namespace: Swift.Optional<String?> {
    get {
      return graphQLMap["namespace"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "namespace")
    }
  }

  public var code: String {
    get {
      return graphQLMap["code"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "code")
    }
  }
}

/// 邮件使用场景
public enum EmailScene: RawRepresentable, Equatable, Hashable, CaseIterable, Apollo.JSONDecodable, Apollo.JSONEncodable {
  public typealias RawValue = String
  /// 发送重置密码邮件，邮件中包含验证码
  case resetPassword
  /// 发送验证邮箱的邮件
  case verifyEmail
  /// 发送修改邮箱邮件，邮件中包含验证码
  case changeEmail
  /// 发送 MFA 验证邮件
  case mfaVerify
  /// Auto generated constant for unknown enum values
  case __unknown(RawValue)

  public init?(rawValue: RawValue) {
    switch rawValue {
      case "RESET_PASSWORD": self = .resetPassword
      case "VERIFY_EMAIL": self = .verifyEmail
      case "CHANGE_EMAIL": self = .changeEmail
      case "MFA_VERIFY": self = .mfaVerify
      default: self = .__unknown(rawValue)
    }
  }

  public var rawValue: RawValue {
    switch self {
      case .resetPassword: return "RESET_PASSWORD"
      case .verifyEmail: return "VERIFY_EMAIL"
      case .changeEmail: return "CHANGE_EMAIL"
      case .mfaVerify: return "MFA_VERIFY"
      case .__unknown(let value): return value
    }
  }

  public static func == (lhs: EmailScene, rhs: EmailScene) -> Bool {
    switch (lhs, rhs) {
      case (.resetPassword, .resetPassword): return true
      case (.verifyEmail, .verifyEmail): return true
      case (.changeEmail, .changeEmail): return true
      case (.mfaVerify, .mfaVerify): return true
      case (.__unknown(let lhsValue), .__unknown(let rhsValue)): return lhsValue == rhsValue
      default: return false
    }
  }

  public static var allCases: [EmailScene] {
    return [
      .resetPassword,
      .verifyEmail,
      .changeEmail,
      .mfaVerify,
    ]
  }
}

public struct SetUdfValueBatchInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - targetId
  ///   - key
  ///   - value
  public init(targetId: String, key: String, value: String) {
    graphQLMap = ["targetId": targetId, "key": key, "value": value]
  }

  public var targetId: String {
    get {
      return graphQLMap["targetId"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "targetId")
    }
  }

  public var key: String {
    get {
      return graphQLMap["key"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "key")
    }
  }

  public var value: String {
    get {
      return graphQLMap["value"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "value")
    }
  }
}

public struct UserDefinedDataInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - key
  ///   - value
  public init(key: String, value: Swift.Optional<String?> = nil) {
    graphQLMap = ["key": key, "value": value]
  }

  public var key: String {
    get {
      return graphQLMap["key"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "key")
    }
  }

  public var value: Swift.Optional<String?> {
    get {
      return graphQLMap["value"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "value")
    }
  }
}

public struct UpdateFunctionInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - id: ID
  ///   - name: 函数名称
  ///   - sourceCode: 源代码
  ///   - description: 描述信息
  ///   - url: 云函数链接
  public init(id: String, name: Swift.Optional<String?> = nil, sourceCode: Swift.Optional<String?> = nil, description: Swift.Optional<String?> = nil, url: Swift.Optional<String?> = nil) {
    graphQLMap = ["id": id, "name": name, "sourceCode": sourceCode, "description": description, "url": url]
  }

  /// ID
  public var id: String {
    get {
      return graphQLMap["id"] as! String
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "id")
    }
  }

  /// 函数名称
  public var name: Swift.Optional<String?> {
    get {
      return graphQLMap["name"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  /// 源代码
  public var sourceCode: Swift.Optional<String?> {
    get {
      return graphQLMap["sourceCode"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sourceCode")
    }
  }

  /// 描述信息
  public var description: Swift.Optional<String?> {
    get {
      return graphQLMap["description"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "description")
    }
  }

  /// 云函数链接
  public var url: Swift.Optional<String?> {
    get {
      return graphQLMap["url"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "url")
    }
  }
}

public struct UpdateUserInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - email: 邮箱。直接修改用户邮箱需要管理员权限，普通用户修改邮箱请使用 **updateEmail** 接口。
  ///   - unionid
  ///   - openid
  ///   - emailVerified: 邮箱是否已验证。直接修改 emailVerified 需要管理员权限。
  ///   - phone: 手机号。直接修改用户手机号需要管理员权限，普通用户修改邮箱请使用 **updatePhone** 接口。
  ///   - phoneVerified: 手机号是否已验证。直接修改 **phoneVerified** 需要管理员权限。
  ///   - username: 用户名，用户池内唯一
  ///   - nickname: 昵称，该字段不唯一。
  ///   - password: 密码。直接修改用户密码需要管理员权限，普通用户修改邮箱请使用 **updatePassword** 接口。
  ///   - photo: 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
  ///   - company: 注册方式
  ///   - browser
  ///   - device
  ///   - oauth
  ///   - tokenExpiredAt
  ///   - loginsCount: 用户累计登录次数，当你从你原有用户系统向 Authing 迁移的时候可以设置此字段。
  ///   - lastLogin
  ///   - lastIp
  ///   - blocked: 用户注册时间，当你从你原有用户系统向 Authing 迁移的时候可以设置此字段。
  ///   - name
  ///   - givenName
  ///   - familyName
  ///   - middleName
  ///   - profile
  ///   - preferredUsername
  ///   - website
  ///   - gender
  ///   - birthdate
  ///   - zoneinfo
  ///   - locale
  ///   - address
  ///   - formatted
  ///   - streetAddress
  ///   - locality
  ///   - region
  ///   - postalCode
  ///   - city
  ///   - province
  ///   - country
  ///   - externalId
  public init(email: Swift.Optional<String?> = nil, unionid: Swift.Optional<String?> = nil, openid: Swift.Optional<String?> = nil, emailVerified: Swift.Optional<Bool?> = nil, phone: Swift.Optional<String?> = nil, phoneVerified: Swift.Optional<Bool?> = nil, username: Swift.Optional<String?> = nil, nickname: Swift.Optional<String?> = nil, password: Swift.Optional<String?> = nil, photo: Swift.Optional<String?> = nil, company: Swift.Optional<String?> = nil, browser: Swift.Optional<String?> = nil, device: Swift.Optional<String?> = nil, oauth: Swift.Optional<String?> = nil, tokenExpiredAt: Swift.Optional<String?> = nil, loginsCount: Swift.Optional<Int?> = nil, lastLogin: Swift.Optional<String?> = nil, lastIp: Swift.Optional<String?> = nil, blocked: Swift.Optional<Bool?> = nil, name: Swift.Optional<String?> = nil, givenName: Swift.Optional<String?> = nil, familyName: Swift.Optional<String?> = nil, middleName: Swift.Optional<String?> = nil, profile: Swift.Optional<String?> = nil, preferredUsername: Swift.Optional<String?> = nil, website: Swift.Optional<String?> = nil, gender: Swift.Optional<String?> = nil, birthdate: Swift.Optional<String?> = nil, zoneinfo: Swift.Optional<String?> = nil, locale: Swift.Optional<String?> = nil, address: Swift.Optional<String?> = nil, formatted: Swift.Optional<String?> = nil, streetAddress: Swift.Optional<String?> = nil, locality: Swift.Optional<String?> = nil, region: Swift.Optional<String?> = nil, postalCode: Swift.Optional<String?> = nil, city: Swift.Optional<String?> = nil, province: Swift.Optional<String?> = nil, country: Swift.Optional<String?> = nil, externalId: Swift.Optional<String?> = nil) {
    graphQLMap = ["email": email, "unionid": unionid, "openid": openid, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "username": username, "nickname": nickname, "password": password, "photo": photo, "company": company, "browser": browser, "device": device, "oauth": oauth, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "blocked": blocked, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "externalId": externalId]
  }

  /// 邮箱。直接修改用户邮箱需要管理员权限，普通用户修改邮箱请使用 **updateEmail** 接口。
  public var email: Swift.Optional<String?> {
    get {
      return graphQLMap["email"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "email")
    }
  }

  public var unionid: Swift.Optional<String?> {
    get {
      return graphQLMap["unionid"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "unionid")
    }
  }

  public var openid: Swift.Optional<String?> {
    get {
      return graphQLMap["openid"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "openid")
    }
  }

  /// 邮箱是否已验证。直接修改 emailVerified 需要管理员权限。
  public var emailVerified: Swift.Optional<Bool?> {
    get {
      return graphQLMap["emailVerified"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "emailVerified")
    }
  }

  /// 手机号。直接修改用户手机号需要管理员权限，普通用户修改邮箱请使用 **updatePhone** 接口。
  public var phone: Swift.Optional<String?> {
    get {
      return graphQLMap["phone"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phone")
    }
  }

  /// 手机号是否已验证。直接修改 **phoneVerified** 需要管理员权限。
  public var phoneVerified: Swift.Optional<Bool?> {
    get {
      return graphQLMap["phoneVerified"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phoneVerified")
    }
  }

  /// 用户名，用户池内唯一
  public var username: Swift.Optional<String?> {
    get {
      return graphQLMap["username"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "username")
    }
  }

  /// 昵称，该字段不唯一。
  public var nickname: Swift.Optional<String?> {
    get {
      return graphQLMap["nickname"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "nickname")
    }
  }

  /// 密码。直接修改用户密码需要管理员权限，普通用户修改邮箱请使用 **updatePassword** 接口。
  public var password: Swift.Optional<String?> {
    get {
      return graphQLMap["password"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "password")
    }
  }

  /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
  public var photo: Swift.Optional<String?> {
    get {
      return graphQLMap["photo"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "photo")
    }
  }

  /// 注册方式
  public var company: Swift.Optional<String?> {
    get {
      return graphQLMap["company"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "company")
    }
  }

  public var browser: Swift.Optional<String?> {
    get {
      return graphQLMap["browser"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "browser")
    }
  }

  public var device: Swift.Optional<String?> {
    get {
      return graphQLMap["device"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "device")
    }
  }

  public var oauth: Swift.Optional<String?> {
    get {
      return graphQLMap["oauth"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "oauth")
    }
  }

  public var tokenExpiredAt: Swift.Optional<String?> {
    get {
      return graphQLMap["tokenExpiredAt"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tokenExpiredAt")
    }
  }

  /// 用户累计登录次数，当你从你原有用户系统向 Authing 迁移的时候可以设置此字段。
  public var loginsCount: Swift.Optional<Int?> {
    get {
      return graphQLMap["loginsCount"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "loginsCount")
    }
  }

  public var lastLogin: Swift.Optional<String?> {
    get {
      return graphQLMap["lastLogin"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastLogin")
    }
  }

  public var lastIp: Swift.Optional<String?> {
    get {
      return graphQLMap["lastIP"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "lastIP")
    }
  }

  /// 用户注册时间，当你从你原有用户系统向 Authing 迁移的时候可以设置此字段。
  public var blocked: Swift.Optional<Bool?> {
    get {
      return graphQLMap["blocked"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "blocked")
    }
  }

  public var name: Swift.Optional<String?> {
    get {
      return graphQLMap["name"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var givenName: Swift.Optional<String?> {
    get {
      return graphQLMap["givenName"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "givenName")
    }
  }

  public var familyName: Swift.Optional<String?> {
    get {
      return graphQLMap["familyName"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "familyName")
    }
  }

  public var middleName: Swift.Optional<String?> {
    get {
      return graphQLMap["middleName"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "middleName")
    }
  }

  public var profile: Swift.Optional<String?> {
    get {
      return graphQLMap["profile"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "profile")
    }
  }

  public var preferredUsername: Swift.Optional<String?> {
    get {
      return graphQLMap["preferredUsername"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "preferredUsername")
    }
  }

  public var website: Swift.Optional<String?> {
    get {
      return graphQLMap["website"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "website")
    }
  }

  public var gender: Swift.Optional<String?> {
    get {
      return graphQLMap["gender"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "gender")
    }
  }

  public var birthdate: Swift.Optional<String?> {
    get {
      return graphQLMap["birthdate"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "birthdate")
    }
  }

  public var zoneinfo: Swift.Optional<String?> {
    get {
      return graphQLMap["zoneinfo"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "zoneinfo")
    }
  }

  public var locale: Swift.Optional<String?> {
    get {
      return graphQLMap["locale"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "locale")
    }
  }

  public var address: Swift.Optional<String?> {
    get {
      return graphQLMap["address"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "address")
    }
  }

  public var formatted: Swift.Optional<String?> {
    get {
      return graphQLMap["formatted"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "formatted")
    }
  }

  public var streetAddress: Swift.Optional<String?> {
    get {
      return graphQLMap["streetAddress"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "streetAddress")
    }
  }

  public var locality: Swift.Optional<String?> {
    get {
      return graphQLMap["locality"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "locality")
    }
  }

  public var region: Swift.Optional<String?> {
    get {
      return graphQLMap["region"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "region")
    }
  }

  public var postalCode: Swift.Optional<String?> {
    get {
      return graphQLMap["postalCode"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "postalCode")
    }
  }

  public var city: Swift.Optional<String?> {
    get {
      return graphQLMap["city"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "city")
    }
  }

  public var province: Swift.Optional<String?> {
    get {
      return graphQLMap["province"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "province")
    }
  }

  public var country: Swift.Optional<String?> {
    get {
      return graphQLMap["country"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "country")
    }
  }

  public var externalId: Swift.Optional<String?> {
    get {
      return graphQLMap["externalId"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "externalId")
    }
  }
}

public struct UpdateUserpoolInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - name
  ///   - logo
  ///   - domain
  ///   - description
  ///   - userpoolTypes
  ///   - emailVerifiedDefault
  ///   - sendWelcomeEmail
  ///   - registerDisabled
  ///   - appSsoEnabled: @deprecated
  ///   - allowedOrigins
  ///   - tokenExpiresAfter
  ///   - frequentRegisterCheck
  ///   - loginFailCheck
  ///   - passwordUpdatePolicy: 密码重置策略
  ///   - loginFailStrategy
  ///   - loginPasswordFailCheck
  ///   - changePhoneStrategy
  ///   - changeEmailStrategy
  ///   - qrcodeLoginStrategy
  ///   - app2WxappLoginStrategy
  ///   - whitelist
  ///   - customSmsProvider: 自定义短信服务商配置
  ///   - loginRequireEmailVerified: 是否要求邮箱必须验证才能登录（如果是通过邮箱登录的话）
  ///   - verifyCodeLength
  public init(name: Swift.Optional<String?> = nil, logo: Swift.Optional<String?> = nil, domain: Swift.Optional<String?> = nil, description: Swift.Optional<String?> = nil, userpoolTypes: Swift.Optional<[String]?> = nil, emailVerifiedDefault: Swift.Optional<Bool?> = nil, sendWelcomeEmail: Swift.Optional<Bool?> = nil, registerDisabled: Swift.Optional<Bool?> = nil, appSsoEnabled: Swift.Optional<Bool?> = nil, allowedOrigins: Swift.Optional<String?> = nil, tokenExpiresAfter: Swift.Optional<Int?> = nil, frequentRegisterCheck: Swift.Optional<FrequentRegisterCheckConfigInput?> = nil, loginFailCheck: Swift.Optional<LoginFailCheckConfigInput?> = nil, passwordUpdatePolicy: Swift.Optional<PasswordUpdatePolicyInput?> = nil, loginFailStrategy: Swift.Optional<String?> = nil, loginPasswordFailCheck: Swift.Optional<LoginPasswordFailCheckConfigInput?> = nil, changePhoneStrategy: Swift.Optional<ChangePhoneStrategyInput?> = nil, changeEmailStrategy: Swift.Optional<ChangeEmailStrategyInput?> = nil, qrcodeLoginStrategy: Swift.Optional<QrcodeLoginStrategyInput?> = nil, app2WxappLoginStrategy: Swift.Optional<App2WxappLoginStrategyInput?> = nil, whitelist: Swift.Optional<RegisterWhiteListConfigInput?> = nil, customSmsProvider: Swift.Optional<CustomSMSProviderInput?> = nil, loginRequireEmailVerified: Swift.Optional<Bool?> = nil, verifyCodeLength: Swift.Optional<Int?> = nil) {
    graphQLMap = ["name": name, "logo": logo, "domain": domain, "description": description, "userpoolTypes": userpoolTypes, "emailVerifiedDefault": emailVerifiedDefault, "sendWelcomeEmail": sendWelcomeEmail, "registerDisabled": registerDisabled, "appSsoEnabled": appSsoEnabled, "allowedOrigins": allowedOrigins, "tokenExpiresAfter": tokenExpiresAfter, "frequentRegisterCheck": frequentRegisterCheck, "loginFailCheck": loginFailCheck, "passwordUpdatePolicy": passwordUpdatePolicy, "loginFailStrategy": loginFailStrategy, "loginPasswordFailCheck": loginPasswordFailCheck, "changePhoneStrategy": changePhoneStrategy, "changeEmailStrategy": changeEmailStrategy, "qrcodeLoginStrategy": qrcodeLoginStrategy, "app2WxappLoginStrategy": app2WxappLoginStrategy, "whitelist": whitelist, "customSMSProvider": customSmsProvider, "loginRequireEmailVerified": loginRequireEmailVerified, "verifyCodeLength": verifyCodeLength]
  }

  public var name: Swift.Optional<String?> {
    get {
      return graphQLMap["name"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "name")
    }
  }

  public var logo: Swift.Optional<String?> {
    get {
      return graphQLMap["logo"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "logo")
    }
  }

  public var domain: Swift.Optional<String?> {
    get {
      return graphQLMap["domain"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "domain")
    }
  }

  public var description: Swift.Optional<String?> {
    get {
      return graphQLMap["description"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "description")
    }
  }

  public var userpoolTypes: Swift.Optional<[String]?> {
    get {
      return graphQLMap["userpoolTypes"] as? Swift.Optional<[String]?> ?? Swift.Optional<[String]?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "userpoolTypes")
    }
  }

  public var emailVerifiedDefault: Swift.Optional<Bool?> {
    get {
      return graphQLMap["emailVerifiedDefault"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "emailVerifiedDefault")
    }
  }

  public var sendWelcomeEmail: Swift.Optional<Bool?> {
    get {
      return graphQLMap["sendWelcomeEmail"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "sendWelcomeEmail")
    }
  }

  public var registerDisabled: Swift.Optional<Bool?> {
    get {
      return graphQLMap["registerDisabled"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "registerDisabled")
    }
  }

  /// @deprecated
  public var appSsoEnabled: Swift.Optional<Bool?> {
    get {
      return graphQLMap["appSsoEnabled"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "appSsoEnabled")
    }
  }

  public var allowedOrigins: Swift.Optional<String?> {
    get {
      return graphQLMap["allowedOrigins"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "allowedOrigins")
    }
  }

  public var tokenExpiresAfter: Swift.Optional<Int?> {
    get {
      return graphQLMap["tokenExpiresAfter"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "tokenExpiresAfter")
    }
  }

  public var frequentRegisterCheck: Swift.Optional<FrequentRegisterCheckConfigInput?> {
    get {
      return graphQLMap["frequentRegisterCheck"] as? Swift.Optional<FrequentRegisterCheckConfigInput?> ?? Swift.Optional<FrequentRegisterCheckConfigInput?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "frequentRegisterCheck")
    }
  }

  public var loginFailCheck: Swift.Optional<LoginFailCheckConfigInput?> {
    get {
      return graphQLMap["loginFailCheck"] as? Swift.Optional<LoginFailCheckConfigInput?> ?? Swift.Optional<LoginFailCheckConfigInput?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "loginFailCheck")
    }
  }

  /// 密码重置策略
  public var passwordUpdatePolicy: Swift.Optional<PasswordUpdatePolicyInput?> {
    get {
      return graphQLMap["passwordUpdatePolicy"] as? Swift.Optional<PasswordUpdatePolicyInput?> ?? Swift.Optional<PasswordUpdatePolicyInput?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "passwordUpdatePolicy")
    }
  }

  public var loginFailStrategy: Swift.Optional<String?> {
    get {
      return graphQLMap["loginFailStrategy"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "loginFailStrategy")
    }
  }

  public var loginPasswordFailCheck: Swift.Optional<LoginPasswordFailCheckConfigInput?> {
    get {
      return graphQLMap["loginPasswordFailCheck"] as? Swift.Optional<LoginPasswordFailCheckConfigInput?> ?? Swift.Optional<LoginPasswordFailCheckConfigInput?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "loginPasswordFailCheck")
    }
  }

  public var changePhoneStrategy: Swift.Optional<ChangePhoneStrategyInput?> {
    get {
      return graphQLMap["changePhoneStrategy"] as? Swift.Optional<ChangePhoneStrategyInput?> ?? Swift.Optional<ChangePhoneStrategyInput?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "changePhoneStrategy")
    }
  }

  public var changeEmailStrategy: Swift.Optional<ChangeEmailStrategyInput?> {
    get {
      return graphQLMap["changeEmailStrategy"] as? Swift.Optional<ChangeEmailStrategyInput?> ?? Swift.Optional<ChangeEmailStrategyInput?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "changeEmailStrategy")
    }
  }

  public var qrcodeLoginStrategy: Swift.Optional<QrcodeLoginStrategyInput?> {
    get {
      return graphQLMap["qrcodeLoginStrategy"] as? Swift.Optional<QrcodeLoginStrategyInput?> ?? Swift.Optional<QrcodeLoginStrategyInput?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "qrcodeLoginStrategy")
    }
  }

  public var app2WxappLoginStrategy: Swift.Optional<App2WxappLoginStrategyInput?> {
    get {
      return graphQLMap["app2WxappLoginStrategy"] as? Swift.Optional<App2WxappLoginStrategyInput?> ?? Swift.Optional<App2WxappLoginStrategyInput?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "app2WxappLoginStrategy")
    }
  }

  public var whitelist: Swift.Optional<RegisterWhiteListConfigInput?> {
    get {
      return graphQLMap["whitelist"] as? Swift.Optional<RegisterWhiteListConfigInput?> ?? Swift.Optional<RegisterWhiteListConfigInput?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "whitelist")
    }
  }

  /// 自定义短信服务商配置
  public var customSmsProvider: Swift.Optional<CustomSMSProviderInput?> {
    get {
      return graphQLMap["customSMSProvider"] as? Swift.Optional<CustomSMSProviderInput?> ?? Swift.Optional<CustomSMSProviderInput?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "customSMSProvider")
    }
  }

  /// 是否要求邮箱必须验证才能登录（如果是通过邮箱登录的话）
  public var loginRequireEmailVerified: Swift.Optional<Bool?> {
    get {
      return graphQLMap["loginRequireEmailVerified"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "loginRequireEmailVerified")
    }
  }

  public var verifyCodeLength: Swift.Optional<Int?> {
    get {
      return graphQLMap["verifyCodeLength"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "verifyCodeLength")
    }
  }
}

public struct FrequentRegisterCheckConfigInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - timeInterval
  ///   - limit
  ///   - enabled
  public init(timeInterval: Swift.Optional<Int?> = nil, limit: Swift.Optional<Int?> = nil, enabled: Swift.Optional<Bool?> = nil) {
    graphQLMap = ["timeInterval": timeInterval, "limit": limit, "enabled": enabled]
  }

  public var timeInterval: Swift.Optional<Int?> {
    get {
      return graphQLMap["timeInterval"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "timeInterval")
    }
  }

  public var limit: Swift.Optional<Int?> {
    get {
      return graphQLMap["limit"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "limit")
    }
  }

  public var enabled: Swift.Optional<Bool?> {
    get {
      return graphQLMap["enabled"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "enabled")
    }
  }
}

public struct LoginFailCheckConfigInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - timeInterval
  ///   - limit
  ///   - enabled
  public init(timeInterval: Swift.Optional<Int?> = nil, limit: Swift.Optional<Int?> = nil, enabled: Swift.Optional<Bool?> = nil) {
    graphQLMap = ["timeInterval": timeInterval, "limit": limit, "enabled": enabled]
  }

  public var timeInterval: Swift.Optional<Int?> {
    get {
      return graphQLMap["timeInterval"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "timeInterval")
    }
  }

  public var limit: Swift.Optional<Int?> {
    get {
      return graphQLMap["limit"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "limit")
    }
  }

  public var enabled: Swift.Optional<Bool?> {
    get {
      return graphQLMap["enabled"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "enabled")
    }
  }
}

public struct PasswordUpdatePolicyInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - enabled
  ///   - forcedCycle
  ///   - differenceCycle
  public init(enabled: Swift.Optional<Bool?> = nil, forcedCycle: Swift.Optional<Int?> = nil, differenceCycle: Swift.Optional<Int?> = nil) {
    graphQLMap = ["enabled": enabled, "forcedCycle": forcedCycle, "differenceCycle": differenceCycle]
  }

  public var enabled: Swift.Optional<Bool?> {
    get {
      return graphQLMap["enabled"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "enabled")
    }
  }

  public var forcedCycle: Swift.Optional<Int?> {
    get {
      return graphQLMap["forcedCycle"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "forcedCycle")
    }
  }

  public var differenceCycle: Swift.Optional<Int?> {
    get {
      return graphQLMap["differenceCycle"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "differenceCycle")
    }
  }
}

public struct LoginPasswordFailCheckConfigInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - timeInterval
  ///   - limit
  ///   - enabled
  public init(timeInterval: Swift.Optional<Int?> = nil, limit: Swift.Optional<Int?> = nil, enabled: Swift.Optional<Bool?> = nil) {
    graphQLMap = ["timeInterval": timeInterval, "limit": limit, "enabled": enabled]
  }

  public var timeInterval: Swift.Optional<Int?> {
    get {
      return graphQLMap["timeInterval"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "timeInterval")
    }
  }

  public var limit: Swift.Optional<Int?> {
    get {
      return graphQLMap["limit"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "limit")
    }
  }

  public var enabled: Swift.Optional<Bool?> {
    get {
      return graphQLMap["enabled"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "enabled")
    }
  }
}

public struct ChangePhoneStrategyInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - verifyOldPhone
  public init(verifyOldPhone: Swift.Optional<Bool?> = nil) {
    graphQLMap = ["verifyOldPhone": verifyOldPhone]
  }

  public var verifyOldPhone: Swift.Optional<Bool?> {
    get {
      return graphQLMap["verifyOldPhone"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "verifyOldPhone")
    }
  }
}

public struct ChangeEmailStrategyInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - verifyOldEmail
  public init(verifyOldEmail: Swift.Optional<Bool?> = nil) {
    graphQLMap = ["verifyOldEmail": verifyOldEmail]
  }

  public var verifyOldEmail: Swift.Optional<Bool?> {
    get {
      return graphQLMap["verifyOldEmail"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "verifyOldEmail")
    }
  }
}

public struct QrcodeLoginStrategyInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - qrcodeExpiresAfter
  ///   - returnFullUserInfo
  ///   - allowExchangeUserInfoFromBrowser
  ///   - ticketExpiresAfter
  public init(qrcodeExpiresAfter: Swift.Optional<Int?> = nil, returnFullUserInfo: Swift.Optional<Bool?> = nil, allowExchangeUserInfoFromBrowser: Swift.Optional<Bool?> = nil, ticketExpiresAfter: Swift.Optional<Int?> = nil) {
    graphQLMap = ["qrcodeExpiresAfter": qrcodeExpiresAfter, "returnFullUserInfo": returnFullUserInfo, "allowExchangeUserInfoFromBrowser": allowExchangeUserInfoFromBrowser, "ticketExpiresAfter": ticketExpiresAfter]
  }

  public var qrcodeExpiresAfter: Swift.Optional<Int?> {
    get {
      return graphQLMap["qrcodeExpiresAfter"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "qrcodeExpiresAfter")
    }
  }

  public var returnFullUserInfo: Swift.Optional<Bool?> {
    get {
      return graphQLMap["returnFullUserInfo"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "returnFullUserInfo")
    }
  }

  public var allowExchangeUserInfoFromBrowser: Swift.Optional<Bool?> {
    get {
      return graphQLMap["allowExchangeUserInfoFromBrowser"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "allowExchangeUserInfoFromBrowser")
    }
  }

  public var ticketExpiresAfter: Swift.Optional<Int?> {
    get {
      return graphQLMap["ticketExpiresAfter"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ticketExpiresAfter")
    }
  }
}

public struct App2WxappLoginStrategyInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - ticketExpriresAfter
  ///   - ticketExchangeUserInfoNeedSecret
  public init(ticketExpriresAfter: Swift.Optional<Int?> = nil, ticketExchangeUserInfoNeedSecret: Swift.Optional<Bool?> = nil) {
    graphQLMap = ["ticketExpriresAfter": ticketExpriresAfter, "ticketExchangeUserInfoNeedSecret": ticketExchangeUserInfoNeedSecret]
  }

  public var ticketExpriresAfter: Swift.Optional<Int?> {
    get {
      return graphQLMap["ticketExpriresAfter"] as? Swift.Optional<Int?> ?? Swift.Optional<Int?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ticketExpriresAfter")
    }
  }

  public var ticketExchangeUserInfoNeedSecret: Swift.Optional<Bool?> {
    get {
      return graphQLMap["ticketExchangeUserInfoNeedSecret"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "ticketExchangeUserInfoNeedSecret")
    }
  }
}

public struct RegisterWhiteListConfigInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - phoneEnabled
  ///   - emailEnabled
  ///   - usernameEnabled
  public init(phoneEnabled: Swift.Optional<Bool?> = nil, emailEnabled: Swift.Optional<Bool?> = nil, usernameEnabled: Swift.Optional<Bool?> = nil) {
    graphQLMap = ["phoneEnabled": phoneEnabled, "emailEnabled": emailEnabled, "usernameEnabled": usernameEnabled]
  }

  public var phoneEnabled: Swift.Optional<Bool?> {
    get {
      return graphQLMap["phoneEnabled"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "phoneEnabled")
    }
  }

  public var emailEnabled: Swift.Optional<Bool?> {
    get {
      return graphQLMap["emailEnabled"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "emailEnabled")
    }
  }

  public var usernameEnabled: Swift.Optional<Bool?> {
    get {
      return graphQLMap["usernameEnabled"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "usernameEnabled")
    }
  }
}

public struct CustomSMSProviderInput: GraphQLMapConvertible {
  public var graphQLMap: GraphQLMap

  /// - Parameters:
  ///   - enabled
  ///   - provider
  ///   - config
  public init(enabled: Swift.Optional<Bool?> = nil, provider: Swift.Optional<String?> = nil, config: Swift.Optional<String?> = nil) {
    graphQLMap = ["enabled": enabled, "provider": provider, "config": config]
  }

  public var enabled: Swift.Optional<Bool?> {
    get {
      return graphQLMap["enabled"] as? Swift.Optional<Bool?> ?? Swift.Optional<Bool?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "enabled")
    }
  }

  public var provider: Swift.Optional<String?> {
    get {
      return graphQLMap["provider"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "provider")
    }
  }

  public var config: Swift.Optional<String?> {
    get {
      return graphQLMap["config"] as? Swift.Optional<String?> ?? Swift.Optional<String?>.none
    }
    set {
      graphQLMap.updateValue(newValue, forKey: "config")
    }
  }
}

public final class AccessTokenQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query accessToken($userPoolId: String!, $secret: String!) {
      accessToken(userPoolId: $userPoolId, secret: $secret) {
        __typename
        accessToken
        exp
        iat
      }
    }
    """

  public let operationName: String = "accessToken"

  public var userPoolId: String
  public var secret: String

  public init(userPoolId: String, secret: String) {
    self.userPoolId = userPoolId
    self.secret = secret
  }

  public var variables: GraphQLMap? {
    return ["userPoolId": userPoolId, "secret": secret]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("accessToken", arguments: ["userPoolId": GraphQLVariable("userPoolId"), "secret": GraphQLVariable("secret")], type: .nonNull(.object(AccessToken.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(accessToken: AccessToken) {
      self.init(unsafeResultMap: ["__typename": "Query", "accessToken": accessToken.resultMap])
    }

    /// 获取 accessToken ，如 SDK 初始化
    public var accessToken: AccessToken {
      get {
        return AccessToken(unsafeResultMap: resultMap["accessToken"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "accessToken")
      }
    }

    public struct AccessToken: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["AccessTokenRes"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("accessToken", type: .scalar(String.self)),
          GraphQLField("exp", type: .scalar(Int.self)),
          GraphQLField("iat", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(accessToken: String? = nil, exp: Int? = nil, iat: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "AccessTokenRes", "accessToken": accessToken, "exp": exp, "iat": iat])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var accessToken: String? {
        get {
          return resultMap["accessToken"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "accessToken")
        }
      }

      public var exp: Int? {
        get {
          return resultMap["exp"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "exp")
        }
      }

      public var iat: Int? {
        get {
          return resultMap["iat"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "iat")
        }
      }
    }
  }
}

public final class AddMemberMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation addMember($page: Int, $limit: Int, $sortBy: SortByEnum, $includeChildrenNodes: Boolean, $nodeId: String, $orgId: String, $nodeCode: String, $userIds: [String!]!, $isLeader: Boolean) {
      addMember(
        nodeId: $nodeId
        orgId: $orgId
        nodeCode: $nodeCode
        userIds: $userIds
        isLeader: $isLeader
      ) {
        __typename
        id
        orgId
        name
        nameI18n
        description
        descriptionI18n
        order
        code
        root
        depth
        path
        createdAt
        updatedAt
        children
        users(
          page: $page
          limit: $limit
          sortBy: $sortBy
          includeChildrenNodes: $includeChildrenNodes
        ) {
          __typename
          totalCount
          list {
            __typename
            id
            arn
            userPoolId
            username
            status
            email
            emailVerified
            phone
            phoneVerified
            unionid
            openid
            nickname
            registerSource
            photo
            password
            oauth
            token
            tokenExpiredAt
            loginsCount
            lastLogin
            lastIP
            signedUp
            blocked
            isDeleted
            device
            browser
            company
            name
            givenName
            familyName
            middleName
            profile
            preferredUsername
            website
            gender
            birthdate
            zoneinfo
            locale
            address
            formatted
            streetAddress
            locality
            region
            postalCode
            city
            province
            country
            createdAt
            updatedAt
            externalId
          }
        }
      }
    }
    """

  public let operationName: String = "addMember"

  public var page: Int?
  public var limit: Int?
  public var sortBy: SortByEnum?
  public var includeChildrenNodes: Bool?
  public var nodeId: String?
  public var orgId: String?
  public var nodeCode: String?
  public var userIds: [String]
  public var isLeader: Bool?

  public init(page: Int? = nil, limit: Int? = nil, sortBy: SortByEnum? = nil, includeChildrenNodes: Bool? = nil, nodeId: String? = nil, orgId: String? = nil, nodeCode: String? = nil, userIds: [String], isLeader: Bool? = nil) {
    self.page = page
    self.limit = limit
    self.sortBy = sortBy
    self.includeChildrenNodes = includeChildrenNodes
    self.nodeId = nodeId
    self.orgId = orgId
    self.nodeCode = nodeCode
    self.userIds = userIds
    self.isLeader = isLeader
  }

  public var variables: GraphQLMap? {
    return ["page": page, "limit": limit, "sortBy": sortBy, "includeChildrenNodes": includeChildrenNodes, "nodeId": nodeId, "orgId": orgId, "nodeCode": nodeCode, "userIds": userIds, "isLeader": isLeader]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("addMember", arguments: ["nodeId": GraphQLVariable("nodeId"), "orgId": GraphQLVariable("orgId"), "nodeCode": GraphQLVariable("nodeCode"), "userIds": GraphQLVariable("userIds"), "isLeader": GraphQLVariable("isLeader")], type: .nonNull(.object(AddMember.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(addMember: AddMember) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "addMember": addMember.resultMap])
    }

    /// （批量）将成员添加到节点中
    public var addMember: AddMember {
      get {
        return AddMember(unsafeResultMap: resultMap["addMember"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "addMember")
      }
    }

    public struct AddMember: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Node"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("orgId", type: .scalar(String.self)),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("nameI18n", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("descriptionI18n", type: .scalar(String.self)),
          GraphQLField("order", type: .scalar(Int.self)),
          GraphQLField("code", type: .scalar(String.self)),
          GraphQLField("root", type: .scalar(Bool.self)),
          GraphQLField("depth", type: .scalar(Int.self)),
          GraphQLField("path", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("children", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("users", arguments: ["page": GraphQLVariable("page"), "limit": GraphQLVariable("limit"), "sortBy": GraphQLVariable("sortBy"), "includeChildrenNodes": GraphQLVariable("includeChildrenNodes")], type: .nonNull(.object(User.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, orgId: String? = nil, name: String, nameI18n: String? = nil, description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil, root: Bool? = nil, depth: Int? = nil, path: [String], createdAt: String? = nil, updatedAt: String? = nil, children: [String]? = nil, users: User) {
        self.init(unsafeResultMap: ["__typename": "Node", "id": id, "orgId": orgId, "name": name, "nameI18n": nameI18n, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code, "root": root, "depth": depth, "path": path, "createdAt": createdAt, "updatedAt": updatedAt, "children": children, "users": users.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// 组织机构 ID
      public var orgId: String? {
        get {
          return resultMap["orgId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "orgId")
        }
      }

      /// 节点名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。
      public var nameI18n: String? {
        get {
          return resultMap["nameI18n"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nameI18n")
        }
      }

      /// 描述信息
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 多语言描述信息
      public var descriptionI18n: String? {
        get {
          return resultMap["descriptionI18n"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "descriptionI18n")
        }
      }

      /// 在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)
      public var order: Int? {
        get {
          return resultMap["order"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "order")
        }
      }

      /// 节点唯一标志码，可以通过 code 进行搜索
      public var code: String? {
        get {
          return resultMap["code"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      /// 是否为根节点
      public var root: Bool? {
        get {
          return resultMap["root"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "root")
        }
      }

      /// 距离父节点的深度（如果是查询整棵树，返回的 **depth** 为距离根节点的深度，如果是查询某个节点的子节点，返回的 **depth** 指的是距离该节点的深度。）
      public var depth: Int? {
        get {
          return resultMap["depth"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "depth")
        }
      }

      public var path: [String] {
        get {
          return resultMap["path"]! as! [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "path")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 该节点的子节点 **ID** 列表
      public var children: [String]? {
        get {
          return resultMap["children"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "children")
        }
      }

      /// 节点的用户列表
      public var users: User {
        get {
          return User(unsafeResultMap: resultMap["users"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "users")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PaginatedUsers"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
            GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(totalCount: Int, list: [List]) {
          self.init(unsafeResultMap: ["__typename": "PaginatedUsers", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var totalCount: Int {
          get {
            return resultMap["totalCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalCount")
          }
        }

        public var list: [List] {
          get {
            return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
          }
        }

        public struct List: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["User"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(String.self))),
              GraphQLField("arn", type: .nonNull(.scalar(String.self))),
              GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .scalar(String.self)),
              GraphQLField("status", type: .scalar(UserStatus.self)),
              GraphQLField("email", type: .scalar(String.self)),
              GraphQLField("emailVerified", type: .scalar(Bool.self)),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("phoneVerified", type: .scalar(Bool.self)),
              GraphQLField("unionid", type: .scalar(String.self)),
              GraphQLField("openid", type: .scalar(String.self)),
              GraphQLField("nickname", type: .scalar(String.self)),
              GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
              GraphQLField("photo", type: .scalar(String.self)),
              GraphQLField("password", type: .scalar(String.self)),
              GraphQLField("oauth", type: .scalar(String.self)),
              GraphQLField("token", type: .scalar(String.self)),
              GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
              GraphQLField("loginsCount", type: .scalar(Int.self)),
              GraphQLField("lastLogin", type: .scalar(String.self)),
              GraphQLField("lastIP", type: .scalar(String.self)),
              GraphQLField("signedUp", type: .scalar(String.self)),
              GraphQLField("blocked", type: .scalar(Bool.self)),
              GraphQLField("isDeleted", type: .scalar(Bool.self)),
              GraphQLField("device", type: .scalar(String.self)),
              GraphQLField("browser", type: .scalar(String.self)),
              GraphQLField("company", type: .scalar(String.self)),
              GraphQLField("name", type: .scalar(String.self)),
              GraphQLField("givenName", type: .scalar(String.self)),
              GraphQLField("familyName", type: .scalar(String.self)),
              GraphQLField("middleName", type: .scalar(String.self)),
              GraphQLField("profile", type: .scalar(String.self)),
              GraphQLField("preferredUsername", type: .scalar(String.self)),
              GraphQLField("website", type: .scalar(String.self)),
              GraphQLField("gender", type: .scalar(String.self)),
              GraphQLField("birthdate", type: .scalar(String.self)),
              GraphQLField("zoneinfo", type: .scalar(String.self)),
              GraphQLField("locale", type: .scalar(String.self)),
              GraphQLField("address", type: .scalar(String.self)),
              GraphQLField("formatted", type: .scalar(String.self)),
              GraphQLField("streetAddress", type: .scalar(String.self)),
              GraphQLField("locality", type: .scalar(String.self)),
              GraphQLField("region", type: .scalar(String.self)),
              GraphQLField("postalCode", type: .scalar(String.self)),
              GraphQLField("city", type: .scalar(String.self)),
              GraphQLField("province", type: .scalar(String.self)),
              GraphQLField("country", type: .scalar(String.self)),
              GraphQLField("createdAt", type: .scalar(String.self)),
              GraphQLField("updatedAt", type: .scalar(String.self)),
              GraphQLField("externalId", type: .scalar(String.self)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: String, arn: String, userPoolId: String, username: String? = nil, status: UserStatus? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "username": username, "status": status, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 用户 ID
          public var id: String {
            get {
              return resultMap["id"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          public var arn: String {
            get {
              return resultMap["arn"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "arn")
            }
          }

          /// 用户池 ID
          public var userPoolId: String {
            get {
              return resultMap["userPoolId"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "userPoolId")
            }
          }

          /// 用户名，用户池内唯一
          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }

          /// 用户在组织机构中的状态
          public var status: UserStatus? {
            get {
              return resultMap["status"] as? UserStatus
            }
            set {
              resultMap.updateValue(newValue, forKey: "status")
            }
          }

          /// 邮箱，用户池内唯一
          public var email: String? {
            get {
              return resultMap["email"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "email")
            }
          }

          /// 邮箱是否已验证
          public var emailVerified: Bool? {
            get {
              return resultMap["emailVerified"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "emailVerified")
            }
          }

          /// 手机号，用户池内唯一
          public var phone: String? {
            get {
              return resultMap["phone"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "phone")
            }
          }

          /// 手机号是否已验证
          public var phoneVerified: Bool? {
            get {
              return resultMap["phoneVerified"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "phoneVerified")
            }
          }

          public var unionid: String? {
            get {
              return resultMap["unionid"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "unionid")
            }
          }

          public var openid: String? {
            get {
              return resultMap["openid"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "openid")
            }
          }

          /// 昵称，该字段不唯一。
          public var nickname: String? {
            get {
              return resultMap["nickname"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "nickname")
            }
          }

          /// 注册方式
          public var registerSource: [String]? {
            get {
              return resultMap["registerSource"] as? [String]
            }
            set {
              resultMap.updateValue(newValue, forKey: "registerSource")
            }
          }

          /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
          public var photo: String? {
            get {
              return resultMap["photo"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "photo")
            }
          }

          /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
          public var password: String? {
            get {
              return resultMap["password"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "password")
            }
          }

          /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
          public var oauth: String? {
            get {
              return resultMap["oauth"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "oauth")
            }
          }

          /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
          public var token: String? {
            get {
              return resultMap["token"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "token")
            }
          }

          /// token 过期时间
          public var tokenExpiredAt: String? {
            get {
              return resultMap["tokenExpiredAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
            }
          }

          /// 用户登录总次数
          public var loginsCount: Int? {
            get {
              return resultMap["loginsCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "loginsCount")
            }
          }

          /// 用户最近一次登录时间
          public var lastLogin: String? {
            get {
              return resultMap["lastLogin"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastLogin")
            }
          }

          /// 用户上一次登录时使用的 IP
          public var lastIp: String? {
            get {
              return resultMap["lastIP"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastIP")
            }
          }

          /// 用户注册时间
          public var signedUp: String? {
            get {
              return resultMap["signedUp"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "signedUp")
            }
          }

          /// 该账号是否被禁用
          public var blocked: Bool? {
            get {
              return resultMap["blocked"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "blocked")
            }
          }

          /// 账号是否被软删除
          public var isDeleted: Bool? {
            get {
              return resultMap["isDeleted"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "isDeleted")
            }
          }

          public var device: String? {
            get {
              return resultMap["device"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "device")
            }
          }

          public var browser: String? {
            get {
              return resultMap["browser"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "browser")
            }
          }

          public var company: String? {
            get {
              return resultMap["company"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "company")
            }
          }

          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          public var givenName: String? {
            get {
              return resultMap["givenName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "givenName")
            }
          }

          public var familyName: String? {
            get {
              return resultMap["familyName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "familyName")
            }
          }

          public var middleName: String? {
            get {
              return resultMap["middleName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "middleName")
            }
          }

          public var profile: String? {
            get {
              return resultMap["profile"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "profile")
            }
          }

          public var preferredUsername: String? {
            get {
              return resultMap["preferredUsername"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "preferredUsername")
            }
          }

          public var website: String? {
            get {
              return resultMap["website"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "website")
            }
          }

          public var gender: String? {
            get {
              return resultMap["gender"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "gender")
            }
          }

          public var birthdate: String? {
            get {
              return resultMap["birthdate"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "birthdate")
            }
          }

          public var zoneinfo: String? {
            get {
              return resultMap["zoneinfo"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "zoneinfo")
            }
          }

          public var locale: String? {
            get {
              return resultMap["locale"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "locale")
            }
          }

          public var address: String? {
            get {
              return resultMap["address"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var formatted: String? {
            get {
              return resultMap["formatted"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "formatted")
            }
          }

          public var streetAddress: String? {
            get {
              return resultMap["streetAddress"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "streetAddress")
            }
          }

          public var locality: String? {
            get {
              return resultMap["locality"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "locality")
            }
          }

          public var region: String? {
            get {
              return resultMap["region"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "region")
            }
          }

          public var postalCode: String? {
            get {
              return resultMap["postalCode"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "postalCode")
            }
          }

          public var city: String? {
            get {
              return resultMap["city"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "city")
            }
          }

          public var province: String? {
            get {
              return resultMap["province"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "province")
            }
          }

          public var country: String? {
            get {
              return resultMap["country"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "country")
            }
          }

          public var createdAt: String? {
            get {
              return resultMap["createdAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String? {
            get {
              return resultMap["updatedAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "updatedAt")
            }
          }

          /// 用户外部 ID
          public var externalId: String? {
            get {
              return resultMap["externalId"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "externalId")
            }
          }
        }
      }
    }
  }
}

public final class AddNodeMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation addNode($orgId: String!, $parentNodeId: String, $name: String!, $nameI18n: String, $description: String, $descriptionI18n: String, $order: Int, $code: String) {
      addNode(
        orgId: $orgId
        parentNodeId: $parentNodeId
        name: $name
        nameI18n: $nameI18n
        description: $description
        descriptionI18n: $descriptionI18n
        order: $order
        code: $code
      ) {
        __typename
        id
        rootNode {
          __typename
          id
          orgId
          name
          nameI18n
          description
          descriptionI18n
          order
          code
          root
          depth
          path
          createdAt
          updatedAt
          children
        }
        nodes {
          __typename
          id
          orgId
          name
          nameI18n
          description
          descriptionI18n
          order
          code
          root
          depth
          path
          createdAt
          updatedAt
          children
        }
      }
    }
    """

  public let operationName: String = "addNode"

  public var orgId: String
  public var parentNodeId: String?
  public var name: String
  public var nameI18n: String?
  public var description: String?
  public var descriptionI18n: String?
  public var order: Int?
  public var code: String?

  public init(orgId: String, parentNodeId: String? = nil, name: String, nameI18n: String? = nil, description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil) {
    self.orgId = orgId
    self.parentNodeId = parentNodeId
    self.name = name
    self.nameI18n = nameI18n
    self.description = description
    self.descriptionI18n = descriptionI18n
    self.order = order
    self.code = code
  }

  public var variables: GraphQLMap? {
    return ["orgId": orgId, "parentNodeId": parentNodeId, "name": name, "nameI18n": nameI18n, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("addNode", arguments: ["orgId": GraphQLVariable("orgId"), "parentNodeId": GraphQLVariable("parentNodeId"), "name": GraphQLVariable("name"), "nameI18n": GraphQLVariable("nameI18n"), "description": GraphQLVariable("description"), "descriptionI18n": GraphQLVariable("descriptionI18n"), "order": GraphQLVariable("order"), "code": GraphQLVariable("code")], type: .nonNull(.object(AddNode.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(addNode: AddNode) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "addNode": addNode.resultMap])
    }

    /// 添加子节点
    public var addNode: AddNode {
      get {
        return AddNode(unsafeResultMap: resultMap["addNode"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "addNode")
      }
    }

    public struct AddNode: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Org"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("rootNode", type: .nonNull(.object(RootNode.selections))),
          GraphQLField("nodes", type: .nonNull(.list(.nonNull(.object(Node.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, rootNode: RootNode, nodes: [Node]) {
        self.init(unsafeResultMap: ["__typename": "Org", "id": id, "rootNode": rootNode.resultMap, "nodes": nodes.map { (value: Node) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 组织机构 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// 根节点
      public var rootNode: RootNode {
        get {
          return RootNode(unsafeResultMap: resultMap["rootNode"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "rootNode")
        }
      }

      /// 组织机构节点列表
      public var nodes: [Node] {
        get {
          return (resultMap["nodes"] as! [ResultMap]).map { (value: ResultMap) -> Node in Node(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Node) -> ResultMap in value.resultMap }, forKey: "nodes")
        }
      }

      public struct RootNode: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Node"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(String.self))),
            GraphQLField("orgId", type: .scalar(String.self)),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("nameI18n", type: .scalar(String.self)),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("descriptionI18n", type: .scalar(String.self)),
            GraphQLField("order", type: .scalar(Int.self)),
            GraphQLField("code", type: .scalar(String.self)),
            GraphQLField("root", type: .scalar(Bool.self)),
            GraphQLField("depth", type: .scalar(Int.self)),
            GraphQLField("path", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
            GraphQLField("createdAt", type: .scalar(String.self)),
            GraphQLField("updatedAt", type: .scalar(String.self)),
            GraphQLField("children", type: .list(.nonNull(.scalar(String.self)))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String, orgId: String? = nil, name: String, nameI18n: String? = nil, description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil, root: Bool? = nil, depth: Int? = nil, path: [String], createdAt: String? = nil, updatedAt: String? = nil, children: [String]? = nil) {
          self.init(unsafeResultMap: ["__typename": "Node", "id": id, "orgId": orgId, "name": name, "nameI18n": nameI18n, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code, "root": root, "depth": depth, "path": path, "createdAt": createdAt, "updatedAt": updatedAt, "children": children])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String {
          get {
            return resultMap["id"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        /// 组织机构 ID
        public var orgId: String? {
          get {
            return resultMap["orgId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "orgId")
          }
        }

        /// 节点名称
        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。
        public var nameI18n: String? {
          get {
            return resultMap["nameI18n"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "nameI18n")
          }
        }

        /// 描述信息
        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 多语言描述信息
        public var descriptionI18n: String? {
          get {
            return resultMap["descriptionI18n"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "descriptionI18n")
          }
        }

        /// 在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)
        public var order: Int? {
          get {
            return resultMap["order"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "order")
          }
        }

        /// 节点唯一标志码，可以通过 code 进行搜索
        public var code: String? {
          get {
            return resultMap["code"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "code")
          }
        }

        /// 是否为根节点
        public var root: Bool? {
          get {
            return resultMap["root"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "root")
          }
        }

        /// 距离父节点的深度（如果是查询整棵树，返回的 **depth** 为距离根节点的深度，如果是查询某个节点的子节点，返回的 **depth** 指的是距离该节点的深度。）
        public var depth: Int? {
          get {
            return resultMap["depth"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "depth")
          }
        }

        public var path: [String] {
          get {
            return resultMap["path"]! as! [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "path")
          }
        }

        public var createdAt: String? {
          get {
            return resultMap["createdAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String? {
          get {
            return resultMap["updatedAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        /// 该节点的子节点 **ID** 列表
        public var children: [String]? {
          get {
            return resultMap["children"] as? [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "children")
          }
        }
      }

      public struct Node: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Node"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(String.self))),
            GraphQLField("orgId", type: .scalar(String.self)),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("nameI18n", type: .scalar(String.self)),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("descriptionI18n", type: .scalar(String.self)),
            GraphQLField("order", type: .scalar(Int.self)),
            GraphQLField("code", type: .scalar(String.self)),
            GraphQLField("root", type: .scalar(Bool.self)),
            GraphQLField("depth", type: .scalar(Int.self)),
            GraphQLField("path", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
            GraphQLField("createdAt", type: .scalar(String.self)),
            GraphQLField("updatedAt", type: .scalar(String.self)),
            GraphQLField("children", type: .list(.nonNull(.scalar(String.self)))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String, orgId: String? = nil, name: String, nameI18n: String? = nil, description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil, root: Bool? = nil, depth: Int? = nil, path: [String], createdAt: String? = nil, updatedAt: String? = nil, children: [String]? = nil) {
          self.init(unsafeResultMap: ["__typename": "Node", "id": id, "orgId": orgId, "name": name, "nameI18n": nameI18n, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code, "root": root, "depth": depth, "path": path, "createdAt": createdAt, "updatedAt": updatedAt, "children": children])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String {
          get {
            return resultMap["id"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        /// 组织机构 ID
        public var orgId: String? {
          get {
            return resultMap["orgId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "orgId")
          }
        }

        /// 节点名称
        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。
        public var nameI18n: String? {
          get {
            return resultMap["nameI18n"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "nameI18n")
          }
        }

        /// 描述信息
        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 多语言描述信息
        public var descriptionI18n: String? {
          get {
            return resultMap["descriptionI18n"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "descriptionI18n")
          }
        }

        /// 在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)
        public var order: Int? {
          get {
            return resultMap["order"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "order")
          }
        }

        /// 节点唯一标志码，可以通过 code 进行搜索
        public var code: String? {
          get {
            return resultMap["code"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "code")
          }
        }

        /// 是否为根节点
        public var root: Bool? {
          get {
            return resultMap["root"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "root")
          }
        }

        /// 距离父节点的深度（如果是查询整棵树，返回的 **depth** 为距离根节点的深度，如果是查询某个节点的子节点，返回的 **depth** 指的是距离该节点的深度。）
        public var depth: Int? {
          get {
            return resultMap["depth"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "depth")
          }
        }

        public var path: [String] {
          get {
            return resultMap["path"]! as! [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "path")
          }
        }

        public var createdAt: String? {
          get {
            return resultMap["createdAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String? {
          get {
            return resultMap["updatedAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        /// 该节点的子节点 **ID** 列表
        public var children: [String]? {
          get {
            return resultMap["children"] as? [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "children")
          }
        }
      }
    }
  }
}

public final class AddNodeV2Mutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation addNodeV2($orgId: String!, $parentNodeId: String, $name: String!, $nameI18n: String, $description: String, $descriptionI18n: String, $order: Int, $code: String) {
      addNodeV2(
        orgId: $orgId
        parentNodeId: $parentNodeId
        name: $name
        nameI18n: $nameI18n
        description: $description
        descriptionI18n: $descriptionI18n
        order: $order
        code: $code
      ) {
        __typename
        id
        orgId
        name
        nameI18n
        description
        descriptionI18n
        order
        code
        root
        depth
        path
        createdAt
        updatedAt
        children
      }
    }
    """

  public let operationName: String = "addNodeV2"

  public var orgId: String
  public var parentNodeId: String?
  public var name: String
  public var nameI18n: String?
  public var description: String?
  public var descriptionI18n: String?
  public var order: Int?
  public var code: String?

  public init(orgId: String, parentNodeId: String? = nil, name: String, nameI18n: String? = nil, description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil) {
    self.orgId = orgId
    self.parentNodeId = parentNodeId
    self.name = name
    self.nameI18n = nameI18n
    self.description = description
    self.descriptionI18n = descriptionI18n
    self.order = order
    self.code = code
  }

  public var variables: GraphQLMap? {
    return ["orgId": orgId, "parentNodeId": parentNodeId, "name": name, "nameI18n": nameI18n, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("addNodeV2", arguments: ["orgId": GraphQLVariable("orgId"), "parentNodeId": GraphQLVariable("parentNodeId"), "name": GraphQLVariable("name"), "nameI18n": GraphQLVariable("nameI18n"), "description": GraphQLVariable("description"), "descriptionI18n": GraphQLVariable("descriptionI18n"), "order": GraphQLVariable("order"), "code": GraphQLVariable("code")], type: .nonNull(.object(AddNodeV2.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(addNodeV2: AddNodeV2) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "addNodeV2": addNodeV2.resultMap])
    }

    /// 添加子节点
    public var addNodeV2: AddNodeV2 {
      get {
        return AddNodeV2(unsafeResultMap: resultMap["addNodeV2"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "addNodeV2")
      }
    }

    public struct AddNodeV2: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Node"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("orgId", type: .scalar(String.self)),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("nameI18n", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("descriptionI18n", type: .scalar(String.self)),
          GraphQLField("order", type: .scalar(Int.self)),
          GraphQLField("code", type: .scalar(String.self)),
          GraphQLField("root", type: .scalar(Bool.self)),
          GraphQLField("depth", type: .scalar(Int.self)),
          GraphQLField("path", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("children", type: .list(.nonNull(.scalar(String.self)))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, orgId: String? = nil, name: String, nameI18n: String? = nil, description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil, root: Bool? = nil, depth: Int? = nil, path: [String], createdAt: String? = nil, updatedAt: String? = nil, children: [String]? = nil) {
        self.init(unsafeResultMap: ["__typename": "Node", "id": id, "orgId": orgId, "name": name, "nameI18n": nameI18n, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code, "root": root, "depth": depth, "path": path, "createdAt": createdAt, "updatedAt": updatedAt, "children": children])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// 组织机构 ID
      public var orgId: String? {
        get {
          return resultMap["orgId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "orgId")
        }
      }

      /// 节点名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。
      public var nameI18n: String? {
        get {
          return resultMap["nameI18n"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nameI18n")
        }
      }

      /// 描述信息
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 多语言描述信息
      public var descriptionI18n: String? {
        get {
          return resultMap["descriptionI18n"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "descriptionI18n")
        }
      }

      /// 在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)
      public var order: Int? {
        get {
          return resultMap["order"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "order")
        }
      }

      /// 节点唯一标志码，可以通过 code 进行搜索
      public var code: String? {
        get {
          return resultMap["code"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      /// 是否为根节点
      public var root: Bool? {
        get {
          return resultMap["root"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "root")
        }
      }

      /// 距离父节点的深度（如果是查询整棵树，返回的 **depth** 为距离根节点的深度，如果是查询某个节点的子节点，返回的 **depth** 指的是距离该节点的深度。）
      public var depth: Int? {
        get {
          return resultMap["depth"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "depth")
        }
      }

      public var path: [String] {
        get {
          return resultMap["path"]! as! [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "path")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 该节点的子节点 **ID** 列表
      public var children: [String]? {
        get {
          return resultMap["children"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "children")
        }
      }
    }
  }
}

public final class AddPolicyAssignmentsMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation addPolicyAssignments($policies: [String!]!, $targetType: PolicyAssignmentTargetType!, $targetIdentifiers: [String!], $inheritByChildren: Boolean, $namespace: String) {
      addPolicyAssignments(
        policies: $policies
        targetType: $targetType
        targetIdentifiers: $targetIdentifiers
        inheritByChildren: $inheritByChildren
        namespace: $namespace
      ) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "addPolicyAssignments"

  public var policies: [String]
  public var targetType: PolicyAssignmentTargetType
  public var targetIdentifiers: [String]?
  public var inheritByChildren: Bool?
  public var namespace: String?

  public init(policies: [String], targetType: PolicyAssignmentTargetType, targetIdentifiers: [String]?, inheritByChildren: Bool? = nil, namespace: String? = nil) {
    self.policies = policies
    self.targetType = targetType
    self.targetIdentifiers = targetIdentifiers
    self.inheritByChildren = inheritByChildren
    self.namespace = namespace
  }

  public var variables: GraphQLMap? {
    return ["policies": policies, "targetType": targetType, "targetIdentifiers": targetIdentifiers, "inheritByChildren": inheritByChildren, "namespace": namespace]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("addPolicyAssignments", arguments: ["policies": GraphQLVariable("policies"), "targetType": GraphQLVariable("targetType"), "targetIdentifiers": GraphQLVariable("targetIdentifiers"), "inheritByChildren": GraphQLVariable("inheritByChildren"), "namespace": GraphQLVariable("namespace")], type: .nonNull(.object(AddPolicyAssignment.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(addPolicyAssignments: AddPolicyAssignment) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "addPolicyAssignments": addPolicyAssignments.resultMap])
    }

    public var addPolicyAssignments: AddPolicyAssignment {
      get {
        return AddPolicyAssignment(unsafeResultMap: resultMap["addPolicyAssignments"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "addPolicyAssignments")
      }
    }

    public struct AddPolicyAssignment: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class AddUserToGroupMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation addUserToGroup($userIds: [String!]!, $code: String) {
      addUserToGroup(userIds: $userIds, code: $code) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "addUserToGroup"

  public var userIds: [String]
  public var code: String?

  public init(userIds: [String], code: String? = nil) {
    self.userIds = userIds
    self.code = code
  }

  public var variables: GraphQLMap? {
    return ["userIds": userIds, "code": code]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("addUserToGroup", arguments: ["userIds": GraphQLVariable("userIds"), "code": GraphQLVariable("code")], type: .nonNull(.object(AddUserToGroup.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(addUserToGroup: AddUserToGroup) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "addUserToGroup": addUserToGroup.resultMap])
    }

    public var addUserToGroup: AddUserToGroup {
      get {
        return AddUserToGroup(unsafeResultMap: resultMap["addUserToGroup"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "addUserToGroup")
      }
    }

    public struct AddUserToGroup: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class AddWhitelistMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation addWhitelist($type: WhitelistType!, $list: [String!]!) {
      addWhitelist(type: $type, list: $list) {
        __typename
        createdAt
        updatedAt
        value
      }
    }
    """

  public let operationName: String = "addWhitelist"

  public var type: WhitelistType
  public var list: [String]

  public init(type: WhitelistType, list: [String]) {
    self.type = type
    self.list = list
  }

  public var variables: GraphQLMap? {
    return ["type": type, "list": list]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("addWhitelist", arguments: ["type": GraphQLVariable("type"), "list": GraphQLVariable("list")], type: .nonNull(.list(.object(AddWhitelist.selections)))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(addWhitelist: [AddWhitelist?]) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "addWhitelist": addWhitelist.map { (value: AddWhitelist?) -> ResultMap? in value.flatMap { (value: AddWhitelist) -> ResultMap in value.resultMap } }])
    }

    public var addWhitelist: [AddWhitelist?] {
      get {
        return (resultMap["addWhitelist"] as! [ResultMap?]).map { (value: ResultMap?) -> AddWhitelist? in value.flatMap { (value: ResultMap) -> AddWhitelist in AddWhitelist(unsafeResultMap: value) } }
      }
      set {
        resultMap.updateValue(newValue.map { (value: AddWhitelist?) -> ResultMap? in value.flatMap { (value: AddWhitelist) -> ResultMap in value.resultMap } }, forKey: "addWhitelist")
      }
    }

    public struct AddWhitelist: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["WhiteList"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("value", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(createdAt: String? = nil, updatedAt: String? = nil, value: String) {
        self.init(unsafeResultMap: ["__typename": "WhiteList", "createdAt": createdAt, "updatedAt": updatedAt, "value": value])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var value: String {
        get {
          return resultMap["value"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "value")
        }
      }
    }
  }
}

public final class AllowMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation allow($resource: String!, $action: String!, $userId: String, $userIds: [String!], $roleCode: String, $roleCodes: [String!], $namespace: String) {
      allow(
        resource: $resource
        action: $action
        userId: $userId
        userIds: $userIds
        roleCode: $roleCode
        roleCodes: $roleCodes
        namespace: $namespace
      ) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "allow"

  public var resource: String
  public var action: String
  public var userId: String?
  public var userIds: [String]?
  public var roleCode: String?
  public var roleCodes: [String]?
  public var namespace: String?

  public init(resource: String, action: String, userId: String? = nil, userIds: [String]?, roleCode: String? = nil, roleCodes: [String]?, namespace: String? = nil) {
    self.resource = resource
    self.action = action
    self.userId = userId
    self.userIds = userIds
    self.roleCode = roleCode
    self.roleCodes = roleCodes
    self.namespace = namespace
  }

  public var variables: GraphQLMap? {
    return ["resource": resource, "action": action, "userId": userId, "userIds": userIds, "roleCode": roleCode, "roleCodes": roleCodes, "namespace": namespace]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("allow", arguments: ["resource": GraphQLVariable("resource"), "action": GraphQLVariable("action"), "userId": GraphQLVariable("userId"), "userIds": GraphQLVariable("userIds"), "roleCode": GraphQLVariable("roleCode"), "roleCodes": GraphQLVariable("roleCodes"), "namespace": GraphQLVariable("namespace")], type: .nonNull(.object(Allow.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(allow: Allow) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "allow": allow.resultMap])
    }

    /// 允许操作某个资源
    public var allow: Allow {
      get {
        return Allow(unsafeResultMap: resultMap["allow"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "allow")
      }
    }

    public struct Allow: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class ArchivedUsersQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query archivedUsers($page: Int, $limit: Int) {
      archivedUsers(page: $page, limit: $limit) {
        __typename
        totalCount
        list {
          __typename
          id
          arn
          status
          userPoolId
          username
          email
          emailVerified
          phone
          phoneVerified
          unionid
          openid
          nickname
          registerSource
          photo
          password
          oauth
          token
          tokenExpiredAt
          loginsCount
          lastLogin
          lastIP
          signedUp
          blocked
          isDeleted
          device
          browser
          company
          name
          givenName
          familyName
          middleName
          profile
          preferredUsername
          website
          gender
          birthdate
          zoneinfo
          locale
          address
          formatted
          streetAddress
          locality
          region
          postalCode
          city
          province
          country
          createdAt
          updatedAt
          externalId
        }
      }
    }
    """

  public let operationName: String = "archivedUsers"

  public var page: Int?
  public var limit: Int?

  public init(page: Int? = nil, limit: Int? = nil) {
    self.page = page
    self.limit = limit
  }

  public var variables: GraphQLMap? {
    return ["page": page, "limit": limit]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("archivedUsers", arguments: ["page": GraphQLVariable("page"), "limit": GraphQLVariable("limit")], type: .nonNull(.object(ArchivedUser.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(archivedUsers: ArchivedUser) {
      self.init(unsafeResultMap: ["__typename": "Query", "archivedUsers": archivedUsers.resultMap])
    }

    /// 已归档的用户列表
    public var archivedUsers: ArchivedUser {
      get {
        return ArchivedUser(unsafeResultMap: resultMap["archivedUsers"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "archivedUsers")
      }
    }

    public struct ArchivedUser: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PaginatedUsers"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
          GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(totalCount: Int, list: [List]) {
        self.init(unsafeResultMap: ["__typename": "PaginatedUsers", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var totalCount: Int {
        get {
          return resultMap["totalCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "totalCount")
        }
      }

      public var list: [List] {
        get {
          return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
        }
      }

      public struct List: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["User"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(String.self))),
            GraphQLField("arn", type: .nonNull(.scalar(String.self))),
            GraphQLField("status", type: .scalar(UserStatus.self)),
            GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
            GraphQLField("username", type: .scalar(String.self)),
            GraphQLField("email", type: .scalar(String.self)),
            GraphQLField("emailVerified", type: .scalar(Bool.self)),
            GraphQLField("phone", type: .scalar(String.self)),
            GraphQLField("phoneVerified", type: .scalar(Bool.self)),
            GraphQLField("unionid", type: .scalar(String.self)),
            GraphQLField("openid", type: .scalar(String.self)),
            GraphQLField("nickname", type: .scalar(String.self)),
            GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
            GraphQLField("photo", type: .scalar(String.self)),
            GraphQLField("password", type: .scalar(String.self)),
            GraphQLField("oauth", type: .scalar(String.self)),
            GraphQLField("token", type: .scalar(String.self)),
            GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
            GraphQLField("loginsCount", type: .scalar(Int.self)),
            GraphQLField("lastLogin", type: .scalar(String.self)),
            GraphQLField("lastIP", type: .scalar(String.self)),
            GraphQLField("signedUp", type: .scalar(String.self)),
            GraphQLField("blocked", type: .scalar(Bool.self)),
            GraphQLField("isDeleted", type: .scalar(Bool.self)),
            GraphQLField("device", type: .scalar(String.self)),
            GraphQLField("browser", type: .scalar(String.self)),
            GraphQLField("company", type: .scalar(String.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("givenName", type: .scalar(String.self)),
            GraphQLField("familyName", type: .scalar(String.self)),
            GraphQLField("middleName", type: .scalar(String.self)),
            GraphQLField("profile", type: .scalar(String.self)),
            GraphQLField("preferredUsername", type: .scalar(String.self)),
            GraphQLField("website", type: .scalar(String.self)),
            GraphQLField("gender", type: .scalar(String.self)),
            GraphQLField("birthdate", type: .scalar(String.self)),
            GraphQLField("zoneinfo", type: .scalar(String.self)),
            GraphQLField("locale", type: .scalar(String.self)),
            GraphQLField("address", type: .scalar(String.self)),
            GraphQLField("formatted", type: .scalar(String.self)),
            GraphQLField("streetAddress", type: .scalar(String.self)),
            GraphQLField("locality", type: .scalar(String.self)),
            GraphQLField("region", type: .scalar(String.self)),
            GraphQLField("postalCode", type: .scalar(String.self)),
            GraphQLField("city", type: .scalar(String.self)),
            GraphQLField("province", type: .scalar(String.self)),
            GraphQLField("country", type: .scalar(String.self)),
            GraphQLField("createdAt", type: .scalar(String.self)),
            GraphQLField("updatedAt", type: .scalar(String.self)),
            GraphQLField("externalId", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String, arn: String, status: UserStatus? = nil, userPoolId: String, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "status": status, "userPoolId": userPoolId, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 用户 ID
        public var id: String {
          get {
            return resultMap["id"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var arn: String {
          get {
            return resultMap["arn"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "arn")
          }
        }

        /// 用户在组织机构中的状态
        public var status: UserStatus? {
          get {
            return resultMap["status"] as? UserStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// 用户池 ID
        public var userPoolId: String {
          get {
            return resultMap["userPoolId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "userPoolId")
          }
        }

        /// 用户名，用户池内唯一
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// 邮箱，用户池内唯一
        public var email: String? {
          get {
            return resultMap["email"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "email")
          }
        }

        /// 邮箱是否已验证
        public var emailVerified: Bool? {
          get {
            return resultMap["emailVerified"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "emailVerified")
          }
        }

        /// 手机号，用户池内唯一
        public var phone: String? {
          get {
            return resultMap["phone"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "phone")
          }
        }

        /// 手机号是否已验证
        public var phoneVerified: Bool? {
          get {
            return resultMap["phoneVerified"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "phoneVerified")
          }
        }

        public var unionid: String? {
          get {
            return resultMap["unionid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "unionid")
          }
        }

        public var openid: String? {
          get {
            return resultMap["openid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "openid")
          }
        }

        /// 昵称，该字段不唯一。
        public var nickname: String? {
          get {
            return resultMap["nickname"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "nickname")
          }
        }

        /// 注册方式
        public var registerSource: [String]? {
          get {
            return resultMap["registerSource"] as? [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "registerSource")
          }
        }

        /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
        public var photo: String? {
          get {
            return resultMap["photo"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "photo")
          }
        }

        /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
        public var password: String? {
          get {
            return resultMap["password"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "password")
          }
        }

        /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
        public var oauth: String? {
          get {
            return resultMap["oauth"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "oauth")
          }
        }

        /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
        public var token: String? {
          get {
            return resultMap["token"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "token")
          }
        }

        /// token 过期时间
        public var tokenExpiredAt: String? {
          get {
            return resultMap["tokenExpiredAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
          }
        }

        /// 用户登录总次数
        public var loginsCount: Int? {
          get {
            return resultMap["loginsCount"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "loginsCount")
          }
        }

        /// 用户最近一次登录时间
        public var lastLogin: String? {
          get {
            return resultMap["lastLogin"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "lastLogin")
          }
        }

        /// 用户上一次登录时使用的 IP
        public var lastIp: String? {
          get {
            return resultMap["lastIP"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "lastIP")
          }
        }

        /// 用户注册时间
        public var signedUp: String? {
          get {
            return resultMap["signedUp"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "signedUp")
          }
        }

        /// 该账号是否被禁用
        public var blocked: Bool? {
          get {
            return resultMap["blocked"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "blocked")
          }
        }

        /// 账号是否被软删除
        public var isDeleted: Bool? {
          get {
            return resultMap["isDeleted"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isDeleted")
          }
        }

        public var device: String? {
          get {
            return resultMap["device"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "device")
          }
        }

        public var browser: String? {
          get {
            return resultMap["browser"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "browser")
          }
        }

        public var company: String? {
          get {
            return resultMap["company"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "company")
          }
        }

        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        public var givenName: String? {
          get {
            return resultMap["givenName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "givenName")
          }
        }

        public var familyName: String? {
          get {
            return resultMap["familyName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "familyName")
          }
        }

        public var middleName: String? {
          get {
            return resultMap["middleName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "middleName")
          }
        }

        public var profile: String? {
          get {
            return resultMap["profile"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "profile")
          }
        }

        public var preferredUsername: String? {
          get {
            return resultMap["preferredUsername"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "preferredUsername")
          }
        }

        public var website: String? {
          get {
            return resultMap["website"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "website")
          }
        }

        public var gender: String? {
          get {
            return resultMap["gender"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "gender")
          }
        }

        public var birthdate: String? {
          get {
            return resultMap["birthdate"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "birthdate")
          }
        }

        public var zoneinfo: String? {
          get {
            return resultMap["zoneinfo"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "zoneinfo")
          }
        }

        public var locale: String? {
          get {
            return resultMap["locale"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "locale")
          }
        }

        public var address: String? {
          get {
            return resultMap["address"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "address")
          }
        }

        public var formatted: String? {
          get {
            return resultMap["formatted"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "formatted")
          }
        }

        public var streetAddress: String? {
          get {
            return resultMap["streetAddress"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "streetAddress")
          }
        }

        public var locality: String? {
          get {
            return resultMap["locality"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "locality")
          }
        }

        public var region: String? {
          get {
            return resultMap["region"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "region")
          }
        }

        public var postalCode: String? {
          get {
            return resultMap["postalCode"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "postalCode")
          }
        }

        public var city: String? {
          get {
            return resultMap["city"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "city")
          }
        }

        public var province: String? {
          get {
            return resultMap["province"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "province")
          }
        }

        public var country: String? {
          get {
            return resultMap["country"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "country")
          }
        }

        public var createdAt: String? {
          get {
            return resultMap["createdAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String? {
          get {
            return resultMap["updatedAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        /// 用户外部 ID
        public var externalId: String? {
          get {
            return resultMap["externalId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "externalId")
          }
        }
      }
    }
  }
}

public final class AssignRoleMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation assignRole($namespace: String, $roleCode: String, $roleCodes: [String], $userIds: [String!], $groupCodes: [String!], $nodeCodes: [String!]) {
      assignRole(
        namespace: $namespace
        roleCode: $roleCode
        roleCodes: $roleCodes
        userIds: $userIds
        groupCodes: $groupCodes
        nodeCodes: $nodeCodes
      ) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "assignRole"

  public var namespace: String?
  public var roleCode: String?
  public var roleCodes: [String?]?
  public var userIds: [String]?
  public var groupCodes: [String]?
  public var nodeCodes: [String]?

  public init(namespace: String? = nil, roleCode: String? = nil, roleCodes: [String?]? = nil, userIds: [String]?, groupCodes: [String]?, nodeCodes: [String]?) {
    self.namespace = namespace
    self.roleCode = roleCode
    self.roleCodes = roleCodes
    self.userIds = userIds
    self.groupCodes = groupCodes
    self.nodeCodes = nodeCodes
  }

  public var variables: GraphQLMap? {
    return ["namespace": namespace, "roleCode": roleCode, "roleCodes": roleCodes, "userIds": userIds, "groupCodes": groupCodes, "nodeCodes": nodeCodes]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("assignRole", arguments: ["namespace": GraphQLVariable("namespace"), "roleCode": GraphQLVariable("roleCode"), "roleCodes": GraphQLVariable("roleCodes"), "userIds": GraphQLVariable("userIds"), "groupCodes": GraphQLVariable("groupCodes"), "nodeCodes": GraphQLVariable("nodeCodes")], type: .object(AssignRole.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(assignRole: AssignRole? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "assignRole": assignRole.flatMap { (value: AssignRole) -> ResultMap in value.resultMap }])
    }

    /// 给用户授权角色
    public var assignRole: AssignRole? {
      get {
        return (resultMap["assignRole"] as? ResultMap).flatMap { AssignRole(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "assignRole")
      }
    }

    public struct AssignRole: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class AuthorizedTargetsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query authorizedTargets($namespace: String!, $resourceType: ResourceType!, $resource: String!, $targetType: PolicyAssignmentTargetType, $actions: AuthorizedTargetsActionsInput) {
      authorizedTargets(
        namespace: $namespace
        resource: $resource
        resourceType: $resourceType
        targetType: $targetType
        actions: $actions
      ) {
        __typename
        totalCount
        list {
          __typename
          targetType
          targetIdentifier
          actions
        }
      }
    }
    """

  public let operationName: String = "authorizedTargets"

  public var namespace: String
  public var resourceType: ResourceType
  public var resource: String
  public var targetType: PolicyAssignmentTargetType?
  public var actions: AuthorizedTargetsActionsInput?

  public init(namespace: String, resourceType: ResourceType, resource: String, targetType: PolicyAssignmentTargetType? = nil, actions: AuthorizedTargetsActionsInput? = nil) {
    self.namespace = namespace
    self.resourceType = resourceType
    self.resource = resource
    self.targetType = targetType
    self.actions = actions
  }

  public var variables: GraphQLMap? {
    return ["namespace": namespace, "resourceType": resourceType, "resource": resource, "targetType": targetType, "actions": actions]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("authorizedTargets", arguments: ["namespace": GraphQLVariable("namespace"), "resource": GraphQLVariable("resource"), "resourceType": GraphQLVariable("resourceType"), "targetType": GraphQLVariable("targetType"), "actions": GraphQLVariable("actions")], type: .object(AuthorizedTarget.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(authorizedTargets: AuthorizedTarget? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "authorizedTargets": authorizedTargets.flatMap { (value: AuthorizedTarget) -> ResultMap in value.resultMap }])
    }

    public var authorizedTargets: AuthorizedTarget? {
      get {
        return (resultMap["authorizedTargets"] as? ResultMap).flatMap { AuthorizedTarget(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "authorizedTargets")
      }
    }

    public struct AuthorizedTarget: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PaginatedAuthorizedTargets"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("totalCount", type: .scalar(Int.self)),
          GraphQLField("list", type: .list(.object(List.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(totalCount: Int? = nil, list: [List?]? = nil) {
        self.init(unsafeResultMap: ["__typename": "PaginatedAuthorizedTargets", "totalCount": totalCount, "list": list.flatMap { (value: [List?]) -> [ResultMap?] in value.map { (value: List?) -> ResultMap? in value.flatMap { (value: List) -> ResultMap in value.resultMap } } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var totalCount: Int? {
        get {
          return resultMap["totalCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "totalCount")
        }
      }

      public var list: [List?]? {
        get {
          return (resultMap["list"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [List?] in value.map { (value: ResultMap?) -> List? in value.flatMap { (value: ResultMap) -> List in List(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [List?]) -> [ResultMap?] in value.map { (value: List?) -> ResultMap? in value.flatMap { (value: List) -> ResultMap in value.resultMap } } }, forKey: "list")
        }
      }

      public struct List: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["ResourcePermissionAssignment"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("targetType", type: .scalar(PolicyAssignmentTargetType.self)),
            GraphQLField("targetIdentifier", type: .scalar(String.self)),
            GraphQLField("actions", type: .list(.nonNull(.scalar(String.self)))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(targetType: PolicyAssignmentTargetType? = nil, targetIdentifier: String? = nil, actions: [String]? = nil) {
          self.init(unsafeResultMap: ["__typename": "ResourcePermissionAssignment", "targetType": targetType, "targetIdentifier": targetIdentifier, "actions": actions])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var targetType: PolicyAssignmentTargetType? {
          get {
            return resultMap["targetType"] as? PolicyAssignmentTargetType
          }
          set {
            resultMap.updateValue(newValue, forKey: "targetType")
          }
        }

        public var targetIdentifier: String? {
          get {
            return resultMap["targetIdentifier"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "targetIdentifier")
          }
        }

        public var actions: [String]? {
          get {
            return resultMap["actions"] as? [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "actions")
          }
        }
      }
    }
  }
}

public final class AuthorizeResourceMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation authorizeResource($namespace: String, $resource: String, $resourceType: ResourceType, $opts: [AuthorizeResourceOpt]) {
      authorizeResource(
        namespace: $namespace
        resource: $resource
        resourceType: $resourceType
        opts: $opts
      ) {
        __typename
        code
        message
      }
    }
    """

  public let operationName: String = "authorizeResource"

  public var namespace: String?
  public var resource: String?
  public var resourceType: ResourceType?
  public var opts: [AuthorizeResourceOpt?]?

  public init(namespace: String? = nil, resource: String? = nil, resourceType: ResourceType? = nil, opts: [AuthorizeResourceOpt?]? = nil) {
    self.namespace = namespace
    self.resource = resource
    self.resourceType = resourceType
    self.opts = opts
  }

  public var variables: GraphQLMap? {
    return ["namespace": namespace, "resource": resource, "resourceType": resourceType, "opts": opts]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("authorizeResource", arguments: ["namespace": GraphQLVariable("namespace"), "resource": GraphQLVariable("resource"), "resourceType": GraphQLVariable("resourceType"), "opts": GraphQLVariable("opts")], type: .nonNull(.object(AuthorizeResource.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(authorizeResource: AuthorizeResource) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "authorizeResource": authorizeResource.resultMap])
    }

    /// 将一个（类）资源授权给用户、角色、分组、组织机构，且可以分别指定不同的操作权限。
    public var authorizeResource: AuthorizeResource {
      get {
        return AuthorizeResource(unsafeResultMap: resultMap["authorizeResource"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "authorizeResource")
      }
    }

    public struct AuthorizeResource: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("code", type: .scalar(Int.self)),
          GraphQLField("message", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(code: Int? = nil, message: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "code": code, "message": message])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }
    }
  }
}

public final class BindEmailMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation bindEmail($email: String!, $emailCode: String!) {
      bindEmail(email: $email, emailCode: $emailCode) {
        __typename
        id
        arn
        userPoolId
        status
        username
        email
        emailVerified
        phone
        phoneVerified
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
      }
    }
    """

  public let operationName: String = "bindEmail"

  public var email: String
  public var emailCode: String

  public init(email: String, emailCode: String) {
    self.email = email
    self.emailCode = emailCode
  }

  public var variables: GraphQLMap? {
    return ["email": email, "emailCode": emailCode]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("bindEmail", arguments: ["email": GraphQLVariable("email"), "emailCode": GraphQLVariable("emailCode")], type: .nonNull(.object(BindEmail.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(bindEmail: BindEmail) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "bindEmail": bindEmail.resultMap])
    }

    /// 绑定邮箱
    public var bindEmail: BindEmail {
      get {
        return BindEmail(unsafeResultMap: resultMap["bindEmail"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "bindEmail")
      }
    }

    public struct BindEmail: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }
    }
  }
}

public final class BindPhoneMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation bindPhone($phone: String!, $phoneCode: String!) {
      bindPhone(phone: $phone, phoneCode: $phoneCode) {
        __typename
        id
        arn
        userPoolId
        status
        username
        email
        emailVerified
        phone
        phoneVerified
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
      }
    }
    """

  public let operationName: String = "bindPhone"

  public var phone: String
  public var phoneCode: String

  public init(phone: String, phoneCode: String) {
    self.phone = phone
    self.phoneCode = phoneCode
  }

  public var variables: GraphQLMap? {
    return ["phone": phone, "phoneCode": phoneCode]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("bindPhone", arguments: ["phone": GraphQLVariable("phone"), "phoneCode": GraphQLVariable("phoneCode")], type: .nonNull(.object(BindPhone.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(bindPhone: BindPhone) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "bindPhone": bindPhone.resultMap])
    }

    /// 绑定手机号，调用此接口需要当前用户未绑定手机号
    public var bindPhone: BindPhone {
      get {
        return BindPhone(unsafeResultMap: resultMap["bindPhone"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "bindPhone")
      }
    }

    public struct BindPhone: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }
    }
  }
}

public final class ChangeMfaMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation changeMfa($enable: Boolean, $id: String, $userId: String, $userPoolId: String, $refresh: Boolean) {
      changeMfa(
        enable: $enable
        id: $id
        userId: $userId
        userPoolId: $userPoolId
        refresh: $refresh
      ) {
        __typename
        id
        userId
        userPoolId
        enable
        secret
      }
    }
    """

  public let operationName: String = "changeMfa"

  public var enable: Bool?
  public var id: String?
  public var userId: String?
  public var userPoolId: String?
  public var refresh: Bool?

  public init(enable: Bool? = nil, id: String? = nil, userId: String? = nil, userPoolId: String? = nil, refresh: Bool? = nil) {
    self.enable = enable
    self.id = id
    self.userId = userId
    self.userPoolId = userPoolId
    self.refresh = refresh
  }

  public var variables: GraphQLMap? {
    return ["enable": enable, "id": id, "userId": userId, "userPoolId": userPoolId, "refresh": refresh]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("changeMfa", arguments: ["enable": GraphQLVariable("enable"), "id": GraphQLVariable("id"), "userId": GraphQLVariable("userId"), "userPoolId": GraphQLVariable("userPoolId"), "refresh": GraphQLVariable("refresh")], type: .object(ChangeMfa.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(changeMfa: ChangeMfa? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "changeMfa": changeMfa.flatMap { (value: ChangeMfa) -> ResultMap in value.resultMap }])
    }

    /// 修改 MFA 信息
    public var changeMfa: ChangeMfa? {
      get {
        return (resultMap["changeMfa"] as? ResultMap).flatMap { ChangeMfa(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "changeMfa")
      }
    }

    public struct ChangeMfa: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Mfa"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("userId", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("enable", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("secret", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, userId: String, userPoolId: String, enable: Bool, secret: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "Mfa", "id": id, "userId": userId, "userPoolId": userPoolId, "enable": enable, "secret": secret])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// MFA ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// 用户 ID
      public var userId: String {
        get {
          return resultMap["userId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userId")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 是否开启 MFA
      public var enable: Bool {
        get {
          return resultMap["enable"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "enable")
        }
      }

      /// 密钥
      public var secret: String? {
        get {
          return resultMap["secret"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "secret")
        }
      }
    }
  }
}

public final class CheckLoginStatusQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query checkLoginStatus($token: String) {
      checkLoginStatus(token: $token) {
        __typename
        code
        message
        status
        exp
        iat
        data {
          __typename
          id
          userPoolId
          arn
        }
      }
    }
    """

  public let operationName: String = "checkLoginStatus"

  public var token: String?

  public init(token: String? = nil) {
    self.token = token
  }

  public var variables: GraphQLMap? {
    return ["token": token]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("checkLoginStatus", arguments: ["token": GraphQLVariable("token")], type: .object(CheckLoginStatus.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(checkLoginStatus: CheckLoginStatus? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "checkLoginStatus": checkLoginStatus.flatMap { (value: CheckLoginStatus) -> ResultMap in value.resultMap }])
    }

    public var checkLoginStatus: CheckLoginStatus? {
      get {
        return (resultMap["checkLoginStatus"] as? ResultMap).flatMap { CheckLoginStatus(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "checkLoginStatus")
      }
    }

    public struct CheckLoginStatus: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["JWTTokenStatus"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("code", type: .scalar(Int.self)),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("status", type: .scalar(Bool.self)),
          GraphQLField("exp", type: .scalar(Int.self)),
          GraphQLField("iat", type: .scalar(Int.self)),
          GraphQLField("data", type: .object(Datum.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(code: Int? = nil, message: String? = nil, status: Bool? = nil, exp: Int? = nil, iat: Int? = nil, data: Datum? = nil) {
        self.init(unsafeResultMap: ["__typename": "JWTTokenStatus", "code": code, "message": message, "status": status, "exp": exp, "iat": iat, "data": data.flatMap { (value: Datum) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      public var status: Bool? {
        get {
          return resultMap["status"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      public var exp: Int? {
        get {
          return resultMap["exp"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "exp")
        }
      }

      public var iat: Int? {
        get {
          return resultMap["iat"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "iat")
        }
      }

      public var data: Datum? {
        get {
          return (resultMap["data"] as? ResultMap).flatMap { Datum(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "data")
        }
      }

      public struct Datum: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["JWTTokenStatusDetail"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .scalar(String.self)),
            GraphQLField("userPoolId", type: .scalar(String.self)),
            GraphQLField("arn", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String? = nil, userPoolId: String? = nil, arn: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "JWTTokenStatusDetail", "id": id, "userPoolId": userPoolId, "arn": arn])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String? {
          get {
            return resultMap["id"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var userPoolId: String? {
          get {
            return resultMap["userPoolId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "userPoolId")
          }
        }

        public var arn: String? {
          get {
            return resultMap["arn"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "arn")
          }
        }
      }
    }
  }
}

public final class CheckPasswordStrengthQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query checkPasswordStrength($password: String!) {
      checkPasswordStrength(password: $password) {
        __typename
        valid
        message
      }
    }
    """

  public let operationName: String = "checkPasswordStrength"

  public var password: String

  public init(password: String) {
    self.password = password
  }

  public var variables: GraphQLMap? {
    return ["password": password]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("checkPasswordStrength", arguments: ["password": GraphQLVariable("password")], type: .nonNull(.object(CheckPasswordStrength.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(checkPasswordStrength: CheckPasswordStrength) {
      self.init(unsafeResultMap: ["__typename": "Query", "checkPasswordStrength": checkPasswordStrength.resultMap])
    }

    public var checkPasswordStrength: CheckPasswordStrength {
      get {
        return CheckPasswordStrength(unsafeResultMap: resultMap["checkPasswordStrength"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "checkPasswordStrength")
      }
    }

    public struct CheckPasswordStrength: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CheckPasswordStrengthResult"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("valid", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("message", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(valid: Bool, message: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "CheckPasswordStrengthResult", "valid": valid, "message": message])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var valid: Bool {
        get {
          return resultMap["valid"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "valid")
        }
      }

      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }
    }
  }
}

public final class ChildrenNodesQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query childrenNodes($nodeId: String!) {
      childrenNodes(nodeId: $nodeId) {
        __typename
        id
        orgId
        name
        nameI18n
        description
        descriptionI18n
        order
        code
        root
        depth
        path
        createdAt
        updatedAt
        children
      }
    }
    """

  public let operationName: String = "childrenNodes"

  public var nodeId: String

  public init(nodeId: String) {
    self.nodeId = nodeId
  }

  public var variables: GraphQLMap? {
    return ["nodeId": nodeId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("childrenNodes", arguments: ["nodeId": GraphQLVariable("nodeId")], type: .nonNull(.list(.nonNull(.object(ChildrenNode.selections))))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(childrenNodes: [ChildrenNode]) {
      self.init(unsafeResultMap: ["__typename": "Query", "childrenNodes": childrenNodes.map { (value: ChildrenNode) -> ResultMap in value.resultMap }])
    }

    /// 查询子节点列表
    public var childrenNodes: [ChildrenNode] {
      get {
        return (resultMap["childrenNodes"] as! [ResultMap]).map { (value: ResultMap) -> ChildrenNode in ChildrenNode(unsafeResultMap: value) }
      }
      set {
        resultMap.updateValue(newValue.map { (value: ChildrenNode) -> ResultMap in value.resultMap }, forKey: "childrenNodes")
      }
    }

    public struct ChildrenNode: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Node"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("orgId", type: .scalar(String.self)),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("nameI18n", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("descriptionI18n", type: .scalar(String.self)),
          GraphQLField("order", type: .scalar(Int.self)),
          GraphQLField("code", type: .scalar(String.self)),
          GraphQLField("root", type: .scalar(Bool.self)),
          GraphQLField("depth", type: .scalar(Int.self)),
          GraphQLField("path", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("children", type: .list(.nonNull(.scalar(String.self)))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, orgId: String? = nil, name: String, nameI18n: String? = nil, description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil, root: Bool? = nil, depth: Int? = nil, path: [String], createdAt: String? = nil, updatedAt: String? = nil, children: [String]? = nil) {
        self.init(unsafeResultMap: ["__typename": "Node", "id": id, "orgId": orgId, "name": name, "nameI18n": nameI18n, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code, "root": root, "depth": depth, "path": path, "createdAt": createdAt, "updatedAt": updatedAt, "children": children])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// 组织机构 ID
      public var orgId: String? {
        get {
          return resultMap["orgId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "orgId")
        }
      }

      /// 节点名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。
      public var nameI18n: String? {
        get {
          return resultMap["nameI18n"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nameI18n")
        }
      }

      /// 描述信息
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 多语言描述信息
      public var descriptionI18n: String? {
        get {
          return resultMap["descriptionI18n"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "descriptionI18n")
        }
      }

      /// 在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)
      public var order: Int? {
        get {
          return resultMap["order"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "order")
        }
      }

      /// 节点唯一标志码，可以通过 code 进行搜索
      public var code: String? {
        get {
          return resultMap["code"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      /// 是否为根节点
      public var root: Bool? {
        get {
          return resultMap["root"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "root")
        }
      }

      /// 距离父节点的深度（如果是查询整棵树，返回的 **depth** 为距离根节点的深度，如果是查询某个节点的子节点，返回的 **depth** 指的是距离该节点的深度。）
      public var depth: Int? {
        get {
          return resultMap["depth"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "depth")
        }
      }

      public var path: [String] {
        get {
          return resultMap["path"]! as! [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "path")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 该节点的子节点 **ID** 列表
      public var children: [String]? {
        get {
          return resultMap["children"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "children")
        }
      }
    }
  }
}

public final class ConfigEmailTemplateMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation configEmailTemplate($input: ConfigEmailTemplateInput!) {
      configEmailTemplate(input: $input) {
        __typename
        type
        name
        subject
        sender
        content
        redirectTo
        hasURL
        expiresIn
        enabled
        isSystem
      }
    }
    """

  public let operationName: String = "configEmailTemplate"

  public var input: ConfigEmailTemplateInput

  public init(input: ConfigEmailTemplateInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("configEmailTemplate", arguments: ["input": GraphQLVariable("input")], type: .nonNull(.object(ConfigEmailTemplate.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(configEmailTemplate: ConfigEmailTemplate) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "configEmailTemplate": configEmailTemplate.resultMap])
    }

    /// 配置自定义邮件模版
    public var configEmailTemplate: ConfigEmailTemplate {
      get {
        return ConfigEmailTemplate(unsafeResultMap: resultMap["configEmailTemplate"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "configEmailTemplate")
      }
    }

    public struct ConfigEmailTemplate: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["EmailTemplate"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("type", type: .nonNull(.scalar(EmailTemplateType.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("subject", type: .nonNull(.scalar(String.self))),
          GraphQLField("sender", type: .nonNull(.scalar(String.self))),
          GraphQLField("content", type: .nonNull(.scalar(String.self))),
          GraphQLField("redirectTo", type: .scalar(String.self)),
          GraphQLField("hasURL", type: .scalar(Bool.self)),
          GraphQLField("expiresIn", type: .scalar(Int.self)),
          GraphQLField("enabled", type: .scalar(Bool.self)),
          GraphQLField("isSystem", type: .scalar(Bool.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(type: EmailTemplateType, name: String, subject: String, sender: String, content: String, redirectTo: String? = nil, hasUrl: Bool? = nil, expiresIn: Int? = nil, enabled: Bool? = nil, isSystem: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "EmailTemplate", "type": type, "name": name, "subject": subject, "sender": sender, "content": content, "redirectTo": redirectTo, "hasURL": hasUrl, "expiresIn": expiresIn, "enabled": enabled, "isSystem": isSystem])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 邮件模版类型
      public var type: EmailTemplateType {
        get {
          return resultMap["type"]! as! EmailTemplateType
        }
        set {
          resultMap.updateValue(newValue, forKey: "type")
        }
      }

      /// 模版名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 邮件主题
      public var subject: String {
        get {
          return resultMap["subject"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "subject")
        }
      }

      /// 显示的邮件发送人
      public var sender: String {
        get {
          return resultMap["sender"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "sender")
        }
      }

      /// 邮件模版内容
      public var content: String {
        get {
          return resultMap["content"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "content")
        }
      }

      /// 重定向链接，操作成功后，用户将被重定向到此 URL。
      public var redirectTo: String? {
        get {
          return resultMap["redirectTo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "redirectTo")
        }
      }

      public var hasUrl: Bool? {
        get {
          return resultMap["hasURL"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "hasURL")
        }
      }

      /// 验证码过期时间（单位为秒）
      public var expiresIn: Int? {
        get {
          return resultMap["expiresIn"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "expiresIn")
        }
      }

      /// 是否开启（自定义模版）
      public var enabled: Bool? {
        get {
          return resultMap["enabled"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "enabled")
        }
      }

      /// 是否是系统默认模版
      public var isSystem: Bool? {
        get {
          return resultMap["isSystem"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isSystem")
        }
      }
    }
  }
}

public final class CreateFunctionMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation createFunction($input: CreateFunctionInput!) {
      createFunction(input: $input) {
        __typename
        id
        name
        sourceCode
        description
        url
      }
    }
    """

  public let operationName: String = "createFunction"

  public var input: CreateFunctionInput

  public init(input: CreateFunctionInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("createFunction", arguments: ["input": GraphQLVariable("input")], type: .object(CreateFunction.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createFunction: CreateFunction? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createFunction": createFunction.flatMap { (value: CreateFunction) -> ResultMap in value.resultMap }])
    }

    /// 创建函数
    public var createFunction: CreateFunction? {
      get {
        return (resultMap["createFunction"] as? ResultMap).flatMap { CreateFunction(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "createFunction")
      }
    }

    public struct CreateFunction: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Function"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("sourceCode", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("url", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, name: String, sourceCode: String, description: String? = nil, url: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "Function", "id": id, "name": name, "sourceCode": sourceCode, "description": description, "url": url])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// 函数名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 源代码
      public var sourceCode: String {
        get {
          return resultMap["sourceCode"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "sourceCode")
        }
      }

      /// 描述信息
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 云函数链接
      public var url: String? {
        get {
          return resultMap["url"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "url")
        }
      }
    }
  }
}

public final class CreateGroupMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation createGroup($code: String!, $name: String!, $description: String) {
      createGroup(code: $code, name: $name, description: $description) {
        __typename
        code
        name
        description
        createdAt
        updatedAt
      }
    }
    """

  public let operationName: String = "createGroup"

  public var code: String
  public var name: String
  public var description: String?

  public init(code: String, name: String, description: String? = nil) {
    self.code = code
    self.name = name
    self.description = description
  }

  public var variables: GraphQLMap? {
    return ["code": code, "name": name, "description": description]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("createGroup", arguments: ["code": GraphQLVariable("code"), "name": GraphQLVariable("name"), "description": GraphQLVariable("description")], type: .nonNull(.object(CreateGroup.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createGroup: CreateGroup) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createGroup": createGroup.resultMap])
    }

    /// 创建角色
    public var createGroup: CreateGroup {
      get {
        return CreateGroup(unsafeResultMap: resultMap["createGroup"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "createGroup")
      }
    }

    public struct CreateGroup: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Group"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("code", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(code: String, name: String, description: String? = nil, createdAt: String? = nil, updatedAt: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "Group", "code": code, "name": name, "description": description, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 唯一标志 code
      public var code: String {
        get {
          return resultMap["code"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      /// 名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 描述
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 创建时间
      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      /// 修改时间
      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }
    }
  }
}

public final class CreateOrgMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation createOrg($name: String!, $code: String, $description: String) {
      createOrg(name: $name, code: $code, description: $description) {
        __typename
        id
        rootNode {
          __typename
          id
          orgId
          name
          nameI18n
          description
          descriptionI18n
          order
          code
          root
          depth
          path
          createdAt
          updatedAt
          children
        }
        nodes {
          __typename
          id
          orgId
          name
          nameI18n
          description
          descriptionI18n
          order
          code
          root
          depth
          path
          createdAt
          updatedAt
          children
        }
      }
    }
    """

  public let operationName: String = "createOrg"

  public var name: String
  public var code: String?
  public var description: String?

  public init(name: String, code: String? = nil, description: String? = nil) {
    self.name = name
    self.code = code
    self.description = description
  }

  public var variables: GraphQLMap? {
    return ["name": name, "code": code, "description": description]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("createOrg", arguments: ["name": GraphQLVariable("name"), "code": GraphQLVariable("code"), "description": GraphQLVariable("description")], type: .nonNull(.object(CreateOrg.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createOrg: CreateOrg) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createOrg": createOrg.resultMap])
    }

    /// 创建组织机构
    public var createOrg: CreateOrg {
      get {
        return CreateOrg(unsafeResultMap: resultMap["createOrg"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "createOrg")
      }
    }

    public struct CreateOrg: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Org"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("rootNode", type: .nonNull(.object(RootNode.selections))),
          GraphQLField("nodes", type: .nonNull(.list(.nonNull(.object(Node.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, rootNode: RootNode, nodes: [Node]) {
        self.init(unsafeResultMap: ["__typename": "Org", "id": id, "rootNode": rootNode.resultMap, "nodes": nodes.map { (value: Node) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 组织机构 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// 根节点
      public var rootNode: RootNode {
        get {
          return RootNode(unsafeResultMap: resultMap["rootNode"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "rootNode")
        }
      }

      /// 组织机构节点列表
      public var nodes: [Node] {
        get {
          return (resultMap["nodes"] as! [ResultMap]).map { (value: ResultMap) -> Node in Node(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Node) -> ResultMap in value.resultMap }, forKey: "nodes")
        }
      }

      public struct RootNode: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Node"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(String.self))),
            GraphQLField("orgId", type: .scalar(String.self)),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("nameI18n", type: .scalar(String.self)),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("descriptionI18n", type: .scalar(String.self)),
            GraphQLField("order", type: .scalar(Int.self)),
            GraphQLField("code", type: .scalar(String.self)),
            GraphQLField("root", type: .scalar(Bool.self)),
            GraphQLField("depth", type: .scalar(Int.self)),
            GraphQLField("path", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
            GraphQLField("createdAt", type: .scalar(String.self)),
            GraphQLField("updatedAt", type: .scalar(String.self)),
            GraphQLField("children", type: .list(.nonNull(.scalar(String.self)))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String, orgId: String? = nil, name: String, nameI18n: String? = nil, description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil, root: Bool? = nil, depth: Int? = nil, path: [String], createdAt: String? = nil, updatedAt: String? = nil, children: [String]? = nil) {
          self.init(unsafeResultMap: ["__typename": "Node", "id": id, "orgId": orgId, "name": name, "nameI18n": nameI18n, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code, "root": root, "depth": depth, "path": path, "createdAt": createdAt, "updatedAt": updatedAt, "children": children])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String {
          get {
            return resultMap["id"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        /// 组织机构 ID
        public var orgId: String? {
          get {
            return resultMap["orgId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "orgId")
          }
        }

        /// 节点名称
        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。
        public var nameI18n: String? {
          get {
            return resultMap["nameI18n"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "nameI18n")
          }
        }

        /// 描述信息
        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 多语言描述信息
        public var descriptionI18n: String? {
          get {
            return resultMap["descriptionI18n"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "descriptionI18n")
          }
        }

        /// 在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)
        public var order: Int? {
          get {
            return resultMap["order"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "order")
          }
        }

        /// 节点唯一标志码，可以通过 code 进行搜索
        public var code: String? {
          get {
            return resultMap["code"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "code")
          }
        }

        /// 是否为根节点
        public var root: Bool? {
          get {
            return resultMap["root"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "root")
          }
        }

        /// 距离父节点的深度（如果是查询整棵树，返回的 **depth** 为距离根节点的深度，如果是查询某个节点的子节点，返回的 **depth** 指的是距离该节点的深度。）
        public var depth: Int? {
          get {
            return resultMap["depth"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "depth")
          }
        }

        public var path: [String] {
          get {
            return resultMap["path"]! as! [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "path")
          }
        }

        public var createdAt: String? {
          get {
            return resultMap["createdAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String? {
          get {
            return resultMap["updatedAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        /// 该节点的子节点 **ID** 列表
        public var children: [String]? {
          get {
            return resultMap["children"] as? [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "children")
          }
        }
      }

      public struct Node: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Node"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(String.self))),
            GraphQLField("orgId", type: .scalar(String.self)),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("nameI18n", type: .scalar(String.self)),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("descriptionI18n", type: .scalar(String.self)),
            GraphQLField("order", type: .scalar(Int.self)),
            GraphQLField("code", type: .scalar(String.self)),
            GraphQLField("root", type: .scalar(Bool.self)),
            GraphQLField("depth", type: .scalar(Int.self)),
            GraphQLField("path", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
            GraphQLField("createdAt", type: .scalar(String.self)),
            GraphQLField("updatedAt", type: .scalar(String.self)),
            GraphQLField("children", type: .list(.nonNull(.scalar(String.self)))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String, orgId: String? = nil, name: String, nameI18n: String? = nil, description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil, root: Bool? = nil, depth: Int? = nil, path: [String], createdAt: String? = nil, updatedAt: String? = nil, children: [String]? = nil) {
          self.init(unsafeResultMap: ["__typename": "Node", "id": id, "orgId": orgId, "name": name, "nameI18n": nameI18n, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code, "root": root, "depth": depth, "path": path, "createdAt": createdAt, "updatedAt": updatedAt, "children": children])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String {
          get {
            return resultMap["id"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        /// 组织机构 ID
        public var orgId: String? {
          get {
            return resultMap["orgId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "orgId")
          }
        }

        /// 节点名称
        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。
        public var nameI18n: String? {
          get {
            return resultMap["nameI18n"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "nameI18n")
          }
        }

        /// 描述信息
        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 多语言描述信息
        public var descriptionI18n: String? {
          get {
            return resultMap["descriptionI18n"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "descriptionI18n")
          }
        }

        /// 在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)
        public var order: Int? {
          get {
            return resultMap["order"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "order")
          }
        }

        /// 节点唯一标志码，可以通过 code 进行搜索
        public var code: String? {
          get {
            return resultMap["code"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "code")
          }
        }

        /// 是否为根节点
        public var root: Bool? {
          get {
            return resultMap["root"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "root")
          }
        }

        /// 距离父节点的深度（如果是查询整棵树，返回的 **depth** 为距离根节点的深度，如果是查询某个节点的子节点，返回的 **depth** 指的是距离该节点的深度。）
        public var depth: Int? {
          get {
            return resultMap["depth"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "depth")
          }
        }

        public var path: [String] {
          get {
            return resultMap["path"]! as! [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "path")
          }
        }

        public var createdAt: String? {
          get {
            return resultMap["createdAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String? {
          get {
            return resultMap["updatedAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        /// 该节点的子节点 **ID** 列表
        public var children: [String]? {
          get {
            return resultMap["children"] as? [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "children")
          }
        }
      }
    }
  }
}

public final class CreatePolicyMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation createPolicy($namespace: String, $code: String!, $description: String, $statements: [PolicyStatementInput!]!) {
      createPolicy(
        namespace: $namespace
        code: $code
        description: $description
        statements: $statements
      ) {
        __typename
        namespace
        code
        isDefault
        description
        statements {
          __typename
          resource
          actions
          effect
          condition {
            __typename
            param
            operator
            value
          }
        }
        createdAt
        updatedAt
        assignmentsCount
      }
    }
    """

  public let operationName: String = "createPolicy"

  public var namespace: String?
  public var code: String
  public var description: String?
  public var statements: [PolicyStatementInput]

  public init(namespace: String? = nil, code: String, description: String? = nil, statements: [PolicyStatementInput]) {
    self.namespace = namespace
    self.code = code
    self.description = description
    self.statements = statements
  }

  public var variables: GraphQLMap? {
    return ["namespace": namespace, "code": code, "description": description, "statements": statements]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("createPolicy", arguments: ["namespace": GraphQLVariable("namespace"), "code": GraphQLVariable("code"), "description": GraphQLVariable("description"), "statements": GraphQLVariable("statements")], type: .nonNull(.object(CreatePolicy.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createPolicy: CreatePolicy) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createPolicy": createPolicy.resultMap])
    }

    public var createPolicy: CreatePolicy {
      get {
        return CreatePolicy(unsafeResultMap: resultMap["createPolicy"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "createPolicy")
      }
    }

    public struct CreatePolicy: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Policy"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("namespace", type: .nonNull(.scalar(String.self))),
          GraphQLField("code", type: .nonNull(.scalar(String.self))),
          GraphQLField("isDefault", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("statements", type: .nonNull(.list(.nonNull(.object(Statement.selections))))),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("assignmentsCount", type: .nonNull(.scalar(Int.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(namespace: String, code: String, isDefault: Bool, description: String? = nil, statements: [Statement], createdAt: String? = nil, updatedAt: String? = nil, assignmentsCount: Int) {
        self.init(unsafeResultMap: ["__typename": "Policy", "namespace": namespace, "code": code, "isDefault": isDefault, "description": description, "statements": statements.map { (value: Statement) -> ResultMap in value.resultMap }, "createdAt": createdAt, "updatedAt": updatedAt, "assignmentsCount": assignmentsCount])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 权限组 code
      public var namespace: String {
        get {
          return resultMap["namespace"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "namespace")
        }
      }

      public var code: String {
        get {
          return resultMap["code"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      public var isDefault: Bool {
        get {
          return resultMap["isDefault"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDefault")
        }
      }

      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      public var statements: [Statement] {
        get {
          return (resultMap["statements"] as! [ResultMap]).map { (value: ResultMap) -> Statement in Statement(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Statement) -> ResultMap in value.resultMap }, forKey: "statements")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 被授权次数
      public var assignmentsCount: Int {
        get {
          return resultMap["assignmentsCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "assignmentsCount")
        }
      }

      public struct Statement: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PolicyStatement"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("resource", type: .nonNull(.scalar(String.self))),
            GraphQLField("actions", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
            GraphQLField("effect", type: .scalar(PolicyEffect.self)),
            GraphQLField("condition", type: .list(.nonNull(.object(Condition.selections)))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(resource: String, actions: [String], effect: PolicyEffect? = nil, condition: [Condition]? = nil) {
          self.init(unsafeResultMap: ["__typename": "PolicyStatement", "resource": resource, "actions": actions, "effect": effect, "condition": condition.flatMap { (value: [Condition]) -> [ResultMap] in value.map { (value: Condition) -> ResultMap in value.resultMap } }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var resource: String {
          get {
            return resultMap["resource"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "resource")
          }
        }

        public var actions: [String] {
          get {
            return resultMap["actions"]! as! [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "actions")
          }
        }

        public var effect: PolicyEffect? {
          get {
            return resultMap["effect"] as? PolicyEffect
          }
          set {
            resultMap.updateValue(newValue, forKey: "effect")
          }
        }

        public var condition: [Condition]? {
          get {
            return (resultMap["condition"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Condition] in value.map { (value: ResultMap) -> Condition in Condition(unsafeResultMap: value) } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Condition]) -> [ResultMap] in value.map { (value: Condition) -> ResultMap in value.resultMap } }, forKey: "condition")
          }
        }

        public struct Condition: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["PolicyStatementCondition"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("param", type: .nonNull(.scalar(String.self))),
              GraphQLField("operator", type: .nonNull(.scalar(String.self))),
              GraphQLField("value", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(param: String, `operator`: String, value: String) {
            self.init(unsafeResultMap: ["__typename": "PolicyStatementCondition", "param": param, "operator": `operator`, "value": value])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var param: String {
            get {
              return resultMap["param"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "param")
            }
          }

          public var `operator`: String {
            get {
              return resultMap["operator"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "operator")
            }
          }

          public var value: String {
            get {
              return resultMap["value"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "value")
            }
          }
        }
      }
    }
  }
}

public final class CreateRoleMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation createRole($namespace: String, $code: String!, $description: String, $parent: String) {
      createRole(
        namespace: $namespace
        code: $code
        description: $description
        parent: $parent
      ) {
        __typename
        id
        namespace
        code
        arn
        description
        createdAt
        updatedAt
        parent {
          __typename
          namespace
          code
          arn
          description
          createdAt
          updatedAt
        }
      }
    }
    """

  public let operationName: String = "createRole"

  public var namespace: String?
  public var code: String
  public var description: String?
  public var parent: String?

  public init(namespace: String? = nil, code: String, description: String? = nil, parent: String? = nil) {
    self.namespace = namespace
    self.code = code
    self.description = description
    self.parent = parent
  }

  public var variables: GraphQLMap? {
    return ["namespace": namespace, "code": code, "description": description, "parent": parent]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("createRole", arguments: ["namespace": GraphQLVariable("namespace"), "code": GraphQLVariable("code"), "description": GraphQLVariable("description"), "parent": GraphQLVariable("parent")], type: .nonNull(.object(CreateRole.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createRole: CreateRole) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createRole": createRole.resultMap])
    }

    /// 创建角色
    public var createRole: CreateRole {
      get {
        return CreateRole(unsafeResultMap: resultMap["createRole"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "createRole")
      }
    }

    public struct CreateRole: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Role"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("namespace", type: .nonNull(.scalar(String.self))),
          GraphQLField("code", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("parent", type: .object(Parent.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, namespace: String, code: String, arn: String, description: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, parent: Parent? = nil) {
        self.init(unsafeResultMap: ["__typename": "Role", "id": id, "namespace": namespace, "code": code, "arn": arn, "description": description, "createdAt": createdAt, "updatedAt": updatedAt, "parent": parent.flatMap { (value: Parent) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// 权限组 code
      public var namespace: String {
        get {
          return resultMap["namespace"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "namespace")
        }
      }

      /// 唯一标志 code
      public var code: String {
        get {
          return resultMap["code"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      /// 资源描述符 arn
      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 角色描述
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 创建时间
      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      /// 修改时间
      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 父角色
      public var parent: Parent? {
        get {
          return (resultMap["parent"] as? ResultMap).flatMap { Parent(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "parent")
        }
      }

      public struct Parent: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Role"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("namespace", type: .nonNull(.scalar(String.self))),
            GraphQLField("code", type: .nonNull(.scalar(String.self))),
            GraphQLField("arn", type: .nonNull(.scalar(String.self))),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("createdAt", type: .scalar(String.self)),
            GraphQLField("updatedAt", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(namespace: String, code: String, arn: String, description: String? = nil, createdAt: String? = nil, updatedAt: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "Role", "namespace": namespace, "code": code, "arn": arn, "description": description, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 权限组 code
        public var namespace: String {
          get {
            return resultMap["namespace"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "namespace")
          }
        }

        /// 唯一标志 code
        public var code: String {
          get {
            return resultMap["code"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "code")
          }
        }

        /// 资源描述符 arn
        public var arn: String {
          get {
            return resultMap["arn"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "arn")
          }
        }

        /// 角色描述
        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 创建时间
        public var createdAt: String? {
          get {
            return resultMap["createdAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        /// 修改时间
        public var updatedAt: String? {
          get {
            return resultMap["updatedAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }
      }
    }
  }
}

public final class CreateSocialConnectionInstanceMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation createSocialConnectionInstance($input: CreateSocialConnectionInstanceInput!) {
      createSocialConnectionInstance(input: $input) {
        __typename
        provider
        enabled
        fields {
          __typename
          key
          value
        }
      }
    }
    """

  public let operationName: String = "createSocialConnectionInstance"

  public var input: CreateSocialConnectionInstanceInput

  public init(input: CreateSocialConnectionInstanceInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("createSocialConnectionInstance", arguments: ["input": GraphQLVariable("input")], type: .nonNull(.object(CreateSocialConnectionInstance.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createSocialConnectionInstance: CreateSocialConnectionInstance) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createSocialConnectionInstance": createSocialConnectionInstance.resultMap])
    }

    /// 配置社会化登录
    public var createSocialConnectionInstance: CreateSocialConnectionInstance {
      get {
        return CreateSocialConnectionInstance(unsafeResultMap: resultMap["createSocialConnectionInstance"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "createSocialConnectionInstance")
      }
    }

    public struct CreateSocialConnectionInstance: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["SocialConnectionInstance"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("provider", type: .nonNull(.scalar(String.self))),
          GraphQLField("enabled", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("fields", type: .list(.object(Field.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(provider: String, enabled: Bool, fields: [Field?]? = nil) {
        self.init(unsafeResultMap: ["__typename": "SocialConnectionInstance", "provider": provider, "enabled": enabled, "fields": fields.flatMap { (value: [Field?]) -> [ResultMap?] in value.map { (value: Field?) -> ResultMap? in value.flatMap { (value: Field) -> ResultMap in value.resultMap } } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var provider: String {
        get {
          return resultMap["provider"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "provider")
        }
      }

      public var enabled: Bool {
        get {
          return resultMap["enabled"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "enabled")
        }
      }

      public var fields: [Field?]? {
        get {
          return (resultMap["fields"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Field?] in value.map { (value: ResultMap?) -> Field? in value.flatMap { (value: ResultMap) -> Field in Field(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Field?]) -> [ResultMap?] in value.map { (value: Field?) -> ResultMap? in value.flatMap { (value: Field) -> ResultMap in value.resultMap } } }, forKey: "fields")
        }
      }

      public struct Field: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["SocialConnectionInstanceField"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("key", type: .nonNull(.scalar(String.self))),
            GraphQLField("value", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(key: String, value: String) {
          self.init(unsafeResultMap: ["__typename": "SocialConnectionInstanceField", "key": key, "value": value])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var key: String {
          get {
            return resultMap["key"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "key")
          }
        }

        public var value: String {
          get {
            return resultMap["value"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "value")
          }
        }
      }
    }
  }
}

public final class CreateUserMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation createUser($userInfo: CreateUserInput!, $params: String, $identity: CreateUserIdentityInput, $keepPassword: Boolean, $resetPasswordOnFirstLogin: Boolean) {
      createUser(
        userInfo: $userInfo
        params: $params
        identity: $identity
        keepPassword: $keepPassword
        resetPasswordOnFirstLogin: $resetPasswordOnFirstLogin
      ) {
        __typename
        id
        arn
        userPoolId
        status
        username
        email
        emailVerified
        phone
        phoneVerified
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
        externalId
      }
    }
    """

  public let operationName: String = "createUser"

  public var userInfo: CreateUserInput
  public var params: String?
  public var identity: CreateUserIdentityInput?
  public var keepPassword: Bool?
  public var resetPasswordOnFirstLogin: Bool?

  public init(userInfo: CreateUserInput, params: String? = nil, identity: CreateUserIdentityInput? = nil, keepPassword: Bool? = nil, resetPasswordOnFirstLogin: Bool? = nil) {
    self.userInfo = userInfo
    self.params = params
    self.identity = identity
    self.keepPassword = keepPassword
    self.resetPasswordOnFirstLogin = resetPasswordOnFirstLogin
  }

  public var variables: GraphQLMap? {
    return ["userInfo": userInfo, "params": params, "identity": identity, "keepPassword": keepPassword, "resetPasswordOnFirstLogin": resetPasswordOnFirstLogin]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("createUser", arguments: ["userInfo": GraphQLVariable("userInfo"), "params": GraphQLVariable("params"), "identity": GraphQLVariable("identity"), "keepPassword": GraphQLVariable("keepPassword"), "resetPasswordOnFirstLogin": GraphQLVariable("resetPasswordOnFirstLogin")], type: .nonNull(.object(CreateUser.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createUser: CreateUser) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createUser": createUser.resultMap])
    }

    /// 创建用户。此接口需要管理员权限，普通用户注册请使用 **register** 接口。
    public var createUser: CreateUser {
      get {
        return CreateUser(unsafeResultMap: resultMap["createUser"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "createUser")
      }
    }

    public struct CreateUser: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("externalId", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 用户外部 ID
      public var externalId: String? {
        get {
          return resultMap["externalId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "externalId")
        }
      }
    }
  }
}

public final class CreateUserpoolMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation createUserpool($name: String!, $domain: String!, $description: String, $logo: String, $userpoolTypes: [String!]) {
      createUserpool(
        name: $name
        domain: $domain
        description: $description
        logo: $logo
        userpoolTypes: $userpoolTypes
      ) {
        __typename
        id
        name
        domain
        description
        secret
        jwtSecret
        userpoolTypes {
          __typename
          code
          name
          description
          image
          sdks
        }
        logo
        createdAt
        updatedAt
        emailVerifiedDefault
        sendWelcomeEmail
        registerDisabled
        appSsoEnabled
        showWxQRCodeWhenRegisterDisabled
        allowedOrigins
        tokenExpiresAfter
        isDeleted
        frequentRegisterCheck {
          __typename
          timeInterval
          limit
          enabled
        }
        loginFailCheck {
          __typename
          timeInterval
          limit
          enabled
        }
        changePhoneStrategy {
          __typename
          verifyOldPhone
        }
        changeEmailStrategy {
          __typename
          verifyOldEmail
        }
        qrcodeLoginStrategy {
          __typename
          qrcodeExpiresAfter
          returnFullUserInfo
          allowExchangeUserInfoFromBrowser
          ticketExpiresAfter
        }
        app2WxappLoginStrategy {
          __typename
          ticketExpriresAfter
          ticketExchangeUserInfoNeedSecret
        }
        whitelist {
          __typename
          phoneEnabled
          emailEnabled
          usernameEnabled
        }
        customSMSProvider {
          __typename
          enabled
          provider
        }
        packageType
      }
    }
    """

  public let operationName: String = "createUserpool"

  public var name: String
  public var domain: String
  public var description: String?
  public var logo: String?
  public var userpoolTypes: [String]?

  public init(name: String, domain: String, description: String? = nil, logo: String? = nil, userpoolTypes: [String]?) {
    self.name = name
    self.domain = domain
    self.description = description
    self.logo = logo
    self.userpoolTypes = userpoolTypes
  }

  public var variables: GraphQLMap? {
    return ["name": name, "domain": domain, "description": description, "logo": logo, "userpoolTypes": userpoolTypes]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("createUserpool", arguments: ["name": GraphQLVariable("name"), "domain": GraphQLVariable("domain"), "description": GraphQLVariable("description"), "logo": GraphQLVariable("logo"), "userpoolTypes": GraphQLVariable("userpoolTypes")], type: .nonNull(.object(CreateUserpool.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createUserpool: CreateUserpool) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createUserpool": createUserpool.resultMap])
    }

    /// 创建用户池
    public var createUserpool: CreateUserpool {
      get {
        return CreateUserpool(unsafeResultMap: resultMap["createUserpool"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "createUserpool")
      }
    }

    public struct CreateUserpool: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["UserPool"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("domain", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("secret", type: .nonNull(.scalar(String.self))),
          GraphQLField("jwtSecret", type: .nonNull(.scalar(String.self))),
          GraphQLField("userpoolTypes", type: .list(.nonNull(.object(UserpoolType.selections)))),
          GraphQLField("logo", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("emailVerifiedDefault", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("sendWelcomeEmail", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("registerDisabled", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("appSsoEnabled", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("showWxQRCodeWhenRegisterDisabled", type: .scalar(Bool.self)),
          GraphQLField("allowedOrigins", type: .scalar(String.self)),
          GraphQLField("tokenExpiresAfter", type: .scalar(Int.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("frequentRegisterCheck", type: .object(FrequentRegisterCheck.selections)),
          GraphQLField("loginFailCheck", type: .object(LoginFailCheck.selections)),
          GraphQLField("changePhoneStrategy", type: .object(ChangePhoneStrategy.selections)),
          GraphQLField("changeEmailStrategy", type: .object(ChangeEmailStrategy.selections)),
          GraphQLField("qrcodeLoginStrategy", type: .object(QrcodeLoginStrategy.selections)),
          GraphQLField("app2WxappLoginStrategy", type: .object(App2WxappLoginStrategy.selections)),
          GraphQLField("whitelist", type: .object(Whitelist.selections)),
          GraphQLField("customSMSProvider", type: .object(CustomSmsProvider.selections)),
          GraphQLField("packageType", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, name: String, domain: String, description: String? = nil, secret: String, jwtSecret: String, userpoolTypes: [UserpoolType]? = nil, logo: String, createdAt: String? = nil, updatedAt: String? = nil, emailVerifiedDefault: Bool, sendWelcomeEmail: Bool, registerDisabled: Bool, appSsoEnabled: Bool, showWxQrCodeWhenRegisterDisabled: Bool? = nil, allowedOrigins: String? = nil, tokenExpiresAfter: Int? = nil, isDeleted: Bool? = nil, frequentRegisterCheck: FrequentRegisterCheck? = nil, loginFailCheck: LoginFailCheck? = nil, changePhoneStrategy: ChangePhoneStrategy? = nil, changeEmailStrategy: ChangeEmailStrategy? = nil, qrcodeLoginStrategy: QrcodeLoginStrategy? = nil, app2WxappLoginStrategy: App2WxappLoginStrategy? = nil, whitelist: Whitelist? = nil, customSmsProvider: CustomSmsProvider? = nil, packageType: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "UserPool", "id": id, "name": name, "domain": domain, "description": description, "secret": secret, "jwtSecret": jwtSecret, "userpoolTypes": userpoolTypes.flatMap { (value: [UserpoolType]) -> [ResultMap] in value.map { (value: UserpoolType) -> ResultMap in value.resultMap } }, "logo": logo, "createdAt": createdAt, "updatedAt": updatedAt, "emailVerifiedDefault": emailVerifiedDefault, "sendWelcomeEmail": sendWelcomeEmail, "registerDisabled": registerDisabled, "appSsoEnabled": appSsoEnabled, "showWxQRCodeWhenRegisterDisabled": showWxQrCodeWhenRegisterDisabled, "allowedOrigins": allowedOrigins, "tokenExpiresAfter": tokenExpiresAfter, "isDeleted": isDeleted, "frequentRegisterCheck": frequentRegisterCheck.flatMap { (value: FrequentRegisterCheck) -> ResultMap in value.resultMap }, "loginFailCheck": loginFailCheck.flatMap { (value: LoginFailCheck) -> ResultMap in value.resultMap }, "changePhoneStrategy": changePhoneStrategy.flatMap { (value: ChangePhoneStrategy) -> ResultMap in value.resultMap }, "changeEmailStrategy": changeEmailStrategy.flatMap { (value: ChangeEmailStrategy) -> ResultMap in value.resultMap }, "qrcodeLoginStrategy": qrcodeLoginStrategy.flatMap { (value: QrcodeLoginStrategy) -> ResultMap in value.resultMap }, "app2WxappLoginStrategy": app2WxappLoginStrategy.flatMap { (value: App2WxappLoginStrategy) -> ResultMap in value.resultMap }, "whitelist": whitelist.flatMap { (value: Whitelist) -> ResultMap in value.resultMap }, "customSMSProvider": customSmsProvider.flatMap { (value: CustomSmsProvider) -> ResultMap in value.resultMap }, "packageType": packageType])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var domain: String {
        get {
          return resultMap["domain"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "domain")
        }
      }

      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      public var secret: String {
        get {
          return resultMap["secret"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "secret")
        }
      }

      public var jwtSecret: String {
        get {
          return resultMap["jwtSecret"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "jwtSecret")
        }
      }

      public var userpoolTypes: [UserpoolType]? {
        get {
          return (resultMap["userpoolTypes"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [UserpoolType] in value.map { (value: ResultMap) -> UserpoolType in UserpoolType(unsafeResultMap: value) } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [UserpoolType]) -> [ResultMap] in value.map { (value: UserpoolType) -> ResultMap in value.resultMap } }, forKey: "userpoolTypes")
        }
      }

      public var logo: String {
        get {
          return resultMap["logo"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "logo")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 用户邮箱是否验证（用户的 emailVerified 字段）默认值，默认为 false
      public var emailVerifiedDefault: Bool {
        get {
          return resultMap["emailVerifiedDefault"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerifiedDefault")
        }
      }

      /// 用户注册之后是否发送欢迎邮件
      public var sendWelcomeEmail: Bool {
        get {
          return resultMap["sendWelcomeEmail"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "sendWelcomeEmail")
        }
      }

      /// 是否关闭注册
      public var registerDisabled: Bool {
        get {
          return resultMap["registerDisabled"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerDisabled")
        }
      }

      /// @deprecated 是否开启用户池下应用间单点登录
      public var appSsoEnabled: Bool {
        get {
          return resultMap["appSsoEnabled"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "appSsoEnabled")
        }
      }

      /// 用户池禁止注册后，是否还显示微信小程序扫码登录。当 **showWXMPQRCode** 为 **true** 时，
      /// 前端显示小程序码，此时只有以前允许注册时，扫码登录过的用户可以继续登录；新用户扫码无法登录。
      public var showWxQrCodeWhenRegisterDisabled: Bool? {
        get {
          return resultMap["showWxQRCodeWhenRegisterDisabled"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "showWxQRCodeWhenRegisterDisabled")
        }
      }

      /// 前端跨域请求白名单
      public var allowedOrigins: String? {
        get {
          return resultMap["allowedOrigins"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "allowedOrigins")
        }
      }

      /// 用户 **token** 有效时间，单位为秒，默认为 15 天。
      public var tokenExpiresAfter: Int? {
        get {
          return resultMap["tokenExpiresAfter"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiresAfter")
        }
      }

      /// 是否已删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      /// 注册频繁检测
      public var frequentRegisterCheck: FrequentRegisterCheck? {
        get {
          return (resultMap["frequentRegisterCheck"] as? ResultMap).flatMap { FrequentRegisterCheck(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "frequentRegisterCheck")
        }
      }

      /// 登录失败检测
      public var loginFailCheck: LoginFailCheck? {
        get {
          return (resultMap["loginFailCheck"] as? ResultMap).flatMap { LoginFailCheck(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "loginFailCheck")
        }
      }

      /// 手机号修改策略
      public var changePhoneStrategy: ChangePhoneStrategy? {
        get {
          return (resultMap["changePhoneStrategy"] as? ResultMap).flatMap { ChangePhoneStrategy(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "changePhoneStrategy")
        }
      }

      /// 邮箱修改策略
      public var changeEmailStrategy: ChangeEmailStrategy? {
        get {
          return (resultMap["changeEmailStrategy"] as? ResultMap).flatMap { ChangeEmailStrategy(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "changeEmailStrategy")
        }
      }

      /// APP 扫码登录配置
      public var qrcodeLoginStrategy: QrcodeLoginStrategy? {
        get {
          return (resultMap["qrcodeLoginStrategy"] as? ResultMap).flatMap { QrcodeLoginStrategy(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "qrcodeLoginStrategy")
        }
      }

      /// APP 拉起小程序登录配置
      public var app2WxappLoginStrategy: App2WxappLoginStrategy? {
        get {
          return (resultMap["app2WxappLoginStrategy"] as? ResultMap).flatMap { App2WxappLoginStrategy(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "app2WxappLoginStrategy")
        }
      }

      /// 注册白名单配置
      public var whitelist: Whitelist? {
        get {
          return (resultMap["whitelist"] as? ResultMap).flatMap { Whitelist(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "whitelist")
        }
      }

      /// 自定义短信服务商配置
      public var customSmsProvider: CustomSmsProvider? {
        get {
          return (resultMap["customSMSProvider"] as? ResultMap).flatMap { CustomSmsProvider(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "customSMSProvider")
        }
      }

      /// 用户池套餐类型
      public var packageType: Int? {
        get {
          return resultMap["packageType"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "packageType")
        }
      }

      public struct UserpoolType: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["UserPoolType"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("code", type: .scalar(String.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("sdks", type: .list(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(code: String? = nil, name: String? = nil, description: String? = nil, image: String? = nil, sdks: [String?]? = nil) {
          self.init(unsafeResultMap: ["__typename": "UserPoolType", "code": code, "name": name, "description": description, "image": image, "sdks": sdks])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var code: String? {
          get {
            return resultMap["code"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "code")
          }
        }

        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        public var image: String? {
          get {
            return resultMap["image"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "image")
          }
        }

        public var sdks: [String?]? {
          get {
            return resultMap["sdks"] as? [String?]
          }
          set {
            resultMap.updateValue(newValue, forKey: "sdks")
          }
        }
      }

      public struct FrequentRegisterCheck: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["FrequentRegisterCheckConfig"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("timeInterval", type: .scalar(Int.self)),
            GraphQLField("limit", type: .scalar(Int.self)),
            GraphQLField("enabled", type: .scalar(Bool.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(timeInterval: Int? = nil, limit: Int? = nil, enabled: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "FrequentRegisterCheckConfig", "timeInterval": timeInterval, "limit": limit, "enabled": enabled])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var timeInterval: Int? {
          get {
            return resultMap["timeInterval"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "timeInterval")
          }
        }

        public var limit: Int? {
          get {
            return resultMap["limit"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "limit")
          }
        }

        public var enabled: Bool? {
          get {
            return resultMap["enabled"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "enabled")
          }
        }
      }

      public struct LoginFailCheck: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["LoginFailCheckConfig"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("timeInterval", type: .scalar(Int.self)),
            GraphQLField("limit", type: .scalar(Int.self)),
            GraphQLField("enabled", type: .scalar(Bool.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(timeInterval: Int? = nil, limit: Int? = nil, enabled: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "LoginFailCheckConfig", "timeInterval": timeInterval, "limit": limit, "enabled": enabled])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var timeInterval: Int? {
          get {
            return resultMap["timeInterval"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "timeInterval")
          }
        }

        public var limit: Int? {
          get {
            return resultMap["limit"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "limit")
          }
        }

        public var enabled: Bool? {
          get {
            return resultMap["enabled"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "enabled")
          }
        }
      }

      public struct ChangePhoneStrategy: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["ChangePhoneStrategy"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("verifyOldPhone", type: .scalar(Bool.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(verifyOldPhone: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "ChangePhoneStrategy", "verifyOldPhone": verifyOldPhone])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var verifyOldPhone: Bool? {
          get {
            return resultMap["verifyOldPhone"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "verifyOldPhone")
          }
        }
      }

      public struct ChangeEmailStrategy: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["ChangeEmailStrategy"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("verifyOldEmail", type: .scalar(Bool.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(verifyOldEmail: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "ChangeEmailStrategy", "verifyOldEmail": verifyOldEmail])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var verifyOldEmail: Bool? {
          get {
            return resultMap["verifyOldEmail"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "verifyOldEmail")
          }
        }
      }

      public struct QrcodeLoginStrategy: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["QrcodeLoginStrategy"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("qrcodeExpiresAfter", type: .scalar(Int.self)),
            GraphQLField("returnFullUserInfo", type: .scalar(Bool.self)),
            GraphQLField("allowExchangeUserInfoFromBrowser", type: .scalar(Bool.self)),
            GraphQLField("ticketExpiresAfter", type: .scalar(Int.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(qrcodeExpiresAfter: Int? = nil, returnFullUserInfo: Bool? = nil, allowExchangeUserInfoFromBrowser: Bool? = nil, ticketExpiresAfter: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "QrcodeLoginStrategy", "qrcodeExpiresAfter": qrcodeExpiresAfter, "returnFullUserInfo": returnFullUserInfo, "allowExchangeUserInfoFromBrowser": allowExchangeUserInfoFromBrowser, "ticketExpiresAfter": ticketExpiresAfter])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var qrcodeExpiresAfter: Int? {
          get {
            return resultMap["qrcodeExpiresAfter"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "qrcodeExpiresAfter")
          }
        }

        public var returnFullUserInfo: Bool? {
          get {
            return resultMap["returnFullUserInfo"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "returnFullUserInfo")
          }
        }

        public var allowExchangeUserInfoFromBrowser: Bool? {
          get {
            return resultMap["allowExchangeUserInfoFromBrowser"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "allowExchangeUserInfoFromBrowser")
          }
        }

        public var ticketExpiresAfter: Int? {
          get {
            return resultMap["ticketExpiresAfter"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "ticketExpiresAfter")
          }
        }
      }

      public struct App2WxappLoginStrategy: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["App2WxappLoginStrategy"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("ticketExpriresAfter", type: .scalar(Int.self)),
            GraphQLField("ticketExchangeUserInfoNeedSecret", type: .scalar(Bool.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(ticketExpriresAfter: Int? = nil, ticketExchangeUserInfoNeedSecret: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "App2WxappLoginStrategy", "ticketExpriresAfter": ticketExpriresAfter, "ticketExchangeUserInfoNeedSecret": ticketExchangeUserInfoNeedSecret])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var ticketExpriresAfter: Int? {
          get {
            return resultMap["ticketExpriresAfter"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "ticketExpriresAfter")
          }
        }

        public var ticketExchangeUserInfoNeedSecret: Bool? {
          get {
            return resultMap["ticketExchangeUserInfoNeedSecret"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "ticketExchangeUserInfoNeedSecret")
          }
        }
      }

      public struct Whitelist: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["RegisterWhiteListConfig"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("phoneEnabled", type: .scalar(Bool.self)),
            GraphQLField("emailEnabled", type: .scalar(Bool.self)),
            GraphQLField("usernameEnabled", type: .scalar(Bool.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(phoneEnabled: Bool? = nil, emailEnabled: Bool? = nil, usernameEnabled: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "RegisterWhiteListConfig", "phoneEnabled": phoneEnabled, "emailEnabled": emailEnabled, "usernameEnabled": usernameEnabled])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 是否开启手机号注册白名单
        public var phoneEnabled: Bool? {
          get {
            return resultMap["phoneEnabled"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "phoneEnabled")
          }
        }

        /// 是否开启邮箱注册白名单
        public var emailEnabled: Bool? {
          get {
            return resultMap["emailEnabled"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "emailEnabled")
          }
        }

        /// 是否开用户名注册白名单
        public var usernameEnabled: Bool? {
          get {
            return resultMap["usernameEnabled"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "usernameEnabled")
          }
        }
      }

      public struct CustomSmsProvider: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CustomSMSProvider"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("enabled", type: .scalar(Bool.self)),
            GraphQLField("provider", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(enabled: Bool? = nil, provider: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "CustomSMSProvider", "enabled": enabled, "provider": provider])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var enabled: Bool? {
          get {
            return resultMap["enabled"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "enabled")
          }
        }

        public var provider: String? {
          get {
            return resultMap["provider"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "provider")
          }
        }
      }
    }
  }
}

public final class CreateUserWithCustomDataMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation createUserWithCustomData($userInfo: CreateUserInput!, $keepPassword: Boolean, $params: String) {
      createUser(userInfo: $userInfo, keepPassword: $keepPassword, params: $params) {
        __typename
        id
        arn
        userPoolId
        status
        username
        email
        emailVerified
        phone
        phoneVerified
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
        externalId
        customData {
          __typename
          key
          value
          dataType
          label
        }
      }
    }
    """

  public let operationName: String = "createUserWithCustomData"

  public var userInfo: CreateUserInput
  public var keepPassword: Bool?
  public var params: String?

  public init(userInfo: CreateUserInput, keepPassword: Bool? = nil, params: String? = nil) {
    self.userInfo = userInfo
    self.keepPassword = keepPassword
    self.params = params
  }

  public var variables: GraphQLMap? {
    return ["userInfo": userInfo, "keepPassword": keepPassword, "params": params]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("createUser", arguments: ["userInfo": GraphQLVariable("userInfo"), "keepPassword": GraphQLVariable("keepPassword"), "params": GraphQLVariable("params")], type: .nonNull(.object(CreateUser.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(createUser: CreateUser) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "createUser": createUser.resultMap])
    }

    /// 创建用户。此接口需要管理员权限，普通用户注册请使用 **register** 接口。
    public var createUser: CreateUser {
      get {
        return CreateUser(unsafeResultMap: resultMap["createUser"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "createUser")
      }
    }

    public struct CreateUser: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("externalId", type: .scalar(String.self)),
          GraphQLField("customData", type: .list(.object(CustomDatum.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil, customData: [CustomDatum?]? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId, "customData": customData.flatMap { (value: [CustomDatum?]) -> [ResultMap?] in value.map { (value: CustomDatum?) -> ResultMap? in value.flatMap { (value: CustomDatum) -> ResultMap in value.resultMap } } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 用户外部 ID
      public var externalId: String? {
        get {
          return resultMap["externalId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "externalId")
        }
      }

      /// 用户自定义数据
      public var customData: [CustomDatum?]? {
        get {
          return (resultMap["customData"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [CustomDatum?] in value.map { (value: ResultMap?) -> CustomDatum? in value.flatMap { (value: ResultMap) -> CustomDatum in CustomDatum(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [CustomDatum?]) -> [ResultMap?] in value.map { (value: CustomDatum?) -> ResultMap? in value.flatMap { (value: CustomDatum) -> ResultMap in value.resultMap } } }, forKey: "customData")
        }
      }

      public struct CustomDatum: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["UserCustomData"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("key", type: .nonNull(.scalar(String.self))),
            GraphQLField("value", type: .scalar(String.self)),
            GraphQLField("dataType", type: .nonNull(.scalar(UDFDataType.self))),
            GraphQLField("label", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(key: String, value: String? = nil, dataType: UDFDataType, label: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "UserCustomData", "key": key, "value": value, "dataType": dataType, "label": label])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var key: String {
          get {
            return resultMap["key"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "key")
          }
        }

        public var value: String? {
          get {
            return resultMap["value"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "value")
          }
        }

        public var dataType: UDFDataType {
          get {
            return resultMap["dataType"]! as! UDFDataType
          }
          set {
            resultMap.updateValue(newValue, forKey: "dataType")
          }
        }

        public var label: String? {
          get {
            return resultMap["label"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "label")
          }
        }
      }
    }
  }
}

public final class DeleteFunctionMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation deleteFunction($id: String!) {
      deleteFunction(id: $id) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "deleteFunction"

  public var id: String

  public init(id: String) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("deleteFunction", arguments: ["id": GraphQLVariable("id")], type: .nonNull(.object(DeleteFunction.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(deleteFunction: DeleteFunction) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "deleteFunction": deleteFunction.resultMap])
    }

    public var deleteFunction: DeleteFunction {
      get {
        return DeleteFunction(unsafeResultMap: resultMap["deleteFunction"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "deleteFunction")
      }
    }

    public struct DeleteFunction: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class DeleteGroupsMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation deleteGroups($codeList: [String!]!) {
      deleteGroups(codeList: $codeList) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "deleteGroups"

  public var codeList: [String]

  public init(codeList: [String]) {
    self.codeList = codeList
  }

  public var variables: GraphQLMap? {
    return ["codeList": codeList]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("deleteGroups", arguments: ["codeList": GraphQLVariable("codeList")], type: .nonNull(.object(DeleteGroup.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(deleteGroups: DeleteGroup) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "deleteGroups": deleteGroups.resultMap])
    }

    /// 批量删除角色
    public var deleteGroups: DeleteGroup {
      get {
        return DeleteGroup(unsafeResultMap: resultMap["deleteGroups"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "deleteGroups")
      }
    }

    public struct DeleteGroup: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class DeleteNodeMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation deleteNode($orgId: String!, $nodeId: String!) {
      deleteNode(orgId: $orgId, nodeId: $nodeId) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "deleteNode"

  public var orgId: String
  public var nodeId: String

  public init(orgId: String, nodeId: String) {
    self.orgId = orgId
    self.nodeId = nodeId
  }

  public var variables: GraphQLMap? {
    return ["orgId": orgId, "nodeId": nodeId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("deleteNode", arguments: ["orgId": GraphQLVariable("orgId"), "nodeId": GraphQLVariable("nodeId")], type: .nonNull(.object(DeleteNode.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(deleteNode: DeleteNode) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "deleteNode": deleteNode.resultMap])
    }

    /// 删除节点（会一并删掉子节点）
    public var deleteNode: DeleteNode {
      get {
        return DeleteNode(unsafeResultMap: resultMap["deleteNode"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "deleteNode")
      }
    }

    public struct DeleteNode: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class DeleteOrgMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation deleteOrg($id: String!) {
      deleteOrg(id: $id) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "deleteOrg"

  public var id: String

  public init(id: String) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("deleteOrg", arguments: ["id": GraphQLVariable("id")], type: .nonNull(.object(DeleteOrg.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(deleteOrg: DeleteOrg) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "deleteOrg": deleteOrg.resultMap])
    }

    /// 删除组织机构
    public var deleteOrg: DeleteOrg {
      get {
        return DeleteOrg(unsafeResultMap: resultMap["deleteOrg"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "deleteOrg")
      }
    }

    public struct DeleteOrg: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class DeletePoliciesMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation deletePolicies($codeList: [String!]!, $namespace: String) {
      deletePolicies(codeList: $codeList, namespace: $namespace) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "deletePolicies"

  public var codeList: [String]
  public var namespace: String?

  public init(codeList: [String], namespace: String? = nil) {
    self.codeList = codeList
    self.namespace = namespace
  }

  public var variables: GraphQLMap? {
    return ["codeList": codeList, "namespace": namespace]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("deletePolicies", arguments: ["codeList": GraphQLVariable("codeList"), "namespace": GraphQLVariable("namespace")], type: .nonNull(.object(DeletePolicy.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(deletePolicies: DeletePolicy) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "deletePolicies": deletePolicies.resultMap])
    }

    public var deletePolicies: DeletePolicy {
      get {
        return DeletePolicy(unsafeResultMap: resultMap["deletePolicies"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "deletePolicies")
      }
    }

    public struct DeletePolicy: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class DeletePolicyMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation deletePolicy($code: String!, $namespace: String) {
      deletePolicy(code: $code, namespace: $namespace) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "deletePolicy"

  public var code: String
  public var namespace: String?

  public init(code: String, namespace: String? = nil) {
    self.code = code
    self.namespace = namespace
  }

  public var variables: GraphQLMap? {
    return ["code": code, "namespace": namespace]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("deletePolicy", arguments: ["code": GraphQLVariable("code"), "namespace": GraphQLVariable("namespace")], type: .nonNull(.object(DeletePolicy.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(deletePolicy: DeletePolicy) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "deletePolicy": deletePolicy.resultMap])
    }

    public var deletePolicy: DeletePolicy {
      get {
        return DeletePolicy(unsafeResultMap: resultMap["deletePolicy"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "deletePolicy")
      }
    }

    public struct DeletePolicy: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class DeleteRoleMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation deleteRole($code: String!, $namespace: String) {
      deleteRole(code: $code, namespace: $namespace) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "deleteRole"

  public var code: String
  public var namespace: String?

  public init(code: String, namespace: String? = nil) {
    self.code = code
    self.namespace = namespace
  }

  public var variables: GraphQLMap? {
    return ["code": code, "namespace": namespace]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("deleteRole", arguments: ["code": GraphQLVariable("code"), "namespace": GraphQLVariable("namespace")], type: .nonNull(.object(DeleteRole.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(deleteRole: DeleteRole) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "deleteRole": deleteRole.resultMap])
    }

    /// 删除角色
    public var deleteRole: DeleteRole {
      get {
        return DeleteRole(unsafeResultMap: resultMap["deleteRole"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "deleteRole")
      }
    }

    public struct DeleteRole: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class DeleteRolesMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation deleteRoles($codeList: [String!]!, $namespace: String) {
      deleteRoles(codeList: $codeList, namespace: $namespace) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "deleteRoles"

  public var codeList: [String]
  public var namespace: String?

  public init(codeList: [String], namespace: String? = nil) {
    self.codeList = codeList
    self.namespace = namespace
  }

  public var variables: GraphQLMap? {
    return ["codeList": codeList, "namespace": namespace]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("deleteRoles", arguments: ["codeList": GraphQLVariable("codeList"), "namespace": GraphQLVariable("namespace")], type: .nonNull(.object(DeleteRole.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(deleteRoles: DeleteRole) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "deleteRoles": deleteRoles.resultMap])
    }

    /// 批量删除角色
    public var deleteRoles: DeleteRole {
      get {
        return DeleteRole(unsafeResultMap: resultMap["deleteRoles"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "deleteRoles")
      }
    }

    public struct DeleteRole: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class DeleteUserMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation deleteUser($id: String!) {
      deleteUser(id: $id) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "deleteUser"

  public var id: String

  public init(id: String) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("deleteUser", arguments: ["id": GraphQLVariable("id")], type: .object(DeleteUser.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(deleteUser: DeleteUser? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "deleteUser": deleteUser.flatMap { (value: DeleteUser) -> ResultMap in value.resultMap }])
    }

    /// 删除用户
    public var deleteUser: DeleteUser? {
      get {
        return (resultMap["deleteUser"] as? ResultMap).flatMap { DeleteUser(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "deleteUser")
      }
    }

    public struct DeleteUser: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class DeleteUserpoolMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation deleteUserpool {
      deleteUserpool {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "deleteUserpool"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("deleteUserpool", type: .nonNull(.object(DeleteUserpool.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(deleteUserpool: DeleteUserpool) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "deleteUserpool": deleteUserpool.resultMap])
    }

    public var deleteUserpool: DeleteUserpool {
      get {
        return DeleteUserpool(unsafeResultMap: resultMap["deleteUserpool"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "deleteUserpool")
      }
    }

    public struct DeleteUserpool: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class DeleteUsersMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation deleteUsers($ids: [String!]!) {
      deleteUsers(ids: $ids) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "deleteUsers"

  public var ids: [String]

  public init(ids: [String]) {
    self.ids = ids
  }

  public var variables: GraphQLMap? {
    return ["ids": ids]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("deleteUsers", arguments: ["ids": GraphQLVariable("ids")], type: .object(DeleteUser.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(deleteUsers: DeleteUser? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "deleteUsers": deleteUsers.flatMap { (value: DeleteUser) -> ResultMap in value.resultMap }])
    }

    /// 批量删除用户
    public var deleteUsers: DeleteUser? {
      get {
        return (resultMap["deleteUsers"] as? ResultMap).flatMap { DeleteUser(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "deleteUsers")
      }
    }

    public struct DeleteUser: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class DisableEmailTemplateMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation disableEmailTemplate($type: EmailTemplateType!) {
      disableEmailTemplate(type: $type) {
        __typename
        type
        name
        subject
        sender
        content
        redirectTo
        hasURL
        expiresIn
        enabled
        isSystem
      }
    }
    """

  public let operationName: String = "disableEmailTemplate"

  public var type: EmailTemplateType

  public init(type: EmailTemplateType) {
    self.type = type
  }

  public var variables: GraphQLMap? {
    return ["type": type]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("disableEmailTemplate", arguments: ["type": GraphQLVariable("type")], type: .nonNull(.object(DisableEmailTemplate.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(disableEmailTemplate: DisableEmailTemplate) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "disableEmailTemplate": disableEmailTemplate.resultMap])
    }

    /// 停用自定义邮件模版（将会使用系统默认邮件模版）
    public var disableEmailTemplate: DisableEmailTemplate {
      get {
        return DisableEmailTemplate(unsafeResultMap: resultMap["disableEmailTemplate"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "disableEmailTemplate")
      }
    }

    public struct DisableEmailTemplate: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["EmailTemplate"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("type", type: .nonNull(.scalar(EmailTemplateType.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("subject", type: .nonNull(.scalar(String.self))),
          GraphQLField("sender", type: .nonNull(.scalar(String.self))),
          GraphQLField("content", type: .nonNull(.scalar(String.self))),
          GraphQLField("redirectTo", type: .scalar(String.self)),
          GraphQLField("hasURL", type: .scalar(Bool.self)),
          GraphQLField("expiresIn", type: .scalar(Int.self)),
          GraphQLField("enabled", type: .scalar(Bool.self)),
          GraphQLField("isSystem", type: .scalar(Bool.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(type: EmailTemplateType, name: String, subject: String, sender: String, content: String, redirectTo: String? = nil, hasUrl: Bool? = nil, expiresIn: Int? = nil, enabled: Bool? = nil, isSystem: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "EmailTemplate", "type": type, "name": name, "subject": subject, "sender": sender, "content": content, "redirectTo": redirectTo, "hasURL": hasUrl, "expiresIn": expiresIn, "enabled": enabled, "isSystem": isSystem])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 邮件模版类型
      public var type: EmailTemplateType {
        get {
          return resultMap["type"]! as! EmailTemplateType
        }
        set {
          resultMap.updateValue(newValue, forKey: "type")
        }
      }

      /// 模版名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 邮件主题
      public var subject: String {
        get {
          return resultMap["subject"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "subject")
        }
      }

      /// 显示的邮件发送人
      public var sender: String {
        get {
          return resultMap["sender"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "sender")
        }
      }

      /// 邮件模版内容
      public var content: String {
        get {
          return resultMap["content"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "content")
        }
      }

      /// 重定向链接，操作成功后，用户将被重定向到此 URL。
      public var redirectTo: String? {
        get {
          return resultMap["redirectTo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "redirectTo")
        }
      }

      public var hasUrl: Bool? {
        get {
          return resultMap["hasURL"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "hasURL")
        }
      }

      /// 验证码过期时间（单位为秒）
      public var expiresIn: Int? {
        get {
          return resultMap["expiresIn"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "expiresIn")
        }
      }

      /// 是否开启（自定义模版）
      public var enabled: Bool? {
        get {
          return resultMap["enabled"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "enabled")
        }
      }

      /// 是否是系统默认模版
      public var isSystem: Bool? {
        get {
          return resultMap["isSystem"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isSystem")
        }
      }
    }
  }
}

public final class DisableSocialConnectionInstanceMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation disableSocialConnectionInstance($provider: String!) {
      disableSocialConnectionInstance(provider: $provider) {
        __typename
        provider
        enabled
        fields {
          __typename
          key
          value
        }
      }
    }
    """

  public let operationName: String = "disableSocialConnectionInstance"

  public var provider: String

  public init(provider: String) {
    self.provider = provider
  }

  public var variables: GraphQLMap? {
    return ["provider": provider]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("disableSocialConnectionInstance", arguments: ["provider": GraphQLVariable("provider")], type: .nonNull(.object(DisableSocialConnectionInstance.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(disableSocialConnectionInstance: DisableSocialConnectionInstance) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "disableSocialConnectionInstance": disableSocialConnectionInstance.resultMap])
    }

    /// 关闭社会化登录
    public var disableSocialConnectionInstance: DisableSocialConnectionInstance {
      get {
        return DisableSocialConnectionInstance(unsafeResultMap: resultMap["disableSocialConnectionInstance"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "disableSocialConnectionInstance")
      }
    }

    public struct DisableSocialConnectionInstance: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["SocialConnectionInstance"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("provider", type: .nonNull(.scalar(String.self))),
          GraphQLField("enabled", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("fields", type: .list(.object(Field.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(provider: String, enabled: Bool, fields: [Field?]? = nil) {
        self.init(unsafeResultMap: ["__typename": "SocialConnectionInstance", "provider": provider, "enabled": enabled, "fields": fields.flatMap { (value: [Field?]) -> [ResultMap?] in value.map { (value: Field?) -> ResultMap? in value.flatMap { (value: Field) -> ResultMap in value.resultMap } } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var provider: String {
        get {
          return resultMap["provider"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "provider")
        }
      }

      public var enabled: Bool {
        get {
          return resultMap["enabled"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "enabled")
        }
      }

      public var fields: [Field?]? {
        get {
          return (resultMap["fields"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Field?] in value.map { (value: ResultMap?) -> Field? in value.flatMap { (value: ResultMap) -> Field in Field(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Field?]) -> [ResultMap?] in value.map { (value: Field?) -> ResultMap? in value.flatMap { (value: Field) -> ResultMap in value.resultMap } } }, forKey: "fields")
        }
      }

      public struct Field: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["SocialConnectionInstanceField"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("key", type: .nonNull(.scalar(String.self))),
            GraphQLField("value", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(key: String, value: String) {
          self.init(unsafeResultMap: ["__typename": "SocialConnectionInstanceField", "key": key, "value": value])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var key: String {
          get {
            return resultMap["key"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "key")
          }
        }

        public var value: String {
          get {
            return resultMap["value"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "value")
          }
        }
      }
    }
  }
}

public final class DisbalePolicyAssignmentMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation disbalePolicyAssignment($policy: String!, $targetType: PolicyAssignmentTargetType!, $targetIdentifier: String!, $namespace: String) {
      disbalePolicyAssignment(
        policy: $policy
        targetType: $targetType
        targetIdentifier: $targetIdentifier
        namespace: $namespace
      ) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "disbalePolicyAssignment"

  public var policy: String
  public var targetType: PolicyAssignmentTargetType
  public var targetIdentifier: String
  public var namespace: String?

  public init(policy: String, targetType: PolicyAssignmentTargetType, targetIdentifier: String, namespace: String? = nil) {
    self.policy = policy
    self.targetType = targetType
    self.targetIdentifier = targetIdentifier
    self.namespace = namespace
  }

  public var variables: GraphQLMap? {
    return ["policy": policy, "targetType": targetType, "targetIdentifier": targetIdentifier, "namespace": namespace]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("disbalePolicyAssignment", arguments: ["policy": GraphQLVariable("policy"), "targetType": GraphQLVariable("targetType"), "targetIdentifier": GraphQLVariable("targetIdentifier"), "namespace": GraphQLVariable("namespace")], type: .nonNull(.object(DisbalePolicyAssignment.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(disbalePolicyAssignment: DisbalePolicyAssignment) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "disbalePolicyAssignment": disbalePolicyAssignment.resultMap])
    }

    /// 开启授权
    public var disbalePolicyAssignment: DisbalePolicyAssignment {
      get {
        return DisbalePolicyAssignment(unsafeResultMap: resultMap["disbalePolicyAssignment"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "disbalePolicyAssignment")
      }
    }

    public struct DisbalePolicyAssignment: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class EmailTemplatesQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query emailTemplates {
      emailTemplates {
        __typename
        type
        name
        subject
        sender
        content
        redirectTo
        hasURL
        expiresIn
        enabled
        isSystem
      }
    }
    """

  public let operationName: String = "emailTemplates"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("emailTemplates", type: .nonNull(.list(.nonNull(.object(EmailTemplate.selections))))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(emailTemplates: [EmailTemplate]) {
      self.init(unsafeResultMap: ["__typename": "Query", "emailTemplates": emailTemplates.map { (value: EmailTemplate) -> ResultMap in value.resultMap }])
    }

    public var emailTemplates: [EmailTemplate] {
      get {
        return (resultMap["emailTemplates"] as! [ResultMap]).map { (value: ResultMap) -> EmailTemplate in EmailTemplate(unsafeResultMap: value) }
      }
      set {
        resultMap.updateValue(newValue.map { (value: EmailTemplate) -> ResultMap in value.resultMap }, forKey: "emailTemplates")
      }
    }

    public struct EmailTemplate: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["EmailTemplate"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("type", type: .nonNull(.scalar(EmailTemplateType.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("subject", type: .nonNull(.scalar(String.self))),
          GraphQLField("sender", type: .nonNull(.scalar(String.self))),
          GraphQLField("content", type: .nonNull(.scalar(String.self))),
          GraphQLField("redirectTo", type: .scalar(String.self)),
          GraphQLField("hasURL", type: .scalar(Bool.self)),
          GraphQLField("expiresIn", type: .scalar(Int.self)),
          GraphQLField("enabled", type: .scalar(Bool.self)),
          GraphQLField("isSystem", type: .scalar(Bool.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(type: EmailTemplateType, name: String, subject: String, sender: String, content: String, redirectTo: String? = nil, hasUrl: Bool? = nil, expiresIn: Int? = nil, enabled: Bool? = nil, isSystem: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "EmailTemplate", "type": type, "name": name, "subject": subject, "sender": sender, "content": content, "redirectTo": redirectTo, "hasURL": hasUrl, "expiresIn": expiresIn, "enabled": enabled, "isSystem": isSystem])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 邮件模版类型
      public var type: EmailTemplateType {
        get {
          return resultMap["type"]! as! EmailTemplateType
        }
        set {
          resultMap.updateValue(newValue, forKey: "type")
        }
      }

      /// 模版名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 邮件主题
      public var subject: String {
        get {
          return resultMap["subject"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "subject")
        }
      }

      /// 显示的邮件发送人
      public var sender: String {
        get {
          return resultMap["sender"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "sender")
        }
      }

      /// 邮件模版内容
      public var content: String {
        get {
          return resultMap["content"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "content")
        }
      }

      /// 重定向链接，操作成功后，用户将被重定向到此 URL。
      public var redirectTo: String? {
        get {
          return resultMap["redirectTo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "redirectTo")
        }
      }

      public var hasUrl: Bool? {
        get {
          return resultMap["hasURL"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "hasURL")
        }
      }

      /// 验证码过期时间（单位为秒）
      public var expiresIn: Int? {
        get {
          return resultMap["expiresIn"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "expiresIn")
        }
      }

      /// 是否开启（自定义模版）
      public var enabled: Bool? {
        get {
          return resultMap["enabled"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "enabled")
        }
      }

      /// 是否是系统默认模版
      public var isSystem: Bool? {
        get {
          return resultMap["isSystem"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isSystem")
        }
      }
    }
  }
}

public final class EnableEmailTemplateMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation enableEmailTemplate($type: EmailTemplateType!) {
      enableEmailTemplate(type: $type) {
        __typename
        type
        name
        subject
        sender
        content
        redirectTo
        hasURL
        expiresIn
        enabled
        isSystem
      }
    }
    """

  public let operationName: String = "enableEmailTemplate"

  public var type: EmailTemplateType

  public init(type: EmailTemplateType) {
    self.type = type
  }

  public var variables: GraphQLMap? {
    return ["type": type]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("enableEmailTemplate", arguments: ["type": GraphQLVariable("type")], type: .nonNull(.object(EnableEmailTemplate.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(enableEmailTemplate: EnableEmailTemplate) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "enableEmailTemplate": enableEmailTemplate.resultMap])
    }

    /// 启用自定义邮件模版
    public var enableEmailTemplate: EnableEmailTemplate {
      get {
        return EnableEmailTemplate(unsafeResultMap: resultMap["enableEmailTemplate"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "enableEmailTemplate")
      }
    }

    public struct EnableEmailTemplate: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["EmailTemplate"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("type", type: .nonNull(.scalar(EmailTemplateType.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("subject", type: .nonNull(.scalar(String.self))),
          GraphQLField("sender", type: .nonNull(.scalar(String.self))),
          GraphQLField("content", type: .nonNull(.scalar(String.self))),
          GraphQLField("redirectTo", type: .scalar(String.self)),
          GraphQLField("hasURL", type: .scalar(Bool.self)),
          GraphQLField("expiresIn", type: .scalar(Int.self)),
          GraphQLField("enabled", type: .scalar(Bool.self)),
          GraphQLField("isSystem", type: .scalar(Bool.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(type: EmailTemplateType, name: String, subject: String, sender: String, content: String, redirectTo: String? = nil, hasUrl: Bool? = nil, expiresIn: Int? = nil, enabled: Bool? = nil, isSystem: Bool? = nil) {
        self.init(unsafeResultMap: ["__typename": "EmailTemplate", "type": type, "name": name, "subject": subject, "sender": sender, "content": content, "redirectTo": redirectTo, "hasURL": hasUrl, "expiresIn": expiresIn, "enabled": enabled, "isSystem": isSystem])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 邮件模版类型
      public var type: EmailTemplateType {
        get {
          return resultMap["type"]! as! EmailTemplateType
        }
        set {
          resultMap.updateValue(newValue, forKey: "type")
        }
      }

      /// 模版名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 邮件主题
      public var subject: String {
        get {
          return resultMap["subject"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "subject")
        }
      }

      /// 显示的邮件发送人
      public var sender: String {
        get {
          return resultMap["sender"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "sender")
        }
      }

      /// 邮件模版内容
      public var content: String {
        get {
          return resultMap["content"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "content")
        }
      }

      /// 重定向链接，操作成功后，用户将被重定向到此 URL。
      public var redirectTo: String? {
        get {
          return resultMap["redirectTo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "redirectTo")
        }
      }

      public var hasUrl: Bool? {
        get {
          return resultMap["hasURL"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "hasURL")
        }
      }

      /// 验证码过期时间（单位为秒）
      public var expiresIn: Int? {
        get {
          return resultMap["expiresIn"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "expiresIn")
        }
      }

      /// 是否开启（自定义模版）
      public var enabled: Bool? {
        get {
          return resultMap["enabled"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "enabled")
        }
      }

      /// 是否是系统默认模版
      public var isSystem: Bool? {
        get {
          return resultMap["isSystem"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isSystem")
        }
      }
    }
  }
}

public final class EnablePolicyAssignmentMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation enablePolicyAssignment($policy: String!, $targetType: PolicyAssignmentTargetType!, $targetIdentifier: String!, $namespace: String) {
      enablePolicyAssignment(
        policy: $policy
        targetType: $targetType
        targetIdentifier: $targetIdentifier
        namespace: $namespace
      ) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "enablePolicyAssignment"

  public var policy: String
  public var targetType: PolicyAssignmentTargetType
  public var targetIdentifier: String
  public var namespace: String?

  public init(policy: String, targetType: PolicyAssignmentTargetType, targetIdentifier: String, namespace: String? = nil) {
    self.policy = policy
    self.targetType = targetType
    self.targetIdentifier = targetIdentifier
    self.namespace = namespace
  }

  public var variables: GraphQLMap? {
    return ["policy": policy, "targetType": targetType, "targetIdentifier": targetIdentifier, "namespace": namespace]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("enablePolicyAssignment", arguments: ["policy": GraphQLVariable("policy"), "targetType": GraphQLVariable("targetType"), "targetIdentifier": GraphQLVariable("targetIdentifier"), "namespace": GraphQLVariable("namespace")], type: .nonNull(.object(EnablePolicyAssignment.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(enablePolicyAssignment: EnablePolicyAssignment) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "enablePolicyAssignment": enablePolicyAssignment.resultMap])
    }

    /// 开启授权
    public var enablePolicyAssignment: EnablePolicyAssignment {
      get {
        return EnablePolicyAssignment(unsafeResultMap: resultMap["enablePolicyAssignment"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "enablePolicyAssignment")
      }
    }

    public struct EnablePolicyAssignment: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class EnableSocialConnectionInstanceMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation enableSocialConnectionInstance($provider: String!) {
      enableSocialConnectionInstance(provider: $provider) {
        __typename
        provider
        enabled
        fields {
          __typename
          key
          value
        }
      }
    }
    """

  public let operationName: String = "enableSocialConnectionInstance"

  public var provider: String

  public init(provider: String) {
    self.provider = provider
  }

  public var variables: GraphQLMap? {
    return ["provider": provider]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("enableSocialConnectionInstance", arguments: ["provider": GraphQLVariable("provider")], type: .nonNull(.object(EnableSocialConnectionInstance.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(enableSocialConnectionInstance: EnableSocialConnectionInstance) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "enableSocialConnectionInstance": enableSocialConnectionInstance.resultMap])
    }

    /// 开启社会化登录
    public var enableSocialConnectionInstance: EnableSocialConnectionInstance {
      get {
        return EnableSocialConnectionInstance(unsafeResultMap: resultMap["enableSocialConnectionInstance"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "enableSocialConnectionInstance")
      }
    }

    public struct EnableSocialConnectionInstance: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["SocialConnectionInstance"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("provider", type: .nonNull(.scalar(String.self))),
          GraphQLField("enabled", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("fields", type: .list(.object(Field.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(provider: String, enabled: Bool, fields: [Field?]? = nil) {
        self.init(unsafeResultMap: ["__typename": "SocialConnectionInstance", "provider": provider, "enabled": enabled, "fields": fields.flatMap { (value: [Field?]) -> [ResultMap?] in value.map { (value: Field?) -> ResultMap? in value.flatMap { (value: Field) -> ResultMap in value.resultMap } } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var provider: String {
        get {
          return resultMap["provider"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "provider")
        }
      }

      public var enabled: Bool {
        get {
          return resultMap["enabled"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "enabled")
        }
      }

      public var fields: [Field?]? {
        get {
          return (resultMap["fields"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Field?] in value.map { (value: ResultMap?) -> Field? in value.flatMap { (value: ResultMap) -> Field in Field(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Field?]) -> [ResultMap?] in value.map { (value: Field?) -> ResultMap? in value.flatMap { (value: Field) -> ResultMap in value.resultMap } } }, forKey: "fields")
        }
      }

      public struct Field: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["SocialConnectionInstanceField"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("key", type: .nonNull(.scalar(String.self))),
            GraphQLField("value", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(key: String, value: String) {
          self.init(unsafeResultMap: ["__typename": "SocialConnectionInstanceField", "key": key, "value": value])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var key: String {
          get {
            return resultMap["key"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "key")
          }
        }

        public var value: String {
          get {
            return resultMap["value"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "value")
          }
        }
      }
    }
  }
}

public final class FindUserQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query findUser($email: String, $phone: String, $username: String, $externalId: String, $identity: FindUserByIdentityInput) {
      findUser(
        email: $email
        phone: $phone
        username: $username
        externalId: $externalId
        identity: $identity
      ) {
        __typename
        id
        arn
        userPoolId
        status
        username
        email
        emailVerified
        phone
        phoneVerified
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
        externalId
      }
    }
    """

  public let operationName: String = "findUser"

  public var email: String?
  public var phone: String?
  public var username: String?
  public var externalId: String?
  public var identity: FindUserByIdentityInput?

  public init(email: String? = nil, phone: String? = nil, username: String? = nil, externalId: String? = nil, identity: FindUserByIdentityInput? = nil) {
    self.email = email
    self.phone = phone
    self.username = username
    self.externalId = externalId
    self.identity = identity
  }

  public var variables: GraphQLMap? {
    return ["email": email, "phone": phone, "username": username, "externalId": externalId, "identity": identity]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("findUser", arguments: ["email": GraphQLVariable("email"), "phone": GraphQLVariable("phone"), "username": GraphQLVariable("username"), "externalId": GraphQLVariable("externalId"), "identity": GraphQLVariable("identity")], type: .object(FindUser.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findUser: FindUser? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findUser": findUser.flatMap { (value: FindUser) -> ResultMap in value.resultMap }])
    }

    public var findUser: FindUser? {
      get {
        return (resultMap["findUser"] as? ResultMap).flatMap { FindUser(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "findUser")
      }
    }

    public struct FindUser: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("externalId", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 用户外部 ID
      public var externalId: String? {
        get {
          return resultMap["externalId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "externalId")
        }
      }
    }
  }
}

public final class FindUserWithCustomDataQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query findUserWithCustomData($email: String, $phone: String, $username: String, $externalId: String) {
      findUser(
        email: $email
        phone: $phone
        username: $username
        externalId: $externalId
      ) {
        __typename
        id
        arn
        userPoolId
        status
        username
        email
        emailVerified
        phone
        phoneVerified
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
        externalId
        customData {
          __typename
          key
          value
          dataType
          label
        }
      }
    }
    """

  public let operationName: String = "findUserWithCustomData"

  public var email: String?
  public var phone: String?
  public var username: String?
  public var externalId: String?

  public init(email: String? = nil, phone: String? = nil, username: String? = nil, externalId: String? = nil) {
    self.email = email
    self.phone = phone
    self.username = username
    self.externalId = externalId
  }

  public var variables: GraphQLMap? {
    return ["email": email, "phone": phone, "username": username, "externalId": externalId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("findUser", arguments: ["email": GraphQLVariable("email"), "phone": GraphQLVariable("phone"), "username": GraphQLVariable("username"), "externalId": GraphQLVariable("externalId")], type: .object(FindUser.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(findUser: FindUser? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "findUser": findUser.flatMap { (value: FindUser) -> ResultMap in value.resultMap }])
    }

    public var findUser: FindUser? {
      get {
        return (resultMap["findUser"] as? ResultMap).flatMap { FindUser(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "findUser")
      }
    }

    public struct FindUser: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("externalId", type: .scalar(String.self)),
          GraphQLField("customData", type: .list(.object(CustomDatum.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil, customData: [CustomDatum?]? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId, "customData": customData.flatMap { (value: [CustomDatum?]) -> [ResultMap?] in value.map { (value: CustomDatum?) -> ResultMap? in value.flatMap { (value: CustomDatum) -> ResultMap in value.resultMap } } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 用户外部 ID
      public var externalId: String? {
        get {
          return resultMap["externalId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "externalId")
        }
      }

      /// 用户自定义数据
      public var customData: [CustomDatum?]? {
        get {
          return (resultMap["customData"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [CustomDatum?] in value.map { (value: ResultMap?) -> CustomDatum? in value.flatMap { (value: ResultMap) -> CustomDatum in CustomDatum(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [CustomDatum?]) -> [ResultMap?] in value.map { (value: CustomDatum?) -> ResultMap? in value.flatMap { (value: CustomDatum) -> ResultMap in value.resultMap } } }, forKey: "customData")
        }
      }

      public struct CustomDatum: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["UserCustomData"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("key", type: .nonNull(.scalar(String.self))),
            GraphQLField("value", type: .scalar(String.self)),
            GraphQLField("dataType", type: .nonNull(.scalar(UDFDataType.self))),
            GraphQLField("label", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(key: String, value: String? = nil, dataType: UDFDataType, label: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "UserCustomData", "key": key, "value": value, "dataType": dataType, "label": label])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var key: String {
          get {
            return resultMap["key"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "key")
          }
        }

        public var value: String? {
          get {
            return resultMap["value"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "value")
          }
        }

        public var dataType: UDFDataType {
          get {
            return resultMap["dataType"]! as! UDFDataType
          }
          set {
            resultMap.updateValue(newValue, forKey: "dataType")
          }
        }

        public var label: String? {
          get {
            return resultMap["label"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "label")
          }
        }
      }
    }
  }
}

public final class FunctionQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query function($id: String) {
      function(id: $id) {
        __typename
        id
        name
        sourceCode
        description
        url
      }
    }
    """

  public let operationName: String = "function"

  public var id: String?

  public init(id: String? = nil) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("function", arguments: ["id": GraphQLVariable("id")], type: .object(Function.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(function: Function? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "function": function.flatMap { (value: Function) -> ResultMap in value.resultMap }])
    }

    public var function: Function? {
      get {
        return (resultMap["function"] as? ResultMap).flatMap { Function(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "function")
      }
    }

    public struct Function: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Function"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("sourceCode", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("url", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, name: String, sourceCode: String, description: String? = nil, url: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "Function", "id": id, "name": name, "sourceCode": sourceCode, "description": description, "url": url])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// 函数名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 源代码
      public var sourceCode: String {
        get {
          return resultMap["sourceCode"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "sourceCode")
        }
      }

      /// 描述信息
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 云函数链接
      public var url: String? {
        get {
          return resultMap["url"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "url")
        }
      }
    }
  }
}

public final class FunctionsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query functions($page: Int, $limit: Int, $sortBy: SortByEnum) {
      functions(page: $page, limit: $limit, sortBy: $sortBy) {
        __typename
        list {
          __typename
          id
          name
          sourceCode
          description
          url
        }
        totalCount
      }
    }
    """

  public let operationName: String = "functions"

  public var page: Int?
  public var limit: Int?
  public var sortBy: SortByEnum?

  public init(page: Int? = nil, limit: Int? = nil, sortBy: SortByEnum? = nil) {
    self.page = page
    self.limit = limit
    self.sortBy = sortBy
  }

  public var variables: GraphQLMap? {
    return ["page": page, "limit": limit, "sortBy": sortBy]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("functions", arguments: ["page": GraphQLVariable("page"), "limit": GraphQLVariable("limit"), "sortBy": GraphQLVariable("sortBy")], type: .nonNull(.object(Function.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(functions: Function) {
      self.init(unsafeResultMap: ["__typename": "Query", "functions": functions.resultMap])
    }

    public var functions: Function {
      get {
        return Function(unsafeResultMap: resultMap["functions"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "functions")
      }
    }

    public struct Function: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PaginatedFunctions"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
          GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(list: [List], totalCount: Int) {
        self.init(unsafeResultMap: ["__typename": "PaginatedFunctions", "list": list.map { (value: List) -> ResultMap in value.resultMap }, "totalCount": totalCount])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var list: [List] {
        get {
          return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
        }
      }

      public var totalCount: Int {
        get {
          return resultMap["totalCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "totalCount")
        }
      }

      public struct List: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Function"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(String.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("sourceCode", type: .nonNull(.scalar(String.self))),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("url", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String, name: String, sourceCode: String, description: String? = nil, url: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "Function", "id": id, "name": name, "sourceCode": sourceCode, "description": description, "url": url])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// ID
        public var id: String {
          get {
            return resultMap["id"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        /// 函数名称
        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 源代码
        public var sourceCode: String {
          get {
            return resultMap["sourceCode"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "sourceCode")
          }
        }

        /// 描述信息
        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 云函数链接
        public var url: String? {
          get {
            return resultMap["url"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "url")
          }
        }
      }
    }
  }
}

public final class GetUserDepartmentsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query getUserDepartments($id: String!, $orgId: String) {
      user(id: $id) {
        __typename
        departments(orgId: $orgId) {
          __typename
          totalCount
          list {
            __typename
            department {
              __typename
              id
              orgId
              name
              nameI18n
              description
              descriptionI18n
              order
              code
              root
              depth
              path
              codePath
              namePath
              createdAt
              updatedAt
              children
            }
            isMainDepartment
            joinedAt
          }
        }
      }
    }
    """

  public let operationName: String = "getUserDepartments"

  public var id: String
  public var orgId: String?

  public init(id: String, orgId: String? = nil) {
    self.id = id
    self.orgId = orgId
  }

  public var variables: GraphQLMap? {
    return ["id": id, "orgId": orgId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("user", arguments: ["id": GraphQLVariable("id")], type: .object(User.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(user: User? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }])
    }

    public var user: User? {
      get {
        return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "user")
      }
    }

    public struct User: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("departments", arguments: ["orgId": GraphQLVariable("orgId")], type: .object(Department.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(departments: Department? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "departments": departments.flatMap { (value: Department) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户所在的部门列表
      public var departments: Department? {
        get {
          return (resultMap["departments"] as? ResultMap).flatMap { Department(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "departments")
        }
      }

      public struct Department: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PaginatedDepartments"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
            GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(totalCount: Int, list: [List]) {
          self.init(unsafeResultMap: ["__typename": "PaginatedDepartments", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var totalCount: Int {
          get {
            return resultMap["totalCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalCount")
          }
        }

        public var list: [List] {
          get {
            return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
          }
        }

        public struct List: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["UserDepartment"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("department", type: .nonNull(.object(Department.selections))),
              GraphQLField("isMainDepartment", type: .nonNull(.scalar(Bool.self))),
              GraphQLField("joinedAt", type: .scalar(String.self)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(department: Department, isMainDepartment: Bool, joinedAt: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "UserDepartment", "department": department.resultMap, "isMainDepartment": isMainDepartment, "joinedAt": joinedAt])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var department: Department {
            get {
              return Department(unsafeResultMap: resultMap["department"]! as! ResultMap)
            }
            set {
              resultMap.updateValue(newValue.resultMap, forKey: "department")
            }
          }

          /// 是否为主部门
          public var isMainDepartment: Bool {
            get {
              return resultMap["isMainDepartment"]! as! Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "isMainDepartment")
            }
          }

          /// 加入该部门的时间
          public var joinedAt: String? {
            get {
              return resultMap["joinedAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "joinedAt")
            }
          }

          public struct Department: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["Node"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("id", type: .nonNull(.scalar(String.self))),
                GraphQLField("orgId", type: .scalar(String.self)),
                GraphQLField("name", type: .nonNull(.scalar(String.self))),
                GraphQLField("nameI18n", type: .scalar(String.self)),
                GraphQLField("description", type: .scalar(String.self)),
                GraphQLField("descriptionI18n", type: .scalar(String.self)),
                GraphQLField("order", type: .scalar(Int.self)),
                GraphQLField("code", type: .scalar(String.self)),
                GraphQLField("root", type: .scalar(Bool.self)),
                GraphQLField("depth", type: .scalar(Int.self)),
                GraphQLField("path", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
                GraphQLField("codePath", type: .nonNull(.list(.scalar(String.self)))),
                GraphQLField("namePath", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
                GraphQLField("createdAt", type: .scalar(String.self)),
                GraphQLField("updatedAt", type: .scalar(String.self)),
                GraphQLField("children", type: .list(.nonNull(.scalar(String.self)))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(id: String, orgId: String? = nil, name: String, nameI18n: String? = nil, description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil, root: Bool? = nil, depth: Int? = nil, path: [String], codePath: [String?], namePath: [String], createdAt: String? = nil, updatedAt: String? = nil, children: [String]? = nil) {
              self.init(unsafeResultMap: ["__typename": "Node", "id": id, "orgId": orgId, "name": name, "nameI18n": nameI18n, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code, "root": root, "depth": depth, "path": path, "codePath": codePath, "namePath": namePath, "createdAt": createdAt, "updatedAt": updatedAt, "children": children])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var id: String {
              get {
                return resultMap["id"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "id")
              }
            }

            /// 组织机构 ID
            public var orgId: String? {
              get {
                return resultMap["orgId"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "orgId")
              }
            }

            /// 节点名称
            public var name: String {
              get {
                return resultMap["name"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "name")
              }
            }

            /// 多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。
            public var nameI18n: String? {
              get {
                return resultMap["nameI18n"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "nameI18n")
              }
            }

            /// 描述信息
            public var description: String? {
              get {
                return resultMap["description"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "description")
              }
            }

            /// 多语言描述信息
            public var descriptionI18n: String? {
              get {
                return resultMap["descriptionI18n"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "descriptionI18n")
              }
            }

            /// 在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)
            public var order: Int? {
              get {
                return resultMap["order"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "order")
              }
            }

            /// 节点唯一标志码，可以通过 code 进行搜索
            public var code: String? {
              get {
                return resultMap["code"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "code")
              }
            }

            /// 是否为根节点
            public var root: Bool? {
              get {
                return resultMap["root"] as? Bool
              }
              set {
                resultMap.updateValue(newValue, forKey: "root")
              }
            }

            /// 距离父节点的深度（如果是查询整棵树，返回的 **depth** 为距离根节点的深度，如果是查询某个节点的子节点，返回的 **depth** 指的是距离该节点的深度。）
            public var depth: Int? {
              get {
                return resultMap["depth"] as? Int
              }
              set {
                resultMap.updateValue(newValue, forKey: "depth")
              }
            }

            public var path: [String] {
              get {
                return resultMap["path"]! as! [String]
              }
              set {
                resultMap.updateValue(newValue, forKey: "path")
              }
            }

            public var codePath: [String?] {
              get {
                return resultMap["codePath"]! as! [String?]
              }
              set {
                resultMap.updateValue(newValue, forKey: "codePath")
              }
            }

            public var namePath: [String] {
              get {
                return resultMap["namePath"]! as! [String]
              }
              set {
                resultMap.updateValue(newValue, forKey: "namePath")
              }
            }

            public var createdAt: String? {
              get {
                return resultMap["createdAt"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "createdAt")
              }
            }

            public var updatedAt: String? {
              get {
                return resultMap["updatedAt"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "updatedAt")
              }
            }

            /// 该节点的子节点 **ID** 列表
            public var children: [String]? {
              get {
                return resultMap["children"] as? [String]
              }
              set {
                resultMap.updateValue(newValue, forKey: "children")
              }
            }
          }
        }
      }
    }
  }
}

public final class GetUserGroupsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query getUserGroups($id: String!) {
      user(id: $id) {
        __typename
        groups {
          __typename
          totalCount
          list {
            __typename
            code
            name
            description
            createdAt
            updatedAt
          }
        }
      }
    }
    """

  public let operationName: String = "getUserGroups"

  public var id: String

  public init(id: String) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("user", arguments: ["id": GraphQLVariable("id")], type: .object(User.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(user: User? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }])
    }

    public var user: User? {
      get {
        return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "user")
      }
    }

    public struct User: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("groups", type: .object(Group.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(groups: Group? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "groups": groups.flatMap { (value: Group) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户所在的分组列表
      public var groups: Group? {
        get {
          return (resultMap["groups"] as? ResultMap).flatMap { Group(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "groups")
        }
      }

      public struct Group: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PaginatedGroups"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
            GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(totalCount: Int, list: [List]) {
          self.init(unsafeResultMap: ["__typename": "PaginatedGroups", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var totalCount: Int {
          get {
            return resultMap["totalCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalCount")
          }
        }

        public var list: [List] {
          get {
            return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
          }
        }

        public struct List: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Group"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("code", type: .nonNull(.scalar(String.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("createdAt", type: .scalar(String.self)),
              GraphQLField("updatedAt", type: .scalar(String.self)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(code: String, name: String, description: String? = nil, createdAt: String? = nil, updatedAt: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "Group", "code": code, "name": name, "description": description, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 唯一标志 code
          public var code: String {
            get {
              return resultMap["code"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "code")
            }
          }

          /// 名称
          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 描述
          public var description: String? {
            get {
              return resultMap["description"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "description")
            }
          }

          /// 创建时间
          public var createdAt: String? {
            get {
              return resultMap["createdAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "createdAt")
            }
          }

          /// 修改时间
          public var updatedAt: String? {
            get {
              return resultMap["updatedAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "updatedAt")
            }
          }
        }
      }
    }
  }
}

public final class GetUserRolesQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query getUserRoles($id: String!, $namespace: String) {
      user(id: $id) {
        __typename
        roles(namespace: $namespace) {
          __typename
          totalCount
          list {
            __typename
            id
            code
            namespace
            arn
            description
            createdAt
            updatedAt
            parent {
              __typename
              code
              namespace
              arn
              description
              createdAt
              updatedAt
            }
          }
        }
      }
    }
    """

  public let operationName: String = "getUserRoles"

  public var id: String
  public var namespace: String?

  public init(id: String, namespace: String? = nil) {
    self.id = id
    self.namespace = namespace
  }

  public var variables: GraphQLMap? {
    return ["id": id, "namespace": namespace]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("user", arguments: ["id": GraphQLVariable("id")], type: .object(User.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(user: User? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }])
    }

    public var user: User? {
      get {
        return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "user")
      }
    }

    public struct User: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("roles", arguments: ["namespace": GraphQLVariable("namespace")], type: .object(Role.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(roles: Role? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "roles": roles.flatMap { (value: Role) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户所在的角色列表
      public var roles: Role? {
        get {
          return (resultMap["roles"] as? ResultMap).flatMap { Role(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "roles")
        }
      }

      public struct Role: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PaginatedRoles"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
            GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(totalCount: Int, list: [List]) {
          self.init(unsafeResultMap: ["__typename": "PaginatedRoles", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var totalCount: Int {
          get {
            return resultMap["totalCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalCount")
          }
        }

        public var list: [List] {
          get {
            return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
          }
        }

        public struct List: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Role"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(String.self))),
              GraphQLField("code", type: .nonNull(.scalar(String.self))),
              GraphQLField("namespace", type: .nonNull(.scalar(String.self))),
              GraphQLField("arn", type: .nonNull(.scalar(String.self))),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("createdAt", type: .scalar(String.self)),
              GraphQLField("updatedAt", type: .scalar(String.self)),
              GraphQLField("parent", type: .object(Parent.selections)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: String, code: String, namespace: String, arn: String, description: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, parent: Parent? = nil) {
            self.init(unsafeResultMap: ["__typename": "Role", "id": id, "code": code, "namespace": namespace, "arn": arn, "description": description, "createdAt": createdAt, "updatedAt": updatedAt, "parent": parent.flatMap { (value: Parent) -> ResultMap in value.resultMap }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: String {
            get {
              return resultMap["id"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          /// 唯一标志 code
          public var code: String {
            get {
              return resultMap["code"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "code")
            }
          }

          /// 权限组 code
          public var namespace: String {
            get {
              return resultMap["namespace"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "namespace")
            }
          }

          /// 资源描述符 arn
          public var arn: String {
            get {
              return resultMap["arn"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "arn")
            }
          }

          /// 角色描述
          public var description: String? {
            get {
              return resultMap["description"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "description")
            }
          }

          /// 创建时间
          public var createdAt: String? {
            get {
              return resultMap["createdAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "createdAt")
            }
          }

          /// 修改时间
          public var updatedAt: String? {
            get {
              return resultMap["updatedAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "updatedAt")
            }
          }

          /// 父角色
          public var parent: Parent? {
            get {
              return (resultMap["parent"] as? ResultMap).flatMap { Parent(unsafeResultMap: $0) }
            }
            set {
              resultMap.updateValue(newValue?.resultMap, forKey: "parent")
            }
          }

          public struct Parent: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["Role"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("code", type: .nonNull(.scalar(String.self))),
                GraphQLField("namespace", type: .nonNull(.scalar(String.self))),
                GraphQLField("arn", type: .nonNull(.scalar(String.self))),
                GraphQLField("description", type: .scalar(String.self)),
                GraphQLField("createdAt", type: .scalar(String.self)),
                GraphQLField("updatedAt", type: .scalar(String.self)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(code: String, namespace: String, arn: String, description: String? = nil, createdAt: String? = nil, updatedAt: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "Role", "code": code, "namespace": namespace, "arn": arn, "description": description, "createdAt": createdAt, "updatedAt": updatedAt])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            /// 唯一标志 code
            public var code: String {
              get {
                return resultMap["code"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "code")
              }
            }

            /// 权限组 code
            public var namespace: String {
              get {
                return resultMap["namespace"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "namespace")
              }
            }

            /// 资源描述符 arn
            public var arn: String {
              get {
                return resultMap["arn"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "arn")
              }
            }

            /// 角色描述
            public var description: String? {
              get {
                return resultMap["description"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "description")
              }
            }

            /// 创建时间
            public var createdAt: String? {
              get {
                return resultMap["createdAt"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "createdAt")
              }
            }

            /// 修改时间
            public var updatedAt: String? {
              get {
                return resultMap["updatedAt"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "updatedAt")
              }
            }
          }
        }
      }
    }
  }
}

public final class GroupQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query group($code: String!) {
      group(code: $code) {
        __typename
        code
        name
        description
        createdAt
        updatedAt
      }
    }
    """

  public let operationName: String = "group"

  public var code: String

  public init(code: String) {
    self.code = code
  }

  public var variables: GraphQLMap? {
    return ["code": code]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("group", arguments: ["code": GraphQLVariable("code")], type: .object(Group.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(group: Group? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "group": group.flatMap { (value: Group) -> ResultMap in value.resultMap }])
    }

    public var group: Group? {
      get {
        return (resultMap["group"] as? ResultMap).flatMap { Group(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "group")
      }
    }

    public struct Group: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Group"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("code", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(code: String, name: String, description: String? = nil, createdAt: String? = nil, updatedAt: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "Group", "code": code, "name": name, "description": description, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 唯一标志 code
      public var code: String {
        get {
          return resultMap["code"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      /// 名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 描述
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 创建时间
      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      /// 修改时间
      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }
    }
  }
}

public final class GroupsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query groups($userId: String, $page: Int, $limit: Int, $sortBy: SortByEnum) {
      groups(userId: $userId, page: $page, limit: $limit, sortBy: $sortBy) {
        __typename
        totalCount
        list {
          __typename
          code
          name
          description
          createdAt
          updatedAt
        }
      }
    }
    """

  public let operationName: String = "groups"

  public var userId: String?
  public var page: Int?
  public var limit: Int?
  public var sortBy: SortByEnum?

  public init(userId: String? = nil, page: Int? = nil, limit: Int? = nil, sortBy: SortByEnum? = nil) {
    self.userId = userId
    self.page = page
    self.limit = limit
    self.sortBy = sortBy
  }

  public var variables: GraphQLMap? {
    return ["userId": userId, "page": page, "limit": limit, "sortBy": sortBy]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("groups", arguments: ["userId": GraphQLVariable("userId"), "page": GraphQLVariable("page"), "limit": GraphQLVariable("limit"), "sortBy": GraphQLVariable("sortBy")], type: .nonNull(.object(Group.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(groups: Group) {
      self.init(unsafeResultMap: ["__typename": "Query", "groups": groups.resultMap])
    }

    public var groups: Group {
      get {
        return Group(unsafeResultMap: resultMap["groups"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "groups")
      }
    }

    public struct Group: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PaginatedGroups"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
          GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(totalCount: Int, list: [List]) {
        self.init(unsafeResultMap: ["__typename": "PaginatedGroups", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var totalCount: Int {
        get {
          return resultMap["totalCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "totalCount")
        }
      }

      public var list: [List] {
        get {
          return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
        }
      }

      public struct List: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Group"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("code", type: .nonNull(.scalar(String.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("createdAt", type: .scalar(String.self)),
            GraphQLField("updatedAt", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(code: String, name: String, description: String? = nil, createdAt: String? = nil, updatedAt: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "Group", "code": code, "name": name, "description": description, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 唯一标志 code
        public var code: String {
          get {
            return resultMap["code"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "code")
          }
        }

        /// 名称
        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 描述
        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 创建时间
        public var createdAt: String? {
          get {
            return resultMap["createdAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        /// 修改时间
        public var updatedAt: String? {
          get {
            return resultMap["updatedAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }
      }
    }
  }
}

public final class GroupWithUsersQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query groupWithUsers($code: String!, $page: Int, $limit: Int) {
      group(code: $code) {
        __typename
        users(page: $page, limit: $limit) {
          __typename
          totalCount
          list {
            __typename
            id
            arn
            status
            userPoolId
            username
            email
            emailVerified
            phone
            phoneVerified
            unionid
            openid
            nickname
            registerSource
            photo
            password
            oauth
            token
            tokenExpiredAt
            loginsCount
            lastLogin
            lastIP
            signedUp
            blocked
            isDeleted
            device
            browser
            company
            name
            givenName
            familyName
            middleName
            profile
            preferredUsername
            website
            gender
            birthdate
            zoneinfo
            locale
            address
            formatted
            streetAddress
            locality
            region
            postalCode
            city
            province
            country
            createdAt
            updatedAt
            externalId
          }
        }
      }
    }
    """

  public let operationName: String = "groupWithUsers"

  public var code: String
  public var page: Int?
  public var limit: Int?

  public init(code: String, page: Int? = nil, limit: Int? = nil) {
    self.code = code
    self.page = page
    self.limit = limit
  }

  public var variables: GraphQLMap? {
    return ["code": code, "page": page, "limit": limit]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("group", arguments: ["code": GraphQLVariable("code")], type: .object(Group.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(group: Group? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "group": group.flatMap { (value: Group) -> ResultMap in value.resultMap }])
    }

    public var group: Group? {
      get {
        return (resultMap["group"] as? ResultMap).flatMap { Group(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "group")
      }
    }

    public struct Group: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Group"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("users", arguments: ["page": GraphQLVariable("page"), "limit": GraphQLVariable("limit")], type: .nonNull(.object(User.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(users: User) {
        self.init(unsafeResultMap: ["__typename": "Group", "users": users.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 包含的用户列表
      public var users: User {
        get {
          return User(unsafeResultMap: resultMap["users"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "users")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PaginatedUsers"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
            GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(totalCount: Int, list: [List]) {
          self.init(unsafeResultMap: ["__typename": "PaginatedUsers", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var totalCount: Int {
          get {
            return resultMap["totalCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalCount")
          }
        }

        public var list: [List] {
          get {
            return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
          }
        }

        public struct List: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["User"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(String.self))),
              GraphQLField("arn", type: .nonNull(.scalar(String.self))),
              GraphQLField("status", type: .scalar(UserStatus.self)),
              GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .scalar(String.self)),
              GraphQLField("email", type: .scalar(String.self)),
              GraphQLField("emailVerified", type: .scalar(Bool.self)),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("phoneVerified", type: .scalar(Bool.self)),
              GraphQLField("unionid", type: .scalar(String.self)),
              GraphQLField("openid", type: .scalar(String.self)),
              GraphQLField("nickname", type: .scalar(String.self)),
              GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
              GraphQLField("photo", type: .scalar(String.self)),
              GraphQLField("password", type: .scalar(String.self)),
              GraphQLField("oauth", type: .scalar(String.self)),
              GraphQLField("token", type: .scalar(String.self)),
              GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
              GraphQLField("loginsCount", type: .scalar(Int.self)),
              GraphQLField("lastLogin", type: .scalar(String.self)),
              GraphQLField("lastIP", type: .scalar(String.self)),
              GraphQLField("signedUp", type: .scalar(String.self)),
              GraphQLField("blocked", type: .scalar(Bool.self)),
              GraphQLField("isDeleted", type: .scalar(Bool.self)),
              GraphQLField("device", type: .scalar(String.self)),
              GraphQLField("browser", type: .scalar(String.self)),
              GraphQLField("company", type: .scalar(String.self)),
              GraphQLField("name", type: .scalar(String.self)),
              GraphQLField("givenName", type: .scalar(String.self)),
              GraphQLField("familyName", type: .scalar(String.self)),
              GraphQLField("middleName", type: .scalar(String.self)),
              GraphQLField("profile", type: .scalar(String.self)),
              GraphQLField("preferredUsername", type: .scalar(String.self)),
              GraphQLField("website", type: .scalar(String.self)),
              GraphQLField("gender", type: .scalar(String.self)),
              GraphQLField("birthdate", type: .scalar(String.self)),
              GraphQLField("zoneinfo", type: .scalar(String.self)),
              GraphQLField("locale", type: .scalar(String.self)),
              GraphQLField("address", type: .scalar(String.self)),
              GraphQLField("formatted", type: .scalar(String.self)),
              GraphQLField("streetAddress", type: .scalar(String.self)),
              GraphQLField("locality", type: .scalar(String.self)),
              GraphQLField("region", type: .scalar(String.self)),
              GraphQLField("postalCode", type: .scalar(String.self)),
              GraphQLField("city", type: .scalar(String.self)),
              GraphQLField("province", type: .scalar(String.self)),
              GraphQLField("country", type: .scalar(String.self)),
              GraphQLField("createdAt", type: .scalar(String.self)),
              GraphQLField("updatedAt", type: .scalar(String.self)),
              GraphQLField("externalId", type: .scalar(String.self)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: String, arn: String, status: UserStatus? = nil, userPoolId: String, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "status": status, "userPoolId": userPoolId, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 用户 ID
          public var id: String {
            get {
              return resultMap["id"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          public var arn: String {
            get {
              return resultMap["arn"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "arn")
            }
          }

          /// 用户在组织机构中的状态
          public var status: UserStatus? {
            get {
              return resultMap["status"] as? UserStatus
            }
            set {
              resultMap.updateValue(newValue, forKey: "status")
            }
          }

          /// 用户池 ID
          public var userPoolId: String {
            get {
              return resultMap["userPoolId"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "userPoolId")
            }
          }

          /// 用户名，用户池内唯一
          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }

          /// 邮箱，用户池内唯一
          public var email: String? {
            get {
              return resultMap["email"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "email")
            }
          }

          /// 邮箱是否已验证
          public var emailVerified: Bool? {
            get {
              return resultMap["emailVerified"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "emailVerified")
            }
          }

          /// 手机号，用户池内唯一
          public var phone: String? {
            get {
              return resultMap["phone"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "phone")
            }
          }

          /// 手机号是否已验证
          public var phoneVerified: Bool? {
            get {
              return resultMap["phoneVerified"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "phoneVerified")
            }
          }

          public var unionid: String? {
            get {
              return resultMap["unionid"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "unionid")
            }
          }

          public var openid: String? {
            get {
              return resultMap["openid"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "openid")
            }
          }

          /// 昵称，该字段不唯一。
          public var nickname: String? {
            get {
              return resultMap["nickname"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "nickname")
            }
          }

          /// 注册方式
          public var registerSource: [String]? {
            get {
              return resultMap["registerSource"] as? [String]
            }
            set {
              resultMap.updateValue(newValue, forKey: "registerSource")
            }
          }

          /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
          public var photo: String? {
            get {
              return resultMap["photo"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "photo")
            }
          }

          /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
          public var password: String? {
            get {
              return resultMap["password"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "password")
            }
          }

          /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
          public var oauth: String? {
            get {
              return resultMap["oauth"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "oauth")
            }
          }

          /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
          public var token: String? {
            get {
              return resultMap["token"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "token")
            }
          }

          /// token 过期时间
          public var tokenExpiredAt: String? {
            get {
              return resultMap["tokenExpiredAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
            }
          }

          /// 用户登录总次数
          public var loginsCount: Int? {
            get {
              return resultMap["loginsCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "loginsCount")
            }
          }

          /// 用户最近一次登录时间
          public var lastLogin: String? {
            get {
              return resultMap["lastLogin"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastLogin")
            }
          }

          /// 用户上一次登录时使用的 IP
          public var lastIp: String? {
            get {
              return resultMap["lastIP"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastIP")
            }
          }

          /// 用户注册时间
          public var signedUp: String? {
            get {
              return resultMap["signedUp"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "signedUp")
            }
          }

          /// 该账号是否被禁用
          public var blocked: Bool? {
            get {
              return resultMap["blocked"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "blocked")
            }
          }

          /// 账号是否被软删除
          public var isDeleted: Bool? {
            get {
              return resultMap["isDeleted"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "isDeleted")
            }
          }

          public var device: String? {
            get {
              return resultMap["device"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "device")
            }
          }

          public var browser: String? {
            get {
              return resultMap["browser"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "browser")
            }
          }

          public var company: String? {
            get {
              return resultMap["company"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "company")
            }
          }

          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          public var givenName: String? {
            get {
              return resultMap["givenName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "givenName")
            }
          }

          public var familyName: String? {
            get {
              return resultMap["familyName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "familyName")
            }
          }

          public var middleName: String? {
            get {
              return resultMap["middleName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "middleName")
            }
          }

          public var profile: String? {
            get {
              return resultMap["profile"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "profile")
            }
          }

          public var preferredUsername: String? {
            get {
              return resultMap["preferredUsername"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "preferredUsername")
            }
          }

          public var website: String? {
            get {
              return resultMap["website"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "website")
            }
          }

          public var gender: String? {
            get {
              return resultMap["gender"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "gender")
            }
          }

          public var birthdate: String? {
            get {
              return resultMap["birthdate"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "birthdate")
            }
          }

          public var zoneinfo: String? {
            get {
              return resultMap["zoneinfo"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "zoneinfo")
            }
          }

          public var locale: String? {
            get {
              return resultMap["locale"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "locale")
            }
          }

          public var address: String? {
            get {
              return resultMap["address"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var formatted: String? {
            get {
              return resultMap["formatted"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "formatted")
            }
          }

          public var streetAddress: String? {
            get {
              return resultMap["streetAddress"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "streetAddress")
            }
          }

          public var locality: String? {
            get {
              return resultMap["locality"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "locality")
            }
          }

          public var region: String? {
            get {
              return resultMap["region"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "region")
            }
          }

          public var postalCode: String? {
            get {
              return resultMap["postalCode"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "postalCode")
            }
          }

          public var city: String? {
            get {
              return resultMap["city"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "city")
            }
          }

          public var province: String? {
            get {
              return resultMap["province"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "province")
            }
          }

          public var country: String? {
            get {
              return resultMap["country"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "country")
            }
          }

          public var createdAt: String? {
            get {
              return resultMap["createdAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String? {
            get {
              return resultMap["updatedAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "updatedAt")
            }
          }

          /// 用户外部 ID
          public var externalId: String? {
            get {
              return resultMap["externalId"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "externalId")
            }
          }
        }
      }
    }
  }
}

public final class GroupWithUsersWithCustomDataQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query groupWithUsersWithCustomData($code: String!, $page: Int, $limit: Int) {
      group(code: $code) {
        __typename
        users(page: $page, limit: $limit) {
          __typename
          totalCount
          list {
            __typename
            id
            arn
            status
            userPoolId
            username
            email
            emailVerified
            phone
            phoneVerified
            unionid
            openid
            nickname
            registerSource
            photo
            password
            oauth
            token
            tokenExpiredAt
            loginsCount
            lastLogin
            lastIP
            signedUp
            blocked
            isDeleted
            device
            browser
            company
            name
            givenName
            familyName
            middleName
            profile
            preferredUsername
            website
            gender
            birthdate
            zoneinfo
            locale
            address
            formatted
            streetAddress
            locality
            region
            postalCode
            city
            province
            country
            createdAt
            updatedAt
            externalId
            customData {
              __typename
              key
              value
              dataType
              label
            }
          }
        }
      }
    }
    """

  public let operationName: String = "groupWithUsersWithCustomData"

  public var code: String
  public var page: Int?
  public var limit: Int?

  public init(code: String, page: Int? = nil, limit: Int? = nil) {
    self.code = code
    self.page = page
    self.limit = limit
  }

  public var variables: GraphQLMap? {
    return ["code": code, "page": page, "limit": limit]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("group", arguments: ["code": GraphQLVariable("code")], type: .object(Group.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(group: Group? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "group": group.flatMap { (value: Group) -> ResultMap in value.resultMap }])
    }

    public var group: Group? {
      get {
        return (resultMap["group"] as? ResultMap).flatMap { Group(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "group")
      }
    }

    public struct Group: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Group"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("users", arguments: ["page": GraphQLVariable("page"), "limit": GraphQLVariable("limit")], type: .nonNull(.object(User.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(users: User) {
        self.init(unsafeResultMap: ["__typename": "Group", "users": users.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 包含的用户列表
      public var users: User {
        get {
          return User(unsafeResultMap: resultMap["users"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "users")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PaginatedUsers"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
            GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(totalCount: Int, list: [List]) {
          self.init(unsafeResultMap: ["__typename": "PaginatedUsers", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var totalCount: Int {
          get {
            return resultMap["totalCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalCount")
          }
        }

        public var list: [List] {
          get {
            return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
          }
        }

        public struct List: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["User"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(String.self))),
              GraphQLField("arn", type: .nonNull(.scalar(String.self))),
              GraphQLField("status", type: .scalar(UserStatus.self)),
              GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .scalar(String.self)),
              GraphQLField("email", type: .scalar(String.self)),
              GraphQLField("emailVerified", type: .scalar(Bool.self)),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("phoneVerified", type: .scalar(Bool.self)),
              GraphQLField("unionid", type: .scalar(String.self)),
              GraphQLField("openid", type: .scalar(String.self)),
              GraphQLField("nickname", type: .scalar(String.self)),
              GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
              GraphQLField("photo", type: .scalar(String.self)),
              GraphQLField("password", type: .scalar(String.self)),
              GraphQLField("oauth", type: .scalar(String.self)),
              GraphQLField("token", type: .scalar(String.self)),
              GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
              GraphQLField("loginsCount", type: .scalar(Int.self)),
              GraphQLField("lastLogin", type: .scalar(String.self)),
              GraphQLField("lastIP", type: .scalar(String.self)),
              GraphQLField("signedUp", type: .scalar(String.self)),
              GraphQLField("blocked", type: .scalar(Bool.self)),
              GraphQLField("isDeleted", type: .scalar(Bool.self)),
              GraphQLField("device", type: .scalar(String.self)),
              GraphQLField("browser", type: .scalar(String.self)),
              GraphQLField("company", type: .scalar(String.self)),
              GraphQLField("name", type: .scalar(String.self)),
              GraphQLField("givenName", type: .scalar(String.self)),
              GraphQLField("familyName", type: .scalar(String.self)),
              GraphQLField("middleName", type: .scalar(String.self)),
              GraphQLField("profile", type: .scalar(String.self)),
              GraphQLField("preferredUsername", type: .scalar(String.self)),
              GraphQLField("website", type: .scalar(String.self)),
              GraphQLField("gender", type: .scalar(String.self)),
              GraphQLField("birthdate", type: .scalar(String.self)),
              GraphQLField("zoneinfo", type: .scalar(String.self)),
              GraphQLField("locale", type: .scalar(String.self)),
              GraphQLField("address", type: .scalar(String.self)),
              GraphQLField("formatted", type: .scalar(String.self)),
              GraphQLField("streetAddress", type: .scalar(String.self)),
              GraphQLField("locality", type: .scalar(String.self)),
              GraphQLField("region", type: .scalar(String.self)),
              GraphQLField("postalCode", type: .scalar(String.self)),
              GraphQLField("city", type: .scalar(String.self)),
              GraphQLField("province", type: .scalar(String.self)),
              GraphQLField("country", type: .scalar(String.self)),
              GraphQLField("createdAt", type: .scalar(String.self)),
              GraphQLField("updatedAt", type: .scalar(String.self)),
              GraphQLField("externalId", type: .scalar(String.self)),
              GraphQLField("customData", type: .list(.object(CustomDatum.selections))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: String, arn: String, status: UserStatus? = nil, userPoolId: String, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil, customData: [CustomDatum?]? = nil) {
            self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "status": status, "userPoolId": userPoolId, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId, "customData": customData.flatMap { (value: [CustomDatum?]) -> [ResultMap?] in value.map { (value: CustomDatum?) -> ResultMap? in value.flatMap { (value: CustomDatum) -> ResultMap in value.resultMap } } }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 用户 ID
          public var id: String {
            get {
              return resultMap["id"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          public var arn: String {
            get {
              return resultMap["arn"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "arn")
            }
          }

          /// 用户在组织机构中的状态
          public var status: UserStatus? {
            get {
              return resultMap["status"] as? UserStatus
            }
            set {
              resultMap.updateValue(newValue, forKey: "status")
            }
          }

          /// 用户池 ID
          public var userPoolId: String {
            get {
              return resultMap["userPoolId"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "userPoolId")
            }
          }

          /// 用户名，用户池内唯一
          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }

          /// 邮箱，用户池内唯一
          public var email: String? {
            get {
              return resultMap["email"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "email")
            }
          }

          /// 邮箱是否已验证
          public var emailVerified: Bool? {
            get {
              return resultMap["emailVerified"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "emailVerified")
            }
          }

          /// 手机号，用户池内唯一
          public var phone: String? {
            get {
              return resultMap["phone"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "phone")
            }
          }

          /// 手机号是否已验证
          public var phoneVerified: Bool? {
            get {
              return resultMap["phoneVerified"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "phoneVerified")
            }
          }

          public var unionid: String? {
            get {
              return resultMap["unionid"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "unionid")
            }
          }

          public var openid: String? {
            get {
              return resultMap["openid"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "openid")
            }
          }

          /// 昵称，该字段不唯一。
          public var nickname: String? {
            get {
              return resultMap["nickname"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "nickname")
            }
          }

          /// 注册方式
          public var registerSource: [String]? {
            get {
              return resultMap["registerSource"] as? [String]
            }
            set {
              resultMap.updateValue(newValue, forKey: "registerSource")
            }
          }

          /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
          public var photo: String? {
            get {
              return resultMap["photo"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "photo")
            }
          }

          /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
          public var password: String? {
            get {
              return resultMap["password"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "password")
            }
          }

          /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
          public var oauth: String? {
            get {
              return resultMap["oauth"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "oauth")
            }
          }

          /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
          public var token: String? {
            get {
              return resultMap["token"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "token")
            }
          }

          /// token 过期时间
          public var tokenExpiredAt: String? {
            get {
              return resultMap["tokenExpiredAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
            }
          }

          /// 用户登录总次数
          public var loginsCount: Int? {
            get {
              return resultMap["loginsCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "loginsCount")
            }
          }

          /// 用户最近一次登录时间
          public var lastLogin: String? {
            get {
              return resultMap["lastLogin"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastLogin")
            }
          }

          /// 用户上一次登录时使用的 IP
          public var lastIp: String? {
            get {
              return resultMap["lastIP"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastIP")
            }
          }

          /// 用户注册时间
          public var signedUp: String? {
            get {
              return resultMap["signedUp"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "signedUp")
            }
          }

          /// 该账号是否被禁用
          public var blocked: Bool? {
            get {
              return resultMap["blocked"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "blocked")
            }
          }

          /// 账号是否被软删除
          public var isDeleted: Bool? {
            get {
              return resultMap["isDeleted"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "isDeleted")
            }
          }

          public var device: String? {
            get {
              return resultMap["device"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "device")
            }
          }

          public var browser: String? {
            get {
              return resultMap["browser"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "browser")
            }
          }

          public var company: String? {
            get {
              return resultMap["company"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "company")
            }
          }

          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          public var givenName: String? {
            get {
              return resultMap["givenName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "givenName")
            }
          }

          public var familyName: String? {
            get {
              return resultMap["familyName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "familyName")
            }
          }

          public var middleName: String? {
            get {
              return resultMap["middleName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "middleName")
            }
          }

          public var profile: String? {
            get {
              return resultMap["profile"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "profile")
            }
          }

          public var preferredUsername: String? {
            get {
              return resultMap["preferredUsername"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "preferredUsername")
            }
          }

          public var website: String? {
            get {
              return resultMap["website"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "website")
            }
          }

          public var gender: String? {
            get {
              return resultMap["gender"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "gender")
            }
          }

          public var birthdate: String? {
            get {
              return resultMap["birthdate"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "birthdate")
            }
          }

          public var zoneinfo: String? {
            get {
              return resultMap["zoneinfo"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "zoneinfo")
            }
          }

          public var locale: String? {
            get {
              return resultMap["locale"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "locale")
            }
          }

          public var address: String? {
            get {
              return resultMap["address"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var formatted: String? {
            get {
              return resultMap["formatted"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "formatted")
            }
          }

          public var streetAddress: String? {
            get {
              return resultMap["streetAddress"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "streetAddress")
            }
          }

          public var locality: String? {
            get {
              return resultMap["locality"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "locality")
            }
          }

          public var region: String? {
            get {
              return resultMap["region"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "region")
            }
          }

          public var postalCode: String? {
            get {
              return resultMap["postalCode"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "postalCode")
            }
          }

          public var city: String? {
            get {
              return resultMap["city"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "city")
            }
          }

          public var province: String? {
            get {
              return resultMap["province"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "province")
            }
          }

          public var country: String? {
            get {
              return resultMap["country"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "country")
            }
          }

          public var createdAt: String? {
            get {
              return resultMap["createdAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String? {
            get {
              return resultMap["updatedAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "updatedAt")
            }
          }

          /// 用户外部 ID
          public var externalId: String? {
            get {
              return resultMap["externalId"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "externalId")
            }
          }

          /// 用户自定义数据
          public var customData: [CustomDatum?]? {
            get {
              return (resultMap["customData"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [CustomDatum?] in value.map { (value: ResultMap?) -> CustomDatum? in value.flatMap { (value: ResultMap) -> CustomDatum in CustomDatum(unsafeResultMap: value) } } }
            }
            set {
              resultMap.updateValue(newValue.flatMap { (value: [CustomDatum?]) -> [ResultMap?] in value.map { (value: CustomDatum?) -> ResultMap? in value.flatMap { (value: CustomDatum) -> ResultMap in value.resultMap } } }, forKey: "customData")
            }
          }

          public struct CustomDatum: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["UserCustomData"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("key", type: .nonNull(.scalar(String.self))),
                GraphQLField("value", type: .scalar(String.self)),
                GraphQLField("dataType", type: .nonNull(.scalar(UDFDataType.self))),
                GraphQLField("label", type: .scalar(String.self)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(key: String, value: String? = nil, dataType: UDFDataType, label: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "UserCustomData", "key": key, "value": value, "dataType": dataType, "label": label])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var key: String {
              get {
                return resultMap["key"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "key")
              }
            }

            public var value: String? {
              get {
                return resultMap["value"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "value")
              }
            }

            public var dataType: UDFDataType {
              get {
                return resultMap["dataType"]! as! UDFDataType
              }
              set {
                resultMap.updateValue(newValue, forKey: "dataType")
              }
            }

            public var label: String? {
              get {
                return resultMap["label"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "label")
              }
            }
          }
        }
      }
    }
  }
}

public final class IsActionAllowedQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query isActionAllowed($resource: String!, $action: String!, $userId: String!, $namespace: String) {
      isActionAllowed(
        resource: $resource
        action: $action
        userId: $userId
        namespace: $namespace
      )
    }
    """

  public let operationName: String = "isActionAllowed"

  public var resource: String
  public var action: String
  public var userId: String
  public var namespace: String?

  public init(resource: String, action: String, userId: String, namespace: String? = nil) {
    self.resource = resource
    self.action = action
    self.userId = userId
    self.namespace = namespace
  }

  public var variables: GraphQLMap? {
    return ["resource": resource, "action": action, "userId": userId, "namespace": namespace]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("isActionAllowed", arguments: ["resource": GraphQLVariable("resource"), "action": GraphQLVariable("action"), "userId": GraphQLVariable("userId"), "namespace": GraphQLVariable("namespace")], type: .nonNull(.scalar(Bool.self))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(isActionAllowed: Bool) {
      self.init(unsafeResultMap: ["__typename": "Query", "isActionAllowed": isActionAllowed])
    }

    public var isActionAllowed: Bool {
      get {
        return resultMap["isActionAllowed"]! as! Bool
      }
      set {
        resultMap.updateValue(newValue, forKey: "isActionAllowed")
      }
    }
  }
}

public final class IsActionDeniedQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query isActionDenied($resource: String!, $action: String!, $userId: String!) {
      isActionDenied(resource: $resource, action: $action, userId: $userId)
    }
    """

  public let operationName: String = "isActionDenied"

  public var resource: String
  public var action: String
  public var userId: String

  public init(resource: String, action: String, userId: String) {
    self.resource = resource
    self.action = action
    self.userId = userId
  }

  public var variables: GraphQLMap? {
    return ["resource": resource, "action": action, "userId": userId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("isActionDenied", arguments: ["resource": GraphQLVariable("resource"), "action": GraphQLVariable("action"), "userId": GraphQLVariable("userId")], type: .nonNull(.scalar(Bool.self))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(isActionDenied: Bool) {
      self.init(unsafeResultMap: ["__typename": "Query", "isActionDenied": isActionDenied])
    }

    public var isActionDenied: Bool {
      get {
        return resultMap["isActionDenied"]! as! Bool
      }
      set {
        resultMap.updateValue(newValue, forKey: "isActionDenied")
      }
    }
  }
}

public final class IsDomainAvaliableQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query isDomainAvaliable($domain: String!) {
      isDomainAvaliable(domain: $domain)
    }
    """

  public let operationName: String = "isDomainAvaliable"

  public var domain: String

  public init(domain: String) {
    self.domain = domain
  }

  public var variables: GraphQLMap? {
    return ["domain": domain]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("isDomainAvaliable", arguments: ["domain": GraphQLVariable("domain")], type: .scalar(Bool.self)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(isDomainAvaliable: Bool? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "isDomainAvaliable": isDomainAvaliable])
    }

    public var isDomainAvaliable: Bool? {
      get {
        return resultMap["isDomainAvaliable"] as? Bool
      }
      set {
        resultMap.updateValue(newValue, forKey: "isDomainAvaliable")
      }
    }
  }
}

public final class IsRootNodeQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query isRootNode($nodeId: String!, $orgId: String!) {
      isRootNode(nodeId: $nodeId, orgId: $orgId)
    }
    """

  public let operationName: String = "isRootNode"

  public var nodeId: String
  public var orgId: String

  public init(nodeId: String, orgId: String) {
    self.nodeId = nodeId
    self.orgId = orgId
  }

  public var variables: GraphQLMap? {
    return ["nodeId": nodeId, "orgId": orgId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("isRootNode", arguments: ["nodeId": GraphQLVariable("nodeId"), "orgId": GraphQLVariable("orgId")], type: .scalar(Bool.self)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(isRootNode: Bool? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "isRootNode": isRootNode])
    }

    public var isRootNode: Bool? {
      get {
        return resultMap["isRootNode"] as? Bool
      }
      set {
        resultMap.updateValue(newValue, forKey: "isRootNode")
      }
    }
  }
}

public final class IsUserExistsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query isUserExists($email: String, $phone: String, $username: String, $externalId: String) {
      isUserExists(
        email: $email
        phone: $phone
        username: $username
        externalId: $externalId
      )
    }
    """

  public let operationName: String = "isUserExists"

  public var email: String?
  public var phone: String?
  public var username: String?
  public var externalId: String?

  public init(email: String? = nil, phone: String? = nil, username: String? = nil, externalId: String? = nil) {
    self.email = email
    self.phone = phone
    self.username = username
    self.externalId = externalId
  }

  public var variables: GraphQLMap? {
    return ["email": email, "phone": phone, "username": username, "externalId": externalId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("isUserExists", arguments: ["email": GraphQLVariable("email"), "phone": GraphQLVariable("phone"), "username": GraphQLVariable("username"), "externalId": GraphQLVariable("externalId")], type: .scalar(Bool.self)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(isUserExists: Bool? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "isUserExists": isUserExists])
    }

    public var isUserExists: Bool? {
      get {
        return resultMap["isUserExists"] as? Bool
      }
      set {
        resultMap.updateValue(newValue, forKey: "isUserExists")
      }
    }
  }
}

public final class AuthorizedResourcesQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query authorizedResources($targetType: PolicyAssignmentTargetType, $targetIdentifier: String, $namespace: String, $resourceType: String) {
      authorizedResources(
        targetType: $targetType
        targetIdentifier: $targetIdentifier
        namespace: $namespace
        resourceType: $resourceType
      ) {
        __typename
        totalCount
        list {
          __typename
          code
          type
          actions
        }
      }
    }
    """

  public let operationName: String = "authorizedResources"

  public var targetType: PolicyAssignmentTargetType?
  public var targetIdentifier: String?
  public var namespace: String?
  public var resourceType: String?

  public init(targetType: PolicyAssignmentTargetType? = nil, targetIdentifier: String? = nil, namespace: String? = nil, resourceType: String? = nil) {
    self.targetType = targetType
    self.targetIdentifier = targetIdentifier
    self.namespace = namespace
    self.resourceType = resourceType
  }

  public var variables: GraphQLMap? {
    return ["targetType": targetType, "targetIdentifier": targetIdentifier, "namespace": namespace, "resourceType": resourceType]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("authorizedResources", arguments: ["targetType": GraphQLVariable("targetType"), "targetIdentifier": GraphQLVariable("targetIdentifier"), "namespace": GraphQLVariable("namespace"), "resourceType": GraphQLVariable("resourceType")], type: .object(AuthorizedResource.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(authorizedResources: AuthorizedResource? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "authorizedResources": authorizedResources.flatMap { (value: AuthorizedResource) -> ResultMap in value.resultMap }])
    }

    /// 获取一个对象被授权的资源列表
    public var authorizedResources: AuthorizedResource? {
      get {
        return (resultMap["authorizedResources"] as? ResultMap).flatMap { AuthorizedResource(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "authorizedResources")
      }
    }

    public struct AuthorizedResource: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PaginatedAuthorizedResources"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
          GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(totalCount: Int, list: [List]) {
        self.init(unsafeResultMap: ["__typename": "PaginatedAuthorizedResources", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var totalCount: Int {
        get {
          return resultMap["totalCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "totalCount")
        }
      }

      public var list: [List] {
        get {
          return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
        }
      }

      public struct List: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["AuthorizedResource"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("code", type: .nonNull(.scalar(String.self))),
            GraphQLField("type", type: .scalar(ResourceType.self)),
            GraphQLField("actions", type: .list(.nonNull(.scalar(String.self)))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(code: String, type: ResourceType? = nil, actions: [String]? = nil) {
          self.init(unsafeResultMap: ["__typename": "AuthorizedResource", "code": code, "type": type, "actions": actions])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var code: String {
          get {
            return resultMap["code"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "code")
          }
        }

        public var type: ResourceType? {
          get {
            return resultMap["type"] as? ResourceType
          }
          set {
            resultMap.updateValue(newValue, forKey: "type")
          }
        }

        public var actions: [String]? {
          get {
            return resultMap["actions"] as? [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "actions")
          }
        }
      }
    }
  }
}

public final class ListGroupAuthorizedResourcesQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query listGroupAuthorizedResources($code: String!, $namespace: String, $resourceType: String) {
      group(code: $code) {
        __typename
        authorizedResources(namespace: $namespace, resourceType: $resourceType) {
          __typename
          totalCount
          list {
            __typename
            code
            type
            actions
          }
        }
      }
    }
    """

  public let operationName: String = "listGroupAuthorizedResources"

  public var code: String
  public var namespace: String?
  public var resourceType: String?

  public init(code: String, namespace: String? = nil, resourceType: String? = nil) {
    self.code = code
    self.namespace = namespace
    self.resourceType = resourceType
  }

  public var variables: GraphQLMap? {
    return ["code": code, "namespace": namespace, "resourceType": resourceType]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("group", arguments: ["code": GraphQLVariable("code")], type: .object(Group.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(group: Group? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "group": group.flatMap { (value: Group) -> ResultMap in value.resultMap }])
    }

    public var group: Group? {
      get {
        return (resultMap["group"] as? ResultMap).flatMap { Group(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "group")
      }
    }

    public struct Group: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Group"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("authorizedResources", arguments: ["namespace": GraphQLVariable("namespace"), "resourceType": GraphQLVariable("resourceType")], type: .object(AuthorizedResource.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(authorizedResources: AuthorizedResource? = nil) {
        self.init(unsafeResultMap: ["__typename": "Group", "authorizedResources": authorizedResources.flatMap { (value: AuthorizedResource) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 被授权访问的所有资源
      public var authorizedResources: AuthorizedResource? {
        get {
          return (resultMap["authorizedResources"] as? ResultMap).flatMap { AuthorizedResource(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "authorizedResources")
        }
      }

      public struct AuthorizedResource: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PaginatedAuthorizedResources"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
            GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(totalCount: Int, list: [List]) {
          self.init(unsafeResultMap: ["__typename": "PaginatedAuthorizedResources", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var totalCount: Int {
          get {
            return resultMap["totalCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalCount")
          }
        }

        public var list: [List] {
          get {
            return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
          }
        }

        public struct List: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["AuthorizedResource"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("code", type: .nonNull(.scalar(String.self))),
              GraphQLField("type", type: .scalar(ResourceType.self)),
              GraphQLField("actions", type: .list(.nonNull(.scalar(String.self)))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(code: String, type: ResourceType? = nil, actions: [String]? = nil) {
            self.init(unsafeResultMap: ["__typename": "AuthorizedResource", "code": code, "type": type, "actions": actions])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var code: String {
            get {
              return resultMap["code"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "code")
            }
          }

          public var type: ResourceType? {
            get {
              return resultMap["type"] as? ResourceType
            }
            set {
              resultMap.updateValue(newValue, forKey: "type")
            }
          }

          public var actions: [String]? {
            get {
              return resultMap["actions"] as? [String]
            }
            set {
              resultMap.updateValue(newValue, forKey: "actions")
            }
          }
        }
      }
    }
  }
}

public final class ListNodeByCodeAuthorizedResourcesQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query listNodeByCodeAuthorizedResources($orgId: String!, $code: String!, $namespace: String, $resourceType: String) {
      nodeByCode(orgId: $orgId, code: $code) {
        __typename
        authorizedResources(namespace: $namespace, resourceType: $resourceType) {
          __typename
          totalCount
          list {
            __typename
            code
            type
            actions
          }
        }
      }
    }
    """

  public let operationName: String = "listNodeByCodeAuthorizedResources"

  public var orgId: String
  public var code: String
  public var namespace: String?
  public var resourceType: String?

  public init(orgId: String, code: String, namespace: String? = nil, resourceType: String? = nil) {
    self.orgId = orgId
    self.code = code
    self.namespace = namespace
    self.resourceType = resourceType
  }

  public var variables: GraphQLMap? {
    return ["orgId": orgId, "code": code, "namespace": namespace, "resourceType": resourceType]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("nodeByCode", arguments: ["orgId": GraphQLVariable("orgId"), "code": GraphQLVariable("code")], type: .object(NodeByCode.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(nodeByCode: NodeByCode? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "nodeByCode": nodeByCode.flatMap { (value: NodeByCode) -> ResultMap in value.resultMap }])
    }

    /// 通过 code 查询节点
    public var nodeByCode: NodeByCode? {
      get {
        return (resultMap["nodeByCode"] as? ResultMap).flatMap { NodeByCode(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "nodeByCode")
      }
    }

    public struct NodeByCode: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Node"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("authorizedResources", arguments: ["namespace": GraphQLVariable("namespace"), "resourceType": GraphQLVariable("resourceType")], type: .object(AuthorizedResource.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(authorizedResources: AuthorizedResource? = nil) {
        self.init(unsafeResultMap: ["__typename": "Node", "authorizedResources": authorizedResources.flatMap { (value: AuthorizedResource) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 被授权访问的所有资源
      public var authorizedResources: AuthorizedResource? {
        get {
          return (resultMap["authorizedResources"] as? ResultMap).flatMap { AuthorizedResource(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "authorizedResources")
        }
      }

      public struct AuthorizedResource: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PaginatedAuthorizedResources"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
            GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(totalCount: Int, list: [List]) {
          self.init(unsafeResultMap: ["__typename": "PaginatedAuthorizedResources", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var totalCount: Int {
          get {
            return resultMap["totalCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalCount")
          }
        }

        public var list: [List] {
          get {
            return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
          }
        }

        public struct List: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["AuthorizedResource"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("code", type: .nonNull(.scalar(String.self))),
              GraphQLField("type", type: .scalar(ResourceType.self)),
              GraphQLField("actions", type: .list(.nonNull(.scalar(String.self)))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(code: String, type: ResourceType? = nil, actions: [String]? = nil) {
            self.init(unsafeResultMap: ["__typename": "AuthorizedResource", "code": code, "type": type, "actions": actions])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var code: String {
            get {
              return resultMap["code"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "code")
            }
          }

          public var type: ResourceType? {
            get {
              return resultMap["type"] as? ResourceType
            }
            set {
              resultMap.updateValue(newValue, forKey: "type")
            }
          }

          public var actions: [String]? {
            get {
              return resultMap["actions"] as? [String]
            }
            set {
              resultMap.updateValue(newValue, forKey: "actions")
            }
          }
        }
      }
    }
  }
}

public final class ListNodeByIdAuthorizedResourcesQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query listNodeByIdAuthorizedResources($id: String!, $namespace: String, $resourceType: String) {
      nodeById(id: $id) {
        __typename
        authorizedResources(namespace: $namespace, resourceType: $resourceType) {
          __typename
          totalCount
          list {
            __typename
            code
            type
            actions
          }
        }
      }
    }
    """

  public let operationName: String = "listNodeByIdAuthorizedResources"

  public var id: String
  public var namespace: String?
  public var resourceType: String?

  public init(id: String, namespace: String? = nil, resourceType: String? = nil) {
    self.id = id
    self.namespace = namespace
    self.resourceType = resourceType
  }

  public var variables: GraphQLMap? {
    return ["id": id, "namespace": namespace, "resourceType": resourceType]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("nodeById", arguments: ["id": GraphQLVariable("id")], type: .object(NodeById.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(nodeById: NodeById? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "nodeById": nodeById.flatMap { (value: NodeById) -> ResultMap in value.resultMap }])
    }

    public var nodeById: NodeById? {
      get {
        return (resultMap["nodeById"] as? ResultMap).flatMap { NodeById(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "nodeById")
      }
    }

    public struct NodeById: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Node"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("authorizedResources", arguments: ["namespace": GraphQLVariable("namespace"), "resourceType": GraphQLVariable("resourceType")], type: .object(AuthorizedResource.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(authorizedResources: AuthorizedResource? = nil) {
        self.init(unsafeResultMap: ["__typename": "Node", "authorizedResources": authorizedResources.flatMap { (value: AuthorizedResource) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 被授权访问的所有资源
      public var authorizedResources: AuthorizedResource? {
        get {
          return (resultMap["authorizedResources"] as? ResultMap).flatMap { AuthorizedResource(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "authorizedResources")
        }
      }

      public struct AuthorizedResource: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PaginatedAuthorizedResources"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
            GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(totalCount: Int, list: [List]) {
          self.init(unsafeResultMap: ["__typename": "PaginatedAuthorizedResources", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var totalCount: Int {
          get {
            return resultMap["totalCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalCount")
          }
        }

        public var list: [List] {
          get {
            return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
          }
        }

        public struct List: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["AuthorizedResource"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("code", type: .nonNull(.scalar(String.self))),
              GraphQLField("type", type: .scalar(ResourceType.self)),
              GraphQLField("actions", type: .list(.nonNull(.scalar(String.self)))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(code: String, type: ResourceType? = nil, actions: [String]? = nil) {
            self.init(unsafeResultMap: ["__typename": "AuthorizedResource", "code": code, "type": type, "actions": actions])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var code: String {
            get {
              return resultMap["code"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "code")
            }
          }

          public var type: ResourceType? {
            get {
              return resultMap["type"] as? ResourceType
            }
            set {
              resultMap.updateValue(newValue, forKey: "type")
            }
          }

          public var actions: [String]? {
            get {
              return resultMap["actions"] as? [String]
            }
            set {
              resultMap.updateValue(newValue, forKey: "actions")
            }
          }
        }
      }
    }
  }
}

public final class ListRoleAuthorizedResourcesQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query listRoleAuthorizedResources($code: String!, $namespace: String, $resourceType: String) {
      role(code: $code, namespace: $namespace) {
        __typename
        authorizedResources(resourceType: $resourceType) {
          __typename
          totalCount
          list {
            __typename
            code
            type
            actions
          }
        }
      }
    }
    """

  public let operationName: String = "listRoleAuthorizedResources"

  public var code: String
  public var namespace: String?
  public var resourceType: String?

  public init(code: String, namespace: String? = nil, resourceType: String? = nil) {
    self.code = code
    self.namespace = namespace
    self.resourceType = resourceType
  }

  public var variables: GraphQLMap? {
    return ["code": code, "namespace": namespace, "resourceType": resourceType]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("role", arguments: ["code": GraphQLVariable("code"), "namespace": GraphQLVariable("namespace")], type: .object(Role.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(role: Role? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "role": role.flatMap { (value: Role) -> ResultMap in value.resultMap }])
    }

    /// 通过 **code** 查询角色详情
    public var role: Role? {
      get {
        return (resultMap["role"] as? ResultMap).flatMap { Role(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "role")
      }
    }

    public struct Role: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Role"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("authorizedResources", arguments: ["resourceType": GraphQLVariable("resourceType")], type: .object(AuthorizedResource.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(authorizedResources: AuthorizedResource? = nil) {
        self.init(unsafeResultMap: ["__typename": "Role", "authorizedResources": authorizedResources.flatMap { (value: AuthorizedResource) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 被授权访问的所有资源
      public var authorizedResources: AuthorizedResource? {
        get {
          return (resultMap["authorizedResources"] as? ResultMap).flatMap { AuthorizedResource(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "authorizedResources")
        }
      }

      public struct AuthorizedResource: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PaginatedAuthorizedResources"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
            GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(totalCount: Int, list: [List]) {
          self.init(unsafeResultMap: ["__typename": "PaginatedAuthorizedResources", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var totalCount: Int {
          get {
            return resultMap["totalCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalCount")
          }
        }

        public var list: [List] {
          get {
            return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
          }
        }

        public struct List: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["AuthorizedResource"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("code", type: .nonNull(.scalar(String.self))),
              GraphQLField("type", type: .scalar(ResourceType.self)),
              GraphQLField("actions", type: .list(.nonNull(.scalar(String.self)))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(code: String, type: ResourceType? = nil, actions: [String]? = nil) {
            self.init(unsafeResultMap: ["__typename": "AuthorizedResource", "code": code, "type": type, "actions": actions])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var code: String {
            get {
              return resultMap["code"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "code")
            }
          }

          public var type: ResourceType? {
            get {
              return resultMap["type"] as? ResourceType
            }
            set {
              resultMap.updateValue(newValue, forKey: "type")
            }
          }

          public var actions: [String]? {
            get {
              return resultMap["actions"] as? [String]
            }
            set {
              resultMap.updateValue(newValue, forKey: "actions")
            }
          }
        }
      }
    }
  }
}

public final class ListUserAuthorizedResourcesQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query listUserAuthorizedResources($id: String!, $namespace: String, $resourceType: String) {
      user(id: $id) {
        __typename
        authorizedResources(namespace: $namespace, resourceType: $resourceType) {
          __typename
          totalCount
          list {
            __typename
            code
            type
            actions
          }
        }
      }
    }
    """

  public let operationName: String = "listUserAuthorizedResources"

  public var id: String
  public var namespace: String?
  public var resourceType: String?

  public init(id: String, namespace: String? = nil, resourceType: String? = nil) {
    self.id = id
    self.namespace = namespace
    self.resourceType = resourceType
  }

  public var variables: GraphQLMap? {
    return ["id": id, "namespace": namespace, "resourceType": resourceType]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("user", arguments: ["id": GraphQLVariable("id")], type: .object(User.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(user: User? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }])
    }

    public var user: User? {
      get {
        return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "user")
      }
    }

    public struct User: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("authorizedResources", arguments: ["namespace": GraphQLVariable("namespace"), "resourceType": GraphQLVariable("resourceType")], type: .object(AuthorizedResource.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(authorizedResources: AuthorizedResource? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "authorizedResources": authorizedResources.flatMap { (value: AuthorizedResource) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 被授权访问的所有资源
      public var authorizedResources: AuthorizedResource? {
        get {
          return (resultMap["authorizedResources"] as? ResultMap).flatMap { AuthorizedResource(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "authorizedResources")
        }
      }

      public struct AuthorizedResource: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PaginatedAuthorizedResources"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
            GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(totalCount: Int, list: [List]) {
          self.init(unsafeResultMap: ["__typename": "PaginatedAuthorizedResources", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var totalCount: Int {
          get {
            return resultMap["totalCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalCount")
          }
        }

        public var list: [List] {
          get {
            return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
          }
        }

        public struct List: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["AuthorizedResource"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("code", type: .nonNull(.scalar(String.self))),
              GraphQLField("type", type: .scalar(ResourceType.self)),
              GraphQLField("actions", type: .list(.nonNull(.scalar(String.self)))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(code: String, type: ResourceType? = nil, actions: [String]? = nil) {
            self.init(unsafeResultMap: ["__typename": "AuthorizedResource", "code": code, "type": type, "actions": actions])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var code: String {
            get {
              return resultMap["code"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "code")
            }
          }

          public var type: ResourceType? {
            get {
              return resultMap["type"] as? ResourceType
            }
            set {
              resultMap.updateValue(newValue, forKey: "type")
            }
          }

          public var actions: [String]? {
            get {
              return resultMap["actions"] as? [String]
            }
            set {
              resultMap.updateValue(newValue, forKey: "actions")
            }
          }
        }
      }
    }
  }
}

public final class LoginByEmailMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation loginByEmail($input: LoginByEmailInput!) {
      loginByEmail(input: $input) {
        __typename
        id
        arn
        status
        userPoolId
        username
        email
        emailVerified
        phone
        phoneVerified
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
        externalId
      }
    }
    """

  public let operationName: String = "loginByEmail"

  public var input: LoginByEmailInput

  public init(input: LoginByEmailInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("loginByEmail", arguments: ["input": GraphQLVariable("input")], type: .object(LoginByEmail.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(loginByEmail: LoginByEmail? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "loginByEmail": loginByEmail.flatMap { (value: LoginByEmail) -> ResultMap in value.resultMap }])
    }

    public var loginByEmail: LoginByEmail? {
      get {
        return (resultMap["loginByEmail"] as? ResultMap).flatMap { LoginByEmail(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "loginByEmail")
      }
    }

    public struct LoginByEmail: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("externalId", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, arn: String, status: UserStatus? = nil, userPoolId: String, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "status": status, "userPoolId": userPoolId, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 用户外部 ID
      public var externalId: String? {
        get {
          return resultMap["externalId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "externalId")
        }
      }
    }
  }
}

public final class LoginByPhoneCodeMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation loginByPhoneCode($input: LoginByPhoneCodeInput!) {
      loginByPhoneCode(input: $input) {
        __typename
        id
        arn
        userPoolId
        status
        username
        email
        emailVerified
        phone
        phoneVerified
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
        externalId
      }
    }
    """

  public let operationName: String = "loginByPhoneCode"

  public var input: LoginByPhoneCodeInput

  public init(input: LoginByPhoneCodeInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("loginByPhoneCode", arguments: ["input": GraphQLVariable("input")], type: .object(LoginByPhoneCode.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(loginByPhoneCode: LoginByPhoneCode? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "loginByPhoneCode": loginByPhoneCode.flatMap { (value: LoginByPhoneCode) -> ResultMap in value.resultMap }])
    }

    public var loginByPhoneCode: LoginByPhoneCode? {
      get {
        return (resultMap["loginByPhoneCode"] as? ResultMap).flatMap { LoginByPhoneCode(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "loginByPhoneCode")
      }
    }

    public struct LoginByPhoneCode: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("externalId", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 用户外部 ID
      public var externalId: String? {
        get {
          return resultMap["externalId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "externalId")
        }
      }
    }
  }
}

public final class LoginByPhonePasswordMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation loginByPhonePassword($input: LoginByPhonePasswordInput!) {
      loginByPhonePassword(input: $input) {
        __typename
        id
        arn
        userPoolId
        status
        username
        email
        emailVerified
        phone
        phoneVerified
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
        externalId
      }
    }
    """

  public let operationName: String = "loginByPhonePassword"

  public var input: LoginByPhonePasswordInput

  public init(input: LoginByPhonePasswordInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("loginByPhonePassword", arguments: ["input": GraphQLVariable("input")], type: .object(LoginByPhonePassword.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(loginByPhonePassword: LoginByPhonePassword? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "loginByPhonePassword": loginByPhonePassword.flatMap { (value: LoginByPhonePassword) -> ResultMap in value.resultMap }])
    }

    public var loginByPhonePassword: LoginByPhonePassword? {
      get {
        return (resultMap["loginByPhonePassword"] as? ResultMap).flatMap { LoginByPhonePassword(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "loginByPhonePassword")
      }
    }

    public struct LoginByPhonePassword: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("externalId", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 用户外部 ID
      public var externalId: String? {
        get {
          return resultMap["externalId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "externalId")
        }
      }
    }
  }
}

public final class LoginBySubAccountMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation loginBySubAccount($account: String!, $password: String!, $captchaCode: String, $clientIp: String) {
      loginBySubAccount(
        account: $account
        password: $password
        captchaCode: $captchaCode
        clientIp: $clientIp
      ) {
        __typename
        id
        arn
        status
        userPoolId
        username
        email
        emailVerified
        phone
        phoneVerified
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
        externalId
      }
    }
    """

  public let operationName: String = "loginBySubAccount"

  public var account: String
  public var password: String
  public var captchaCode: String?
  public var clientIp: String?

  public init(account: String, password: String, captchaCode: String? = nil, clientIp: String? = nil) {
    self.account = account
    self.password = password
    self.captchaCode = captchaCode
    self.clientIp = clientIp
  }

  public var variables: GraphQLMap? {
    return ["account": account, "password": password, "captchaCode": captchaCode, "clientIp": clientIp]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("loginBySubAccount", arguments: ["account": GraphQLVariable("account"), "password": GraphQLVariable("password"), "captchaCode": GraphQLVariable("captchaCode"), "clientIp": GraphQLVariable("clientIp")], type: .nonNull(.object(LoginBySubAccount.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(loginBySubAccount: LoginBySubAccount) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "loginBySubAccount": loginBySubAccount.resultMap])
    }

    /// 使用子账号登录
    public var loginBySubAccount: LoginBySubAccount {
      get {
        return LoginBySubAccount(unsafeResultMap: resultMap["loginBySubAccount"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "loginBySubAccount")
      }
    }

    public struct LoginBySubAccount: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("externalId", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, arn: String, status: UserStatus? = nil, userPoolId: String, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "status": status, "userPoolId": userPoolId, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 用户外部 ID
      public var externalId: String? {
        get {
          return resultMap["externalId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "externalId")
        }
      }
    }
  }
}

public final class LoginByUsernameMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation loginByUsername($input: LoginByUsernameInput!) {
      loginByUsername(input: $input) {
        __typename
        id
        arn
        userPoolId
        status
        username
        email
        emailVerified
        phone
        phoneVerified
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
        externalId
      }
    }
    """

  public let operationName: String = "loginByUsername"

  public var input: LoginByUsernameInput

  public init(input: LoginByUsernameInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("loginByUsername", arguments: ["input": GraphQLVariable("input")], type: .object(LoginByUsername.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(loginByUsername: LoginByUsername? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "loginByUsername": loginByUsername.flatMap { (value: LoginByUsername) -> ResultMap in value.resultMap }])
    }

    public var loginByUsername: LoginByUsername? {
      get {
        return (resultMap["loginByUsername"] as? ResultMap).flatMap { LoginByUsername(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "loginByUsername")
      }
    }

    public struct LoginByUsername: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("externalId", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 用户外部 ID
      public var externalId: String? {
        get {
          return resultMap["externalId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "externalId")
        }
      }
    }
  }
}

public final class MoveMembersMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation moveMembers($userIds: [String!]!, $sourceNodeId: String!, $targetNodeId: String!) {
      moveMembers(
        userIds: $userIds
        sourceNodeId: $sourceNodeId
        targetNodeId: $targetNodeId
      ) {
        __typename
        code
        message
      }
    }
    """

  public let operationName: String = "moveMembers"

  public var userIds: [String]
  public var sourceNodeId: String
  public var targetNodeId: String

  public init(userIds: [String], sourceNodeId: String, targetNodeId: String) {
    self.userIds = userIds
    self.sourceNodeId = sourceNodeId
    self.targetNodeId = targetNodeId
  }

  public var variables: GraphQLMap? {
    return ["userIds": userIds, "sourceNodeId": sourceNodeId, "targetNodeId": targetNodeId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("moveMembers", arguments: ["userIds": GraphQLVariable("userIds"), "sourceNodeId": GraphQLVariable("sourceNodeId"), "targetNodeId": GraphQLVariable("targetNodeId")], type: .object(MoveMember.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(moveMembers: MoveMember? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "moveMembers": moveMembers.flatMap { (value: MoveMember) -> ResultMap in value.resultMap }])
    }

    public var moveMembers: MoveMember? {
      get {
        return (resultMap["moveMembers"] as? ResultMap).flatMap { MoveMember(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "moveMembers")
      }
    }

    public struct MoveMember: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("code", type: .scalar(Int.self)),
          GraphQLField("message", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(code: Int? = nil, message: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "code": code, "message": message])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }
    }
  }
}

public final class MoveNodeMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation moveNode($orgId: String!, $nodeId: String!, $targetParentId: String!) {
      moveNode(orgId: $orgId, nodeId: $nodeId, targetParentId: $targetParentId) {
        __typename
        id
        rootNode {
          __typename
          id
          orgId
          name
          nameI18n
          description
          descriptionI18n
          order
          code
          root
          depth
          path
          createdAt
          updatedAt
          children
        }
        nodes {
          __typename
          id
          orgId
          name
          nameI18n
          description
          descriptionI18n
          order
          code
          root
          depth
          path
          createdAt
          updatedAt
          children
        }
      }
    }
    """

  public let operationName: String = "moveNode"

  public var orgId: String
  public var nodeId: String
  public var targetParentId: String

  public init(orgId: String, nodeId: String, targetParentId: String) {
    self.orgId = orgId
    self.nodeId = nodeId
    self.targetParentId = targetParentId
  }

  public var variables: GraphQLMap? {
    return ["orgId": orgId, "nodeId": nodeId, "targetParentId": targetParentId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("moveNode", arguments: ["orgId": GraphQLVariable("orgId"), "nodeId": GraphQLVariable("nodeId"), "targetParentId": GraphQLVariable("targetParentId")], type: .nonNull(.object(MoveNode.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(moveNode: MoveNode) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "moveNode": moveNode.resultMap])
    }

    public var moveNode: MoveNode {
      get {
        return MoveNode(unsafeResultMap: resultMap["moveNode"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "moveNode")
      }
    }

    public struct MoveNode: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Org"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("rootNode", type: .nonNull(.object(RootNode.selections))),
          GraphQLField("nodes", type: .nonNull(.list(.nonNull(.object(Node.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, rootNode: RootNode, nodes: [Node]) {
        self.init(unsafeResultMap: ["__typename": "Org", "id": id, "rootNode": rootNode.resultMap, "nodes": nodes.map { (value: Node) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 组织机构 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// 根节点
      public var rootNode: RootNode {
        get {
          return RootNode(unsafeResultMap: resultMap["rootNode"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "rootNode")
        }
      }

      /// 组织机构节点列表
      public var nodes: [Node] {
        get {
          return (resultMap["nodes"] as! [ResultMap]).map { (value: ResultMap) -> Node in Node(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Node) -> ResultMap in value.resultMap }, forKey: "nodes")
        }
      }

      public struct RootNode: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Node"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(String.self))),
            GraphQLField("orgId", type: .scalar(String.self)),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("nameI18n", type: .scalar(String.self)),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("descriptionI18n", type: .scalar(String.self)),
            GraphQLField("order", type: .scalar(Int.self)),
            GraphQLField("code", type: .scalar(String.self)),
            GraphQLField("root", type: .scalar(Bool.self)),
            GraphQLField("depth", type: .scalar(Int.self)),
            GraphQLField("path", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
            GraphQLField("createdAt", type: .scalar(String.self)),
            GraphQLField("updatedAt", type: .scalar(String.self)),
            GraphQLField("children", type: .list(.nonNull(.scalar(String.self)))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String, orgId: String? = nil, name: String, nameI18n: String? = nil, description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil, root: Bool? = nil, depth: Int? = nil, path: [String], createdAt: String? = nil, updatedAt: String? = nil, children: [String]? = nil) {
          self.init(unsafeResultMap: ["__typename": "Node", "id": id, "orgId": orgId, "name": name, "nameI18n": nameI18n, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code, "root": root, "depth": depth, "path": path, "createdAt": createdAt, "updatedAt": updatedAt, "children": children])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String {
          get {
            return resultMap["id"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        /// 组织机构 ID
        public var orgId: String? {
          get {
            return resultMap["orgId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "orgId")
          }
        }

        /// 节点名称
        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。
        public var nameI18n: String? {
          get {
            return resultMap["nameI18n"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "nameI18n")
          }
        }

        /// 描述信息
        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 多语言描述信息
        public var descriptionI18n: String? {
          get {
            return resultMap["descriptionI18n"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "descriptionI18n")
          }
        }

        /// 在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)
        public var order: Int? {
          get {
            return resultMap["order"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "order")
          }
        }

        /// 节点唯一标志码，可以通过 code 进行搜索
        public var code: String? {
          get {
            return resultMap["code"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "code")
          }
        }

        /// 是否为根节点
        public var root: Bool? {
          get {
            return resultMap["root"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "root")
          }
        }

        /// 距离父节点的深度（如果是查询整棵树，返回的 **depth** 为距离根节点的深度，如果是查询某个节点的子节点，返回的 **depth** 指的是距离该节点的深度。）
        public var depth: Int? {
          get {
            return resultMap["depth"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "depth")
          }
        }

        public var path: [String] {
          get {
            return resultMap["path"]! as! [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "path")
          }
        }

        public var createdAt: String? {
          get {
            return resultMap["createdAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String? {
          get {
            return resultMap["updatedAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        /// 该节点的子节点 **ID** 列表
        public var children: [String]? {
          get {
            return resultMap["children"] as? [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "children")
          }
        }
      }

      public struct Node: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Node"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(String.self))),
            GraphQLField("orgId", type: .scalar(String.self)),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("nameI18n", type: .scalar(String.self)),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("descriptionI18n", type: .scalar(String.self)),
            GraphQLField("order", type: .scalar(Int.self)),
            GraphQLField("code", type: .scalar(String.self)),
            GraphQLField("root", type: .scalar(Bool.self)),
            GraphQLField("depth", type: .scalar(Int.self)),
            GraphQLField("path", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
            GraphQLField("createdAt", type: .scalar(String.self)),
            GraphQLField("updatedAt", type: .scalar(String.self)),
            GraphQLField("children", type: .list(.nonNull(.scalar(String.self)))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String, orgId: String? = nil, name: String, nameI18n: String? = nil, description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil, root: Bool? = nil, depth: Int? = nil, path: [String], createdAt: String? = nil, updatedAt: String? = nil, children: [String]? = nil) {
          self.init(unsafeResultMap: ["__typename": "Node", "id": id, "orgId": orgId, "name": name, "nameI18n": nameI18n, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code, "root": root, "depth": depth, "path": path, "createdAt": createdAt, "updatedAt": updatedAt, "children": children])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String {
          get {
            return resultMap["id"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        /// 组织机构 ID
        public var orgId: String? {
          get {
            return resultMap["orgId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "orgId")
          }
        }

        /// 节点名称
        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。
        public var nameI18n: String? {
          get {
            return resultMap["nameI18n"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "nameI18n")
          }
        }

        /// 描述信息
        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 多语言描述信息
        public var descriptionI18n: String? {
          get {
            return resultMap["descriptionI18n"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "descriptionI18n")
          }
        }

        /// 在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)
        public var order: Int? {
          get {
            return resultMap["order"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "order")
          }
        }

        /// 节点唯一标志码，可以通过 code 进行搜索
        public var code: String? {
          get {
            return resultMap["code"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "code")
          }
        }

        /// 是否为根节点
        public var root: Bool? {
          get {
            return resultMap["root"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "root")
          }
        }

        /// 距离父节点的深度（如果是查询整棵树，返回的 **depth** 为距离根节点的深度，如果是查询某个节点的子节点，返回的 **depth** 指的是距离该节点的深度。）
        public var depth: Int? {
          get {
            return resultMap["depth"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "depth")
          }
        }

        public var path: [String] {
          get {
            return resultMap["path"]! as! [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "path")
          }
        }

        public var createdAt: String? {
          get {
            return resultMap["createdAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String? {
          get {
            return resultMap["updatedAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        /// 该节点的子节点 **ID** 列表
        public var children: [String]? {
          get {
            return resultMap["children"] as? [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "children")
          }
        }
      }
    }
  }
}

public final class NodeByCodeQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query nodeByCode($orgId: String!, $code: String!) {
      nodeByCode(orgId: $orgId, code: $code) {
        __typename
        id
        orgId
        name
        nameI18n
        description
        descriptionI18n
        order
        code
        root
        depth
        path
        createdAt
        updatedAt
        children
      }
    }
    """

  public let operationName: String = "nodeByCode"

  public var orgId: String
  public var code: String

  public init(orgId: String, code: String) {
    self.orgId = orgId
    self.code = code
  }

  public var variables: GraphQLMap? {
    return ["orgId": orgId, "code": code]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("nodeByCode", arguments: ["orgId": GraphQLVariable("orgId"), "code": GraphQLVariable("code")], type: .object(NodeByCode.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(nodeByCode: NodeByCode? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "nodeByCode": nodeByCode.flatMap { (value: NodeByCode) -> ResultMap in value.resultMap }])
    }

    /// 通过 code 查询节点
    public var nodeByCode: NodeByCode? {
      get {
        return (resultMap["nodeByCode"] as? ResultMap).flatMap { NodeByCode(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "nodeByCode")
      }
    }

    public struct NodeByCode: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Node"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("orgId", type: .scalar(String.self)),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("nameI18n", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("descriptionI18n", type: .scalar(String.self)),
          GraphQLField("order", type: .scalar(Int.self)),
          GraphQLField("code", type: .scalar(String.self)),
          GraphQLField("root", type: .scalar(Bool.self)),
          GraphQLField("depth", type: .scalar(Int.self)),
          GraphQLField("path", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("children", type: .list(.nonNull(.scalar(String.self)))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, orgId: String? = nil, name: String, nameI18n: String? = nil, description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil, root: Bool? = nil, depth: Int? = nil, path: [String], createdAt: String? = nil, updatedAt: String? = nil, children: [String]? = nil) {
        self.init(unsafeResultMap: ["__typename": "Node", "id": id, "orgId": orgId, "name": name, "nameI18n": nameI18n, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code, "root": root, "depth": depth, "path": path, "createdAt": createdAt, "updatedAt": updatedAt, "children": children])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// 组织机构 ID
      public var orgId: String? {
        get {
          return resultMap["orgId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "orgId")
        }
      }

      /// 节点名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。
      public var nameI18n: String? {
        get {
          return resultMap["nameI18n"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nameI18n")
        }
      }

      /// 描述信息
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 多语言描述信息
      public var descriptionI18n: String? {
        get {
          return resultMap["descriptionI18n"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "descriptionI18n")
        }
      }

      /// 在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)
      public var order: Int? {
        get {
          return resultMap["order"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "order")
        }
      }

      /// 节点唯一标志码，可以通过 code 进行搜索
      public var code: String? {
        get {
          return resultMap["code"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      /// 是否为根节点
      public var root: Bool? {
        get {
          return resultMap["root"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "root")
        }
      }

      /// 距离父节点的深度（如果是查询整棵树，返回的 **depth** 为距离根节点的深度，如果是查询某个节点的子节点，返回的 **depth** 指的是距离该节点的深度。）
      public var depth: Int? {
        get {
          return resultMap["depth"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "depth")
        }
      }

      public var path: [String] {
        get {
          return resultMap["path"]! as! [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "path")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 该节点的子节点 **ID** 列表
      public var children: [String]? {
        get {
          return resultMap["children"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "children")
        }
      }
    }
  }
}

public final class NodeByCodeWithMembersQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query nodeByCodeWithMembers($page: Int, $limit: Int, $sortBy: SortByEnum, $includeChildrenNodes: Boolean, $orgId: String!, $code: String!) {
      nodeByCode(orgId: $orgId, code: $code) {
        __typename
        id
        orgId
        name
        nameI18n
        description
        descriptionI18n
        order
        code
        root
        depth
        createdAt
        updatedAt
        children
        users(
          page: $page
          limit: $limit
          sortBy: $sortBy
          includeChildrenNodes: $includeChildrenNodes
        ) {
          __typename
          totalCount
          list {
            __typename
            id
            arn
            userPoolId
            status
            username
            email
            emailVerified
            phone
            phoneVerified
            unionid
            openid
            nickname
            registerSource
            photo
            password
            oauth
            token
            tokenExpiredAt
            loginsCount
            lastLogin
            lastIP
            signedUp
            blocked
            isDeleted
            device
            browser
            company
            name
            givenName
            familyName
            middleName
            profile
            preferredUsername
            website
            gender
            birthdate
            zoneinfo
            locale
            address
            formatted
            streetAddress
            locality
            region
            postalCode
            city
            province
            country
            createdAt
            updatedAt
            externalId
          }
        }
      }
    }
    """

  public let operationName: String = "nodeByCodeWithMembers"

  public var page: Int?
  public var limit: Int?
  public var sortBy: SortByEnum?
  public var includeChildrenNodes: Bool?
  public var orgId: String
  public var code: String

  public init(page: Int? = nil, limit: Int? = nil, sortBy: SortByEnum? = nil, includeChildrenNodes: Bool? = nil, orgId: String, code: String) {
    self.page = page
    self.limit = limit
    self.sortBy = sortBy
    self.includeChildrenNodes = includeChildrenNodes
    self.orgId = orgId
    self.code = code
  }

  public var variables: GraphQLMap? {
    return ["page": page, "limit": limit, "sortBy": sortBy, "includeChildrenNodes": includeChildrenNodes, "orgId": orgId, "code": code]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("nodeByCode", arguments: ["orgId": GraphQLVariable("orgId"), "code": GraphQLVariable("code")], type: .object(NodeByCode.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(nodeByCode: NodeByCode? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "nodeByCode": nodeByCode.flatMap { (value: NodeByCode) -> ResultMap in value.resultMap }])
    }

    /// 通过 code 查询节点
    public var nodeByCode: NodeByCode? {
      get {
        return (resultMap["nodeByCode"] as? ResultMap).flatMap { NodeByCode(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "nodeByCode")
      }
    }

    public struct NodeByCode: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Node"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("orgId", type: .scalar(String.self)),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("nameI18n", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("descriptionI18n", type: .scalar(String.self)),
          GraphQLField("order", type: .scalar(Int.self)),
          GraphQLField("code", type: .scalar(String.self)),
          GraphQLField("root", type: .scalar(Bool.self)),
          GraphQLField("depth", type: .scalar(Int.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("children", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("users", arguments: ["page": GraphQLVariable("page"), "limit": GraphQLVariable("limit"), "sortBy": GraphQLVariable("sortBy"), "includeChildrenNodes": GraphQLVariable("includeChildrenNodes")], type: .nonNull(.object(User.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, orgId: String? = nil, name: String, nameI18n: String? = nil, description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil, root: Bool? = nil, depth: Int? = nil, createdAt: String? = nil, updatedAt: String? = nil, children: [String]? = nil, users: User) {
        self.init(unsafeResultMap: ["__typename": "Node", "id": id, "orgId": orgId, "name": name, "nameI18n": nameI18n, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code, "root": root, "depth": depth, "createdAt": createdAt, "updatedAt": updatedAt, "children": children, "users": users.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// 组织机构 ID
      public var orgId: String? {
        get {
          return resultMap["orgId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "orgId")
        }
      }

      /// 节点名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。
      public var nameI18n: String? {
        get {
          return resultMap["nameI18n"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nameI18n")
        }
      }

      /// 描述信息
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 多语言描述信息
      public var descriptionI18n: String? {
        get {
          return resultMap["descriptionI18n"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "descriptionI18n")
        }
      }

      /// 在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)
      public var order: Int? {
        get {
          return resultMap["order"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "order")
        }
      }

      /// 节点唯一标志码，可以通过 code 进行搜索
      public var code: String? {
        get {
          return resultMap["code"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      /// 是否为根节点
      public var root: Bool? {
        get {
          return resultMap["root"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "root")
        }
      }

      /// 距离父节点的深度（如果是查询整棵树，返回的 **depth** 为距离根节点的深度，如果是查询某个节点的子节点，返回的 **depth** 指的是距离该节点的深度。）
      public var depth: Int? {
        get {
          return resultMap["depth"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "depth")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 该节点的子节点 **ID** 列表
      public var children: [String]? {
        get {
          return resultMap["children"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "children")
        }
      }

      /// 节点的用户列表
      public var users: User {
        get {
          return User(unsafeResultMap: resultMap["users"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "users")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PaginatedUsers"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
            GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(totalCount: Int, list: [List]) {
          self.init(unsafeResultMap: ["__typename": "PaginatedUsers", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var totalCount: Int {
          get {
            return resultMap["totalCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalCount")
          }
        }

        public var list: [List] {
          get {
            return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
          }
        }

        public struct List: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["User"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(String.self))),
              GraphQLField("arn", type: .nonNull(.scalar(String.self))),
              GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
              GraphQLField("status", type: .scalar(UserStatus.self)),
              GraphQLField("username", type: .scalar(String.self)),
              GraphQLField("email", type: .scalar(String.self)),
              GraphQLField("emailVerified", type: .scalar(Bool.self)),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("phoneVerified", type: .scalar(Bool.self)),
              GraphQLField("unionid", type: .scalar(String.self)),
              GraphQLField("openid", type: .scalar(String.self)),
              GraphQLField("nickname", type: .scalar(String.self)),
              GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
              GraphQLField("photo", type: .scalar(String.self)),
              GraphQLField("password", type: .scalar(String.self)),
              GraphQLField("oauth", type: .scalar(String.self)),
              GraphQLField("token", type: .scalar(String.self)),
              GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
              GraphQLField("loginsCount", type: .scalar(Int.self)),
              GraphQLField("lastLogin", type: .scalar(String.self)),
              GraphQLField("lastIP", type: .scalar(String.self)),
              GraphQLField("signedUp", type: .scalar(String.self)),
              GraphQLField("blocked", type: .scalar(Bool.self)),
              GraphQLField("isDeleted", type: .scalar(Bool.self)),
              GraphQLField("device", type: .scalar(String.self)),
              GraphQLField("browser", type: .scalar(String.self)),
              GraphQLField("company", type: .scalar(String.self)),
              GraphQLField("name", type: .scalar(String.self)),
              GraphQLField("givenName", type: .scalar(String.self)),
              GraphQLField("familyName", type: .scalar(String.self)),
              GraphQLField("middleName", type: .scalar(String.self)),
              GraphQLField("profile", type: .scalar(String.self)),
              GraphQLField("preferredUsername", type: .scalar(String.self)),
              GraphQLField("website", type: .scalar(String.self)),
              GraphQLField("gender", type: .scalar(String.self)),
              GraphQLField("birthdate", type: .scalar(String.self)),
              GraphQLField("zoneinfo", type: .scalar(String.self)),
              GraphQLField("locale", type: .scalar(String.self)),
              GraphQLField("address", type: .scalar(String.self)),
              GraphQLField("formatted", type: .scalar(String.self)),
              GraphQLField("streetAddress", type: .scalar(String.self)),
              GraphQLField("locality", type: .scalar(String.self)),
              GraphQLField("region", type: .scalar(String.self)),
              GraphQLField("postalCode", type: .scalar(String.self)),
              GraphQLField("city", type: .scalar(String.self)),
              GraphQLField("province", type: .scalar(String.self)),
              GraphQLField("country", type: .scalar(String.self)),
              GraphQLField("createdAt", type: .scalar(String.self)),
              GraphQLField("updatedAt", type: .scalar(String.self)),
              GraphQLField("externalId", type: .scalar(String.self)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 用户 ID
          public var id: String {
            get {
              return resultMap["id"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          public var arn: String {
            get {
              return resultMap["arn"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "arn")
            }
          }

          /// 用户池 ID
          public var userPoolId: String {
            get {
              return resultMap["userPoolId"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "userPoolId")
            }
          }

          /// 用户在组织机构中的状态
          public var status: UserStatus? {
            get {
              return resultMap["status"] as? UserStatus
            }
            set {
              resultMap.updateValue(newValue, forKey: "status")
            }
          }

          /// 用户名，用户池内唯一
          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }

          /// 邮箱，用户池内唯一
          public var email: String? {
            get {
              return resultMap["email"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "email")
            }
          }

          /// 邮箱是否已验证
          public var emailVerified: Bool? {
            get {
              return resultMap["emailVerified"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "emailVerified")
            }
          }

          /// 手机号，用户池内唯一
          public var phone: String? {
            get {
              return resultMap["phone"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "phone")
            }
          }

          /// 手机号是否已验证
          public var phoneVerified: Bool? {
            get {
              return resultMap["phoneVerified"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "phoneVerified")
            }
          }

          public var unionid: String? {
            get {
              return resultMap["unionid"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "unionid")
            }
          }

          public var openid: String? {
            get {
              return resultMap["openid"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "openid")
            }
          }

          /// 昵称，该字段不唯一。
          public var nickname: String? {
            get {
              return resultMap["nickname"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "nickname")
            }
          }

          /// 注册方式
          public var registerSource: [String]? {
            get {
              return resultMap["registerSource"] as? [String]
            }
            set {
              resultMap.updateValue(newValue, forKey: "registerSource")
            }
          }

          /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
          public var photo: String? {
            get {
              return resultMap["photo"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "photo")
            }
          }

          /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
          public var password: String? {
            get {
              return resultMap["password"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "password")
            }
          }

          /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
          public var oauth: String? {
            get {
              return resultMap["oauth"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "oauth")
            }
          }

          /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
          public var token: String? {
            get {
              return resultMap["token"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "token")
            }
          }

          /// token 过期时间
          public var tokenExpiredAt: String? {
            get {
              return resultMap["tokenExpiredAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
            }
          }

          /// 用户登录总次数
          public var loginsCount: Int? {
            get {
              return resultMap["loginsCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "loginsCount")
            }
          }

          /// 用户最近一次登录时间
          public var lastLogin: String? {
            get {
              return resultMap["lastLogin"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastLogin")
            }
          }

          /// 用户上一次登录时使用的 IP
          public var lastIp: String? {
            get {
              return resultMap["lastIP"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastIP")
            }
          }

          /// 用户注册时间
          public var signedUp: String? {
            get {
              return resultMap["signedUp"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "signedUp")
            }
          }

          /// 该账号是否被禁用
          public var blocked: Bool? {
            get {
              return resultMap["blocked"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "blocked")
            }
          }

          /// 账号是否被软删除
          public var isDeleted: Bool? {
            get {
              return resultMap["isDeleted"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "isDeleted")
            }
          }

          public var device: String? {
            get {
              return resultMap["device"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "device")
            }
          }

          public var browser: String? {
            get {
              return resultMap["browser"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "browser")
            }
          }

          public var company: String? {
            get {
              return resultMap["company"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "company")
            }
          }

          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          public var givenName: String? {
            get {
              return resultMap["givenName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "givenName")
            }
          }

          public var familyName: String? {
            get {
              return resultMap["familyName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "familyName")
            }
          }

          public var middleName: String? {
            get {
              return resultMap["middleName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "middleName")
            }
          }

          public var profile: String? {
            get {
              return resultMap["profile"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "profile")
            }
          }

          public var preferredUsername: String? {
            get {
              return resultMap["preferredUsername"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "preferredUsername")
            }
          }

          public var website: String? {
            get {
              return resultMap["website"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "website")
            }
          }

          public var gender: String? {
            get {
              return resultMap["gender"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "gender")
            }
          }

          public var birthdate: String? {
            get {
              return resultMap["birthdate"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "birthdate")
            }
          }

          public var zoneinfo: String? {
            get {
              return resultMap["zoneinfo"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "zoneinfo")
            }
          }

          public var locale: String? {
            get {
              return resultMap["locale"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "locale")
            }
          }

          public var address: String? {
            get {
              return resultMap["address"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var formatted: String? {
            get {
              return resultMap["formatted"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "formatted")
            }
          }

          public var streetAddress: String? {
            get {
              return resultMap["streetAddress"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "streetAddress")
            }
          }

          public var locality: String? {
            get {
              return resultMap["locality"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "locality")
            }
          }

          public var region: String? {
            get {
              return resultMap["region"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "region")
            }
          }

          public var postalCode: String? {
            get {
              return resultMap["postalCode"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "postalCode")
            }
          }

          public var city: String? {
            get {
              return resultMap["city"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "city")
            }
          }

          public var province: String? {
            get {
              return resultMap["province"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "province")
            }
          }

          public var country: String? {
            get {
              return resultMap["country"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "country")
            }
          }

          public var createdAt: String? {
            get {
              return resultMap["createdAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String? {
            get {
              return resultMap["updatedAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "updatedAt")
            }
          }

          /// 用户外部 ID
          public var externalId: String? {
            get {
              return resultMap["externalId"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "externalId")
            }
          }
        }
      }
    }
  }
}

public final class NodeByIdQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query nodeById($id: String!) {
      nodeById(id: $id) {
        __typename
        id
        orgId
        name
        nameI18n
        description
        descriptionI18n
        order
        code
        root
        depth
        path
        createdAt
        updatedAt
        children
      }
    }
    """

  public let operationName: String = "nodeById"

  public var id: String

  public init(id: String) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("nodeById", arguments: ["id": GraphQLVariable("id")], type: .object(NodeById.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(nodeById: NodeById? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "nodeById": nodeById.flatMap { (value: NodeById) -> ResultMap in value.resultMap }])
    }

    public var nodeById: NodeById? {
      get {
        return (resultMap["nodeById"] as? ResultMap).flatMap { NodeById(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "nodeById")
      }
    }

    public struct NodeById: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Node"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("orgId", type: .scalar(String.self)),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("nameI18n", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("descriptionI18n", type: .scalar(String.self)),
          GraphQLField("order", type: .scalar(Int.self)),
          GraphQLField("code", type: .scalar(String.self)),
          GraphQLField("root", type: .scalar(Bool.self)),
          GraphQLField("depth", type: .scalar(Int.self)),
          GraphQLField("path", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("children", type: .list(.nonNull(.scalar(String.self)))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, orgId: String? = nil, name: String, nameI18n: String? = nil, description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil, root: Bool? = nil, depth: Int? = nil, path: [String], createdAt: String? = nil, updatedAt: String? = nil, children: [String]? = nil) {
        self.init(unsafeResultMap: ["__typename": "Node", "id": id, "orgId": orgId, "name": name, "nameI18n": nameI18n, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code, "root": root, "depth": depth, "path": path, "createdAt": createdAt, "updatedAt": updatedAt, "children": children])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// 组织机构 ID
      public var orgId: String? {
        get {
          return resultMap["orgId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "orgId")
        }
      }

      /// 节点名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。
      public var nameI18n: String? {
        get {
          return resultMap["nameI18n"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nameI18n")
        }
      }

      /// 描述信息
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 多语言描述信息
      public var descriptionI18n: String? {
        get {
          return resultMap["descriptionI18n"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "descriptionI18n")
        }
      }

      /// 在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)
      public var order: Int? {
        get {
          return resultMap["order"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "order")
        }
      }

      /// 节点唯一标志码，可以通过 code 进行搜索
      public var code: String? {
        get {
          return resultMap["code"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      /// 是否为根节点
      public var root: Bool? {
        get {
          return resultMap["root"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "root")
        }
      }

      /// 距离父节点的深度（如果是查询整棵树，返回的 **depth** 为距离根节点的深度，如果是查询某个节点的子节点，返回的 **depth** 指的是距离该节点的深度。）
      public var depth: Int? {
        get {
          return resultMap["depth"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "depth")
        }
      }

      public var path: [String] {
        get {
          return resultMap["path"]! as! [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "path")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 该节点的子节点 **ID** 列表
      public var children: [String]? {
        get {
          return resultMap["children"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "children")
        }
      }
    }
  }
}

public final class NodeByIdWithMembersQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query nodeByIdWithMembers($page: Int, $limit: Int, $sortBy: SortByEnum, $includeChildrenNodes: Boolean, $id: String!) {
      nodeById(id: $id) {
        __typename
        id
        orgId
        name
        nameI18n
        description
        descriptionI18n
        order
        code
        root
        depth
        createdAt
        updatedAt
        children
        users(
          page: $page
          limit: $limit
          sortBy: $sortBy
          includeChildrenNodes: $includeChildrenNodes
        ) {
          __typename
          totalCount
          list {
            __typename
            id
            arn
            userPoolId
            status
            username
            email
            emailVerified
            phone
            phoneVerified
            unionid
            openid
            nickname
            registerSource
            photo
            password
            oauth
            token
            tokenExpiredAt
            loginsCount
            lastLogin
            lastIP
            signedUp
            blocked
            isDeleted
            device
            browser
            company
            name
            givenName
            familyName
            middleName
            profile
            preferredUsername
            website
            gender
            birthdate
            zoneinfo
            locale
            address
            formatted
            streetAddress
            locality
            region
            postalCode
            city
            province
            country
            createdAt
            updatedAt
            externalId
          }
        }
      }
    }
    """

  public let operationName: String = "nodeByIdWithMembers"

  public var page: Int?
  public var limit: Int?
  public var sortBy: SortByEnum?
  public var includeChildrenNodes: Bool?
  public var id: String

  public init(page: Int? = nil, limit: Int? = nil, sortBy: SortByEnum? = nil, includeChildrenNodes: Bool? = nil, id: String) {
    self.page = page
    self.limit = limit
    self.sortBy = sortBy
    self.includeChildrenNodes = includeChildrenNodes
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["page": page, "limit": limit, "sortBy": sortBy, "includeChildrenNodes": includeChildrenNodes, "id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("nodeById", arguments: ["id": GraphQLVariable("id")], type: .object(NodeById.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(nodeById: NodeById? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "nodeById": nodeById.flatMap { (value: NodeById) -> ResultMap in value.resultMap }])
    }

    public var nodeById: NodeById? {
      get {
        return (resultMap["nodeById"] as? ResultMap).flatMap { NodeById(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "nodeById")
      }
    }

    public struct NodeById: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Node"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("orgId", type: .scalar(String.self)),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("nameI18n", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("descriptionI18n", type: .scalar(String.self)),
          GraphQLField("order", type: .scalar(Int.self)),
          GraphQLField("code", type: .scalar(String.self)),
          GraphQLField("root", type: .scalar(Bool.self)),
          GraphQLField("depth", type: .scalar(Int.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("children", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("users", arguments: ["page": GraphQLVariable("page"), "limit": GraphQLVariable("limit"), "sortBy": GraphQLVariable("sortBy"), "includeChildrenNodes": GraphQLVariable("includeChildrenNodes")], type: .nonNull(.object(User.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, orgId: String? = nil, name: String, nameI18n: String? = nil, description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil, root: Bool? = nil, depth: Int? = nil, createdAt: String? = nil, updatedAt: String? = nil, children: [String]? = nil, users: User) {
        self.init(unsafeResultMap: ["__typename": "Node", "id": id, "orgId": orgId, "name": name, "nameI18n": nameI18n, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code, "root": root, "depth": depth, "createdAt": createdAt, "updatedAt": updatedAt, "children": children, "users": users.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// 组织机构 ID
      public var orgId: String? {
        get {
          return resultMap["orgId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "orgId")
        }
      }

      /// 节点名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。
      public var nameI18n: String? {
        get {
          return resultMap["nameI18n"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nameI18n")
        }
      }

      /// 描述信息
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 多语言描述信息
      public var descriptionI18n: String? {
        get {
          return resultMap["descriptionI18n"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "descriptionI18n")
        }
      }

      /// 在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)
      public var order: Int? {
        get {
          return resultMap["order"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "order")
        }
      }

      /// 节点唯一标志码，可以通过 code 进行搜索
      public var code: String? {
        get {
          return resultMap["code"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      /// 是否为根节点
      public var root: Bool? {
        get {
          return resultMap["root"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "root")
        }
      }

      /// 距离父节点的深度（如果是查询整棵树，返回的 **depth** 为距离根节点的深度，如果是查询某个节点的子节点，返回的 **depth** 指的是距离该节点的深度。）
      public var depth: Int? {
        get {
          return resultMap["depth"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "depth")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 该节点的子节点 **ID** 列表
      public var children: [String]? {
        get {
          return resultMap["children"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "children")
        }
      }

      /// 节点的用户列表
      public var users: User {
        get {
          return User(unsafeResultMap: resultMap["users"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "users")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PaginatedUsers"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
            GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(totalCount: Int, list: [List]) {
          self.init(unsafeResultMap: ["__typename": "PaginatedUsers", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var totalCount: Int {
          get {
            return resultMap["totalCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalCount")
          }
        }

        public var list: [List] {
          get {
            return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
          }
        }

        public struct List: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["User"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(String.self))),
              GraphQLField("arn", type: .nonNull(.scalar(String.self))),
              GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
              GraphQLField("status", type: .scalar(UserStatus.self)),
              GraphQLField("username", type: .scalar(String.self)),
              GraphQLField("email", type: .scalar(String.self)),
              GraphQLField("emailVerified", type: .scalar(Bool.self)),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("phoneVerified", type: .scalar(Bool.self)),
              GraphQLField("unionid", type: .scalar(String.self)),
              GraphQLField("openid", type: .scalar(String.self)),
              GraphQLField("nickname", type: .scalar(String.self)),
              GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
              GraphQLField("photo", type: .scalar(String.self)),
              GraphQLField("password", type: .scalar(String.self)),
              GraphQLField("oauth", type: .scalar(String.self)),
              GraphQLField("token", type: .scalar(String.self)),
              GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
              GraphQLField("loginsCount", type: .scalar(Int.self)),
              GraphQLField("lastLogin", type: .scalar(String.self)),
              GraphQLField("lastIP", type: .scalar(String.self)),
              GraphQLField("signedUp", type: .scalar(String.self)),
              GraphQLField("blocked", type: .scalar(Bool.self)),
              GraphQLField("isDeleted", type: .scalar(Bool.self)),
              GraphQLField("device", type: .scalar(String.self)),
              GraphQLField("browser", type: .scalar(String.self)),
              GraphQLField("company", type: .scalar(String.self)),
              GraphQLField("name", type: .scalar(String.self)),
              GraphQLField("givenName", type: .scalar(String.self)),
              GraphQLField("familyName", type: .scalar(String.self)),
              GraphQLField("middleName", type: .scalar(String.self)),
              GraphQLField("profile", type: .scalar(String.self)),
              GraphQLField("preferredUsername", type: .scalar(String.self)),
              GraphQLField("website", type: .scalar(String.self)),
              GraphQLField("gender", type: .scalar(String.self)),
              GraphQLField("birthdate", type: .scalar(String.self)),
              GraphQLField("zoneinfo", type: .scalar(String.self)),
              GraphQLField("locale", type: .scalar(String.self)),
              GraphQLField("address", type: .scalar(String.self)),
              GraphQLField("formatted", type: .scalar(String.self)),
              GraphQLField("streetAddress", type: .scalar(String.self)),
              GraphQLField("locality", type: .scalar(String.self)),
              GraphQLField("region", type: .scalar(String.self)),
              GraphQLField("postalCode", type: .scalar(String.self)),
              GraphQLField("city", type: .scalar(String.self)),
              GraphQLField("province", type: .scalar(String.self)),
              GraphQLField("country", type: .scalar(String.self)),
              GraphQLField("createdAt", type: .scalar(String.self)),
              GraphQLField("updatedAt", type: .scalar(String.self)),
              GraphQLField("externalId", type: .scalar(String.self)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 用户 ID
          public var id: String {
            get {
              return resultMap["id"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          public var arn: String {
            get {
              return resultMap["arn"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "arn")
            }
          }

          /// 用户池 ID
          public var userPoolId: String {
            get {
              return resultMap["userPoolId"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "userPoolId")
            }
          }

          /// 用户在组织机构中的状态
          public var status: UserStatus? {
            get {
              return resultMap["status"] as? UserStatus
            }
            set {
              resultMap.updateValue(newValue, forKey: "status")
            }
          }

          /// 用户名，用户池内唯一
          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }

          /// 邮箱，用户池内唯一
          public var email: String? {
            get {
              return resultMap["email"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "email")
            }
          }

          /// 邮箱是否已验证
          public var emailVerified: Bool? {
            get {
              return resultMap["emailVerified"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "emailVerified")
            }
          }

          /// 手机号，用户池内唯一
          public var phone: String? {
            get {
              return resultMap["phone"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "phone")
            }
          }

          /// 手机号是否已验证
          public var phoneVerified: Bool? {
            get {
              return resultMap["phoneVerified"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "phoneVerified")
            }
          }

          public var unionid: String? {
            get {
              return resultMap["unionid"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "unionid")
            }
          }

          public var openid: String? {
            get {
              return resultMap["openid"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "openid")
            }
          }

          /// 昵称，该字段不唯一。
          public var nickname: String? {
            get {
              return resultMap["nickname"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "nickname")
            }
          }

          /// 注册方式
          public var registerSource: [String]? {
            get {
              return resultMap["registerSource"] as? [String]
            }
            set {
              resultMap.updateValue(newValue, forKey: "registerSource")
            }
          }

          /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
          public var photo: String? {
            get {
              return resultMap["photo"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "photo")
            }
          }

          /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
          public var password: String? {
            get {
              return resultMap["password"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "password")
            }
          }

          /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
          public var oauth: String? {
            get {
              return resultMap["oauth"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "oauth")
            }
          }

          /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
          public var token: String? {
            get {
              return resultMap["token"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "token")
            }
          }

          /// token 过期时间
          public var tokenExpiredAt: String? {
            get {
              return resultMap["tokenExpiredAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
            }
          }

          /// 用户登录总次数
          public var loginsCount: Int? {
            get {
              return resultMap["loginsCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "loginsCount")
            }
          }

          /// 用户最近一次登录时间
          public var lastLogin: String? {
            get {
              return resultMap["lastLogin"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastLogin")
            }
          }

          /// 用户上一次登录时使用的 IP
          public var lastIp: String? {
            get {
              return resultMap["lastIP"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastIP")
            }
          }

          /// 用户注册时间
          public var signedUp: String? {
            get {
              return resultMap["signedUp"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "signedUp")
            }
          }

          /// 该账号是否被禁用
          public var blocked: Bool? {
            get {
              return resultMap["blocked"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "blocked")
            }
          }

          /// 账号是否被软删除
          public var isDeleted: Bool? {
            get {
              return resultMap["isDeleted"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "isDeleted")
            }
          }

          public var device: String? {
            get {
              return resultMap["device"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "device")
            }
          }

          public var browser: String? {
            get {
              return resultMap["browser"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "browser")
            }
          }

          public var company: String? {
            get {
              return resultMap["company"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "company")
            }
          }

          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          public var givenName: String? {
            get {
              return resultMap["givenName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "givenName")
            }
          }

          public var familyName: String? {
            get {
              return resultMap["familyName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "familyName")
            }
          }

          public var middleName: String? {
            get {
              return resultMap["middleName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "middleName")
            }
          }

          public var profile: String? {
            get {
              return resultMap["profile"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "profile")
            }
          }

          public var preferredUsername: String? {
            get {
              return resultMap["preferredUsername"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "preferredUsername")
            }
          }

          public var website: String? {
            get {
              return resultMap["website"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "website")
            }
          }

          public var gender: String? {
            get {
              return resultMap["gender"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "gender")
            }
          }

          public var birthdate: String? {
            get {
              return resultMap["birthdate"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "birthdate")
            }
          }

          public var zoneinfo: String? {
            get {
              return resultMap["zoneinfo"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "zoneinfo")
            }
          }

          public var locale: String? {
            get {
              return resultMap["locale"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "locale")
            }
          }

          public var address: String? {
            get {
              return resultMap["address"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var formatted: String? {
            get {
              return resultMap["formatted"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "formatted")
            }
          }

          public var streetAddress: String? {
            get {
              return resultMap["streetAddress"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "streetAddress")
            }
          }

          public var locality: String? {
            get {
              return resultMap["locality"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "locality")
            }
          }

          public var region: String? {
            get {
              return resultMap["region"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "region")
            }
          }

          public var postalCode: String? {
            get {
              return resultMap["postalCode"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "postalCode")
            }
          }

          public var city: String? {
            get {
              return resultMap["city"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "city")
            }
          }

          public var province: String? {
            get {
              return resultMap["province"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "province")
            }
          }

          public var country: String? {
            get {
              return resultMap["country"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "country")
            }
          }

          public var createdAt: String? {
            get {
              return resultMap["createdAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String? {
            get {
              return resultMap["updatedAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "updatedAt")
            }
          }

          /// 用户外部 ID
          public var externalId: String? {
            get {
              return resultMap["externalId"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "externalId")
            }
          }
        }
      }
    }
  }
}

public final class OrgQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query org($id: String!) {
      org(id: $id) {
        __typename
        id
        rootNode {
          __typename
          id
          orgId
          name
          nameI18n
          description
          descriptionI18n
          order
          code
          root
          depth
          path
          createdAt
          updatedAt
          children
        }
        nodes {
          __typename
          id
          orgId
          name
          nameI18n
          description
          descriptionI18n
          order
          code
          root
          depth
          path
          createdAt
          updatedAt
          children
        }
      }
    }
    """

  public let operationName: String = "org"

  public var id: String

  public init(id: String) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("org", arguments: ["id": GraphQLVariable("id")], type: .nonNull(.object(Org.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(org: Org) {
      self.init(unsafeResultMap: ["__typename": "Query", "org": org.resultMap])
    }

    /// 查询组织机构详情
    public var org: Org {
      get {
        return Org(unsafeResultMap: resultMap["org"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "org")
      }
    }

    public struct Org: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Org"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("rootNode", type: .nonNull(.object(RootNode.selections))),
          GraphQLField("nodes", type: .nonNull(.list(.nonNull(.object(Node.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, rootNode: RootNode, nodes: [Node]) {
        self.init(unsafeResultMap: ["__typename": "Org", "id": id, "rootNode": rootNode.resultMap, "nodes": nodes.map { (value: Node) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 组织机构 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// 根节点
      public var rootNode: RootNode {
        get {
          return RootNode(unsafeResultMap: resultMap["rootNode"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "rootNode")
        }
      }

      /// 组织机构节点列表
      public var nodes: [Node] {
        get {
          return (resultMap["nodes"] as! [ResultMap]).map { (value: ResultMap) -> Node in Node(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Node) -> ResultMap in value.resultMap }, forKey: "nodes")
        }
      }

      public struct RootNode: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Node"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(String.self))),
            GraphQLField("orgId", type: .scalar(String.self)),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("nameI18n", type: .scalar(String.self)),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("descriptionI18n", type: .scalar(String.self)),
            GraphQLField("order", type: .scalar(Int.self)),
            GraphQLField("code", type: .scalar(String.self)),
            GraphQLField("root", type: .scalar(Bool.self)),
            GraphQLField("depth", type: .scalar(Int.self)),
            GraphQLField("path", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
            GraphQLField("createdAt", type: .scalar(String.self)),
            GraphQLField("updatedAt", type: .scalar(String.self)),
            GraphQLField("children", type: .list(.nonNull(.scalar(String.self)))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String, orgId: String? = nil, name: String, nameI18n: String? = nil, description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil, root: Bool? = nil, depth: Int? = nil, path: [String], createdAt: String? = nil, updatedAt: String? = nil, children: [String]? = nil) {
          self.init(unsafeResultMap: ["__typename": "Node", "id": id, "orgId": orgId, "name": name, "nameI18n": nameI18n, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code, "root": root, "depth": depth, "path": path, "createdAt": createdAt, "updatedAt": updatedAt, "children": children])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String {
          get {
            return resultMap["id"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        /// 组织机构 ID
        public var orgId: String? {
          get {
            return resultMap["orgId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "orgId")
          }
        }

        /// 节点名称
        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。
        public var nameI18n: String? {
          get {
            return resultMap["nameI18n"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "nameI18n")
          }
        }

        /// 描述信息
        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 多语言描述信息
        public var descriptionI18n: String? {
          get {
            return resultMap["descriptionI18n"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "descriptionI18n")
          }
        }

        /// 在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)
        public var order: Int? {
          get {
            return resultMap["order"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "order")
          }
        }

        /// 节点唯一标志码，可以通过 code 进行搜索
        public var code: String? {
          get {
            return resultMap["code"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "code")
          }
        }

        /// 是否为根节点
        public var root: Bool? {
          get {
            return resultMap["root"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "root")
          }
        }

        /// 距离父节点的深度（如果是查询整棵树，返回的 **depth** 为距离根节点的深度，如果是查询某个节点的子节点，返回的 **depth** 指的是距离该节点的深度。）
        public var depth: Int? {
          get {
            return resultMap["depth"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "depth")
          }
        }

        public var path: [String] {
          get {
            return resultMap["path"]! as! [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "path")
          }
        }

        public var createdAt: String? {
          get {
            return resultMap["createdAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String? {
          get {
            return resultMap["updatedAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        /// 该节点的子节点 **ID** 列表
        public var children: [String]? {
          get {
            return resultMap["children"] as? [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "children")
          }
        }
      }

      public struct Node: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Node"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(String.self))),
            GraphQLField("orgId", type: .scalar(String.self)),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("nameI18n", type: .scalar(String.self)),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("descriptionI18n", type: .scalar(String.self)),
            GraphQLField("order", type: .scalar(Int.self)),
            GraphQLField("code", type: .scalar(String.self)),
            GraphQLField("root", type: .scalar(Bool.self)),
            GraphQLField("depth", type: .scalar(Int.self)),
            GraphQLField("path", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
            GraphQLField("createdAt", type: .scalar(String.self)),
            GraphQLField("updatedAt", type: .scalar(String.self)),
            GraphQLField("children", type: .list(.nonNull(.scalar(String.self)))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String, orgId: String? = nil, name: String, nameI18n: String? = nil, description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil, root: Bool? = nil, depth: Int? = nil, path: [String], createdAt: String? = nil, updatedAt: String? = nil, children: [String]? = nil) {
          self.init(unsafeResultMap: ["__typename": "Node", "id": id, "orgId": orgId, "name": name, "nameI18n": nameI18n, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code, "root": root, "depth": depth, "path": path, "createdAt": createdAt, "updatedAt": updatedAt, "children": children])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String {
          get {
            return resultMap["id"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        /// 组织机构 ID
        public var orgId: String? {
          get {
            return resultMap["orgId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "orgId")
          }
        }

        /// 节点名称
        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        /// 多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。
        public var nameI18n: String? {
          get {
            return resultMap["nameI18n"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "nameI18n")
          }
        }

        /// 描述信息
        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 多语言描述信息
        public var descriptionI18n: String? {
          get {
            return resultMap["descriptionI18n"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "descriptionI18n")
          }
        }

        /// 在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)
        public var order: Int? {
          get {
            return resultMap["order"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "order")
          }
        }

        /// 节点唯一标志码，可以通过 code 进行搜索
        public var code: String? {
          get {
            return resultMap["code"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "code")
          }
        }

        /// 是否为根节点
        public var root: Bool? {
          get {
            return resultMap["root"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "root")
          }
        }

        /// 距离父节点的深度（如果是查询整棵树，返回的 **depth** 为距离根节点的深度，如果是查询某个节点的子节点，返回的 **depth** 指的是距离该节点的深度。）
        public var depth: Int? {
          get {
            return resultMap["depth"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "depth")
          }
        }

        public var path: [String] {
          get {
            return resultMap["path"]! as! [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "path")
          }
        }

        public var createdAt: String? {
          get {
            return resultMap["createdAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String? {
          get {
            return resultMap["updatedAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        /// 该节点的子节点 **ID** 列表
        public var children: [String]? {
          get {
            return resultMap["children"] as? [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "children")
          }
        }
      }
    }
  }
}

public final class OrgsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query orgs($page: Int, $limit: Int, $sortBy: SortByEnum) {
      orgs(page: $page, limit: $limit, sortBy: $sortBy) {
        __typename
        totalCount
        list {
          __typename
          id
          rootNode {
            __typename
            id
            name
            nameI18n
            path
            description
            descriptionI18n
            order
            code
            root
            depth
            createdAt
            updatedAt
            children
          }
          nodes {
            __typename
            id
            name
            path
            nameI18n
            description
            descriptionI18n
            order
            code
            root
            depth
            createdAt
            updatedAt
            children
          }
        }
      }
    }
    """

  public let operationName: String = "orgs"

  public var page: Int?
  public var limit: Int?
  public var sortBy: SortByEnum?

  public init(page: Int? = nil, limit: Int? = nil, sortBy: SortByEnum? = nil) {
    self.page = page
    self.limit = limit
    self.sortBy = sortBy
  }

  public var variables: GraphQLMap? {
    return ["page": page, "limit": limit, "sortBy": sortBy]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("orgs", arguments: ["page": GraphQLVariable("page"), "limit": GraphQLVariable("limit"), "sortBy": GraphQLVariable("sortBy")], type: .nonNull(.object(Org.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(orgs: Org) {
      self.init(unsafeResultMap: ["__typename": "Query", "orgs": orgs.resultMap])
    }

    /// 查询用户池组织机构列表
    public var orgs: Org {
      get {
        return Org(unsafeResultMap: resultMap["orgs"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "orgs")
      }
    }

    public struct Org: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PaginatedOrgs"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
          GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(totalCount: Int, list: [List]) {
        self.init(unsafeResultMap: ["__typename": "PaginatedOrgs", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var totalCount: Int {
        get {
          return resultMap["totalCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "totalCount")
        }
      }

      public var list: [List] {
        get {
          return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
        }
      }

      public struct List: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Org"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(String.self))),
            GraphQLField("rootNode", type: .nonNull(.object(RootNode.selections))),
            GraphQLField("nodes", type: .nonNull(.list(.nonNull(.object(Node.selections))))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String, rootNode: RootNode, nodes: [Node]) {
          self.init(unsafeResultMap: ["__typename": "Org", "id": id, "rootNode": rootNode.resultMap, "nodes": nodes.map { (value: Node) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 组织机构 ID
        public var id: String {
          get {
            return resultMap["id"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        /// 根节点
        public var rootNode: RootNode {
          get {
            return RootNode(unsafeResultMap: resultMap["rootNode"]! as! ResultMap)
          }
          set {
            resultMap.updateValue(newValue.resultMap, forKey: "rootNode")
          }
        }

        /// 组织机构节点列表
        public var nodes: [Node] {
          get {
            return (resultMap["nodes"] as! [ResultMap]).map { (value: ResultMap) -> Node in Node(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: Node) -> ResultMap in value.resultMap }, forKey: "nodes")
          }
        }

        public struct RootNode: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Node"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(String.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("nameI18n", type: .scalar(String.self)),
              GraphQLField("path", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("descriptionI18n", type: .scalar(String.self)),
              GraphQLField("order", type: .scalar(Int.self)),
              GraphQLField("code", type: .scalar(String.self)),
              GraphQLField("root", type: .scalar(Bool.self)),
              GraphQLField("depth", type: .scalar(Int.self)),
              GraphQLField("createdAt", type: .scalar(String.self)),
              GraphQLField("updatedAt", type: .scalar(String.self)),
              GraphQLField("children", type: .list(.nonNull(.scalar(String.self)))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: String, name: String, nameI18n: String? = nil, path: [String], description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil, root: Bool? = nil, depth: Int? = nil, createdAt: String? = nil, updatedAt: String? = nil, children: [String]? = nil) {
            self.init(unsafeResultMap: ["__typename": "Node", "id": id, "name": name, "nameI18n": nameI18n, "path": path, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code, "root": root, "depth": depth, "createdAt": createdAt, "updatedAt": updatedAt, "children": children])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: String {
            get {
              return resultMap["id"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          /// 节点名称
          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          /// 多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。
          public var nameI18n: String? {
            get {
              return resultMap["nameI18n"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "nameI18n")
            }
          }

          public var path: [String] {
            get {
              return resultMap["path"]! as! [String]
            }
            set {
              resultMap.updateValue(newValue, forKey: "path")
            }
          }

          /// 描述信息
          public var description: String? {
            get {
              return resultMap["description"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "description")
            }
          }

          /// 多语言描述信息
          public var descriptionI18n: String? {
            get {
              return resultMap["descriptionI18n"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "descriptionI18n")
            }
          }

          /// 在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)
          public var order: Int? {
            get {
              return resultMap["order"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "order")
            }
          }

          /// 节点唯一标志码，可以通过 code 进行搜索
          public var code: String? {
            get {
              return resultMap["code"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "code")
            }
          }

          /// 是否为根节点
          public var root: Bool? {
            get {
              return resultMap["root"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "root")
            }
          }

          /// 距离父节点的深度（如果是查询整棵树，返回的 **depth** 为距离根节点的深度，如果是查询某个节点的子节点，返回的 **depth** 指的是距离该节点的深度。）
          public var depth: Int? {
            get {
              return resultMap["depth"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "depth")
            }
          }

          public var createdAt: String? {
            get {
              return resultMap["createdAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String? {
            get {
              return resultMap["updatedAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "updatedAt")
            }
          }

          /// 该节点的子节点 **ID** 列表
          public var children: [String]? {
            get {
              return resultMap["children"] as? [String]
            }
            set {
              resultMap.updateValue(newValue, forKey: "children")
            }
          }
        }

        public struct Node: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Node"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(String.self))),
              GraphQLField("name", type: .nonNull(.scalar(String.self))),
              GraphQLField("path", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
              GraphQLField("nameI18n", type: .scalar(String.self)),
              GraphQLField("description", type: .scalar(String.self)),
              GraphQLField("descriptionI18n", type: .scalar(String.self)),
              GraphQLField("order", type: .scalar(Int.self)),
              GraphQLField("code", type: .scalar(String.self)),
              GraphQLField("root", type: .scalar(Bool.self)),
              GraphQLField("depth", type: .scalar(Int.self)),
              GraphQLField("createdAt", type: .scalar(String.self)),
              GraphQLField("updatedAt", type: .scalar(String.self)),
              GraphQLField("children", type: .list(.nonNull(.scalar(String.self)))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: String, name: String, path: [String], nameI18n: String? = nil, description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil, root: Bool? = nil, depth: Int? = nil, createdAt: String? = nil, updatedAt: String? = nil, children: [String]? = nil) {
            self.init(unsafeResultMap: ["__typename": "Node", "id": id, "name": name, "path": path, "nameI18n": nameI18n, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code, "root": root, "depth": depth, "createdAt": createdAt, "updatedAt": updatedAt, "children": children])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var id: String {
            get {
              return resultMap["id"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          /// 节点名称
          public var name: String {
            get {
              return resultMap["name"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          public var path: [String] {
            get {
              return resultMap["path"]! as! [String]
            }
            set {
              resultMap.updateValue(newValue, forKey: "path")
            }
          }

          /// 多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。
          public var nameI18n: String? {
            get {
              return resultMap["nameI18n"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "nameI18n")
            }
          }

          /// 描述信息
          public var description: String? {
            get {
              return resultMap["description"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "description")
            }
          }

          /// 多语言描述信息
          public var descriptionI18n: String? {
            get {
              return resultMap["descriptionI18n"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "descriptionI18n")
            }
          }

          /// 在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)
          public var order: Int? {
            get {
              return resultMap["order"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "order")
            }
          }

          /// 节点唯一标志码，可以通过 code 进行搜索
          public var code: String? {
            get {
              return resultMap["code"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "code")
            }
          }

          /// 是否为根节点
          public var root: Bool? {
            get {
              return resultMap["root"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "root")
            }
          }

          /// 距离父节点的深度（如果是查询整棵树，返回的 **depth** 为距离根节点的深度，如果是查询某个节点的子节点，返回的 **depth** 指的是距离该节点的深度。）
          public var depth: Int? {
            get {
              return resultMap["depth"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "depth")
            }
          }

          public var createdAt: String? {
            get {
              return resultMap["createdAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String? {
            get {
              return resultMap["updatedAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "updatedAt")
            }
          }

          /// 该节点的子节点 **ID** 列表
          public var children: [String]? {
            get {
              return resultMap["children"] as? [String]
            }
            set {
              resultMap.updateValue(newValue, forKey: "children")
            }
          }
        }
      }
    }
  }
}

public final class PoliciesQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query policies($page: Int, $limit: Int, $namespace: String) {
      policies(page: $page, limit: $limit, namespace: $namespace) {
        __typename
        totalCount
        list {
          __typename
          namespace
          code
          description
          createdAt
          updatedAt
          statements {
            __typename
            resource
            actions
            effect
            condition {
              __typename
              param
              operator
              value
            }
          }
        }
      }
    }
    """

  public let operationName: String = "policies"

  public var page: Int?
  public var limit: Int?
  public var namespace: String?

  public init(page: Int? = nil, limit: Int? = nil, namespace: String? = nil) {
    self.page = page
    self.limit = limit
    self.namespace = namespace
  }

  public var variables: GraphQLMap? {
    return ["page": page, "limit": limit, "namespace": namespace]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("policies", arguments: ["page": GraphQLVariable("page"), "limit": GraphQLVariable("limit"), "namespace": GraphQLVariable("namespace")], type: .nonNull(.object(Policy.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(policies: Policy) {
      self.init(unsafeResultMap: ["__typename": "Query", "policies": policies.resultMap])
    }

    public var policies: Policy {
      get {
        return Policy(unsafeResultMap: resultMap["policies"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "policies")
      }
    }

    public struct Policy: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PaginatedPolicies"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
          GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(totalCount: Int, list: [List]) {
        self.init(unsafeResultMap: ["__typename": "PaginatedPolicies", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var totalCount: Int {
        get {
          return resultMap["totalCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "totalCount")
        }
      }

      public var list: [List] {
        get {
          return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
        }
      }

      public struct List: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Policy"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("namespace", type: .nonNull(.scalar(String.self))),
            GraphQLField("code", type: .nonNull(.scalar(String.self))),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("createdAt", type: .scalar(String.self)),
            GraphQLField("updatedAt", type: .scalar(String.self)),
            GraphQLField("statements", type: .nonNull(.list(.nonNull(.object(Statement.selections))))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(namespace: String, code: String, description: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, statements: [Statement]) {
          self.init(unsafeResultMap: ["__typename": "Policy", "namespace": namespace, "code": code, "description": description, "createdAt": createdAt, "updatedAt": updatedAt, "statements": statements.map { (value: Statement) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 权限组 code
        public var namespace: String {
          get {
            return resultMap["namespace"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "namespace")
          }
        }

        public var code: String {
          get {
            return resultMap["code"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "code")
          }
        }

        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        public var createdAt: String? {
          get {
            return resultMap["createdAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String? {
          get {
            return resultMap["updatedAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        public var statements: [Statement] {
          get {
            return (resultMap["statements"] as! [ResultMap]).map { (value: ResultMap) -> Statement in Statement(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: Statement) -> ResultMap in value.resultMap }, forKey: "statements")
          }
        }

        public struct Statement: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["PolicyStatement"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("resource", type: .nonNull(.scalar(String.self))),
              GraphQLField("actions", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
              GraphQLField("effect", type: .scalar(PolicyEffect.self)),
              GraphQLField("condition", type: .list(.nonNull(.object(Condition.selections)))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(resource: String, actions: [String], effect: PolicyEffect? = nil, condition: [Condition]? = nil) {
            self.init(unsafeResultMap: ["__typename": "PolicyStatement", "resource": resource, "actions": actions, "effect": effect, "condition": condition.flatMap { (value: [Condition]) -> [ResultMap] in value.map { (value: Condition) -> ResultMap in value.resultMap } }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var resource: String {
            get {
              return resultMap["resource"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "resource")
            }
          }

          public var actions: [String] {
            get {
              return resultMap["actions"]! as! [String]
            }
            set {
              resultMap.updateValue(newValue, forKey: "actions")
            }
          }

          public var effect: PolicyEffect? {
            get {
              return resultMap["effect"] as? PolicyEffect
            }
            set {
              resultMap.updateValue(newValue, forKey: "effect")
            }
          }

          public var condition: [Condition]? {
            get {
              return (resultMap["condition"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Condition] in value.map { (value: ResultMap) -> Condition in Condition(unsafeResultMap: value) } }
            }
            set {
              resultMap.updateValue(newValue.flatMap { (value: [Condition]) -> [ResultMap] in value.map { (value: Condition) -> ResultMap in value.resultMap } }, forKey: "condition")
            }
          }

          public struct Condition: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["PolicyStatementCondition"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("param", type: .nonNull(.scalar(String.self))),
                GraphQLField("operator", type: .nonNull(.scalar(String.self))),
                GraphQLField("value", type: .nonNull(.scalar(String.self))),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(param: String, `operator`: String, value: String) {
              self.init(unsafeResultMap: ["__typename": "PolicyStatementCondition", "param": param, "operator": `operator`, "value": value])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var param: String {
              get {
                return resultMap["param"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "param")
              }
            }

            public var `operator`: String {
              get {
                return resultMap["operator"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "operator")
              }
            }

            public var value: String {
              get {
                return resultMap["value"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "value")
              }
            }
          }
        }
      }
    }
  }
}

public final class PolicyQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query policy($namespace: String, $code: String!) {
      policy(code: $code, namespace: $namespace) {
        __typename
        namespace
        code
        isDefault
        description
        statements {
          __typename
          resource
          actions
          effect
          condition {
            __typename
            param
            operator
            value
          }
        }
        createdAt
        updatedAt
      }
    }
    """

  public let operationName: String = "policy"

  public var namespace: String?
  public var code: String

  public init(namespace: String? = nil, code: String) {
    self.namespace = namespace
    self.code = code
  }

  public var variables: GraphQLMap? {
    return ["namespace": namespace, "code": code]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("policy", arguments: ["code": GraphQLVariable("code"), "namespace": GraphQLVariable("namespace")], type: .object(Policy.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(policy: Policy? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "policy": policy.flatMap { (value: Policy) -> ResultMap in value.resultMap }])
    }

    public var policy: Policy? {
      get {
        return (resultMap["policy"] as? ResultMap).flatMap { Policy(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "policy")
      }
    }

    public struct Policy: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Policy"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("namespace", type: .nonNull(.scalar(String.self))),
          GraphQLField("code", type: .nonNull(.scalar(String.self))),
          GraphQLField("isDefault", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("statements", type: .nonNull(.list(.nonNull(.object(Statement.selections))))),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(namespace: String, code: String, isDefault: Bool, description: String? = nil, statements: [Statement], createdAt: String? = nil, updatedAt: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "Policy", "namespace": namespace, "code": code, "isDefault": isDefault, "description": description, "statements": statements.map { (value: Statement) -> ResultMap in value.resultMap }, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 权限组 code
      public var namespace: String {
        get {
          return resultMap["namespace"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "namespace")
        }
      }

      public var code: String {
        get {
          return resultMap["code"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      public var isDefault: Bool {
        get {
          return resultMap["isDefault"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDefault")
        }
      }

      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      public var statements: [Statement] {
        get {
          return (resultMap["statements"] as! [ResultMap]).map { (value: ResultMap) -> Statement in Statement(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Statement) -> ResultMap in value.resultMap }, forKey: "statements")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct Statement: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PolicyStatement"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("resource", type: .nonNull(.scalar(String.self))),
            GraphQLField("actions", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
            GraphQLField("effect", type: .scalar(PolicyEffect.self)),
            GraphQLField("condition", type: .list(.nonNull(.object(Condition.selections)))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(resource: String, actions: [String], effect: PolicyEffect? = nil, condition: [Condition]? = nil) {
          self.init(unsafeResultMap: ["__typename": "PolicyStatement", "resource": resource, "actions": actions, "effect": effect, "condition": condition.flatMap { (value: [Condition]) -> [ResultMap] in value.map { (value: Condition) -> ResultMap in value.resultMap } }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var resource: String {
          get {
            return resultMap["resource"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "resource")
          }
        }

        public var actions: [String] {
          get {
            return resultMap["actions"]! as! [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "actions")
          }
        }

        public var effect: PolicyEffect? {
          get {
            return resultMap["effect"] as? PolicyEffect
          }
          set {
            resultMap.updateValue(newValue, forKey: "effect")
          }
        }

        public var condition: [Condition]? {
          get {
            return (resultMap["condition"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Condition] in value.map { (value: ResultMap) -> Condition in Condition(unsafeResultMap: value) } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Condition]) -> [ResultMap] in value.map { (value: Condition) -> ResultMap in value.resultMap } }, forKey: "condition")
          }
        }

        public struct Condition: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["PolicyStatementCondition"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("param", type: .nonNull(.scalar(String.self))),
              GraphQLField("operator", type: .nonNull(.scalar(String.self))),
              GraphQLField("value", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(param: String, `operator`: String, value: String) {
            self.init(unsafeResultMap: ["__typename": "PolicyStatementCondition", "param": param, "operator": `operator`, "value": value])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var param: String {
            get {
              return resultMap["param"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "param")
            }
          }

          public var `operator`: String {
            get {
              return resultMap["operator"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "operator")
            }
          }

          public var value: String {
            get {
              return resultMap["value"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "value")
            }
          }
        }
      }
    }
  }
}

public final class PolicyAssignmentsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query policyAssignments($namespace: String, $code: String, $targetType: PolicyAssignmentTargetType, $targetIdentifier: String, $page: Int, $limit: Int) {
      policyAssignments(
        namespace: $namespace
        code: $code
        targetType: $targetType
        targetIdentifier: $targetIdentifier
        page: $page
        limit: $limit
      ) {
        __typename
        totalCount
        list {
          __typename
          code
          targetType
          targetIdentifier
        }
      }
    }
    """

  public let operationName: String = "policyAssignments"

  public var namespace: String?
  public var code: String?
  public var targetType: PolicyAssignmentTargetType?
  public var targetIdentifier: String?
  public var page: Int?
  public var limit: Int?

  public init(namespace: String? = nil, code: String? = nil, targetType: PolicyAssignmentTargetType? = nil, targetIdentifier: String? = nil, page: Int? = nil, limit: Int? = nil) {
    self.namespace = namespace
    self.code = code
    self.targetType = targetType
    self.targetIdentifier = targetIdentifier
    self.page = page
    self.limit = limit
  }

  public var variables: GraphQLMap? {
    return ["namespace": namespace, "code": code, "targetType": targetType, "targetIdentifier": targetIdentifier, "page": page, "limit": limit]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("policyAssignments", arguments: ["namespace": GraphQLVariable("namespace"), "code": GraphQLVariable("code"), "targetType": GraphQLVariable("targetType"), "targetIdentifier": GraphQLVariable("targetIdentifier"), "page": GraphQLVariable("page"), "limit": GraphQLVariable("limit")], type: .nonNull(.object(PolicyAssignment.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(policyAssignments: PolicyAssignment) {
      self.init(unsafeResultMap: ["__typename": "Query", "policyAssignments": policyAssignments.resultMap])
    }

    public var policyAssignments: PolicyAssignment {
      get {
        return PolicyAssignment(unsafeResultMap: resultMap["policyAssignments"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "policyAssignments")
      }
    }

    public struct PolicyAssignment: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PaginatedPolicyAssignments"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
          GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(totalCount: Int, list: [List]) {
        self.init(unsafeResultMap: ["__typename": "PaginatedPolicyAssignments", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var totalCount: Int {
        get {
          return resultMap["totalCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "totalCount")
        }
      }

      public var list: [List] {
        get {
          return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
        }
      }

      public struct List: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PolicyAssignment"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("code", type: .nonNull(.scalar(String.self))),
            GraphQLField("targetType", type: .nonNull(.scalar(PolicyAssignmentTargetType.self))),
            GraphQLField("targetIdentifier", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(code: String, targetType: PolicyAssignmentTargetType, targetIdentifier: String) {
          self.init(unsafeResultMap: ["__typename": "PolicyAssignment", "code": code, "targetType": targetType, "targetIdentifier": targetIdentifier])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var code: String {
          get {
            return resultMap["code"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "code")
          }
        }

        public var targetType: PolicyAssignmentTargetType {
          get {
            return resultMap["targetType"]! as! PolicyAssignmentTargetType
          }
          set {
            resultMap.updateValue(newValue, forKey: "targetType")
          }
        }

        public var targetIdentifier: String {
          get {
            return resultMap["targetIdentifier"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "targetIdentifier")
          }
        }
      }
    }
  }
}

public final class PolicyWithAssignmentsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query policyWithAssignments($page: Int, $limit: Int, $code: String!) {
      policy(code: $code) {
        __typename
        code
        isDefault
        description
        statements {
          __typename
          resource
          actions
          effect
        }
        createdAt
        updatedAt
        assignmentsCount
        assignments(page: $page, limit: $limit) {
          __typename
          code
          targetType
          targetIdentifier
        }
      }
    }
    """

  public let operationName: String = "policyWithAssignments"

  public var page: Int?
  public var limit: Int?
  public var code: String

  public init(page: Int? = nil, limit: Int? = nil, code: String) {
    self.page = page
    self.limit = limit
    self.code = code
  }

  public var variables: GraphQLMap? {
    return ["page": page, "limit": limit, "code": code]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("policy", arguments: ["code": GraphQLVariable("code")], type: .object(Policy.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(policy: Policy? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "policy": policy.flatMap { (value: Policy) -> ResultMap in value.resultMap }])
    }

    public var policy: Policy? {
      get {
        return (resultMap["policy"] as? ResultMap).flatMap { Policy(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "policy")
      }
    }

    public struct Policy: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Policy"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("code", type: .nonNull(.scalar(String.self))),
          GraphQLField("isDefault", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("statements", type: .nonNull(.list(.nonNull(.object(Statement.selections))))),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("assignmentsCount", type: .nonNull(.scalar(Int.self))),
          GraphQLField("assignments", arguments: ["page": GraphQLVariable("page"), "limit": GraphQLVariable("limit")], type: .nonNull(.list(.nonNull(.object(Assignment.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(code: String, isDefault: Bool, description: String? = nil, statements: [Statement], createdAt: String? = nil, updatedAt: String? = nil, assignmentsCount: Int, assignments: [Assignment]) {
        self.init(unsafeResultMap: ["__typename": "Policy", "code": code, "isDefault": isDefault, "description": description, "statements": statements.map { (value: Statement) -> ResultMap in value.resultMap }, "createdAt": createdAt, "updatedAt": updatedAt, "assignmentsCount": assignmentsCount, "assignments": assignments.map { (value: Assignment) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var code: String {
        get {
          return resultMap["code"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      public var isDefault: Bool {
        get {
          return resultMap["isDefault"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDefault")
        }
      }

      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      public var statements: [Statement] {
        get {
          return (resultMap["statements"] as! [ResultMap]).map { (value: ResultMap) -> Statement in Statement(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Statement) -> ResultMap in value.resultMap }, forKey: "statements")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 被授权次数
      public var assignmentsCount: Int {
        get {
          return resultMap["assignmentsCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "assignmentsCount")
        }
      }

      /// 授权记录
      public var assignments: [Assignment] {
        get {
          return (resultMap["assignments"] as! [ResultMap]).map { (value: ResultMap) -> Assignment in Assignment(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Assignment) -> ResultMap in value.resultMap }, forKey: "assignments")
        }
      }

      public struct Statement: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PolicyStatement"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("resource", type: .nonNull(.scalar(String.self))),
            GraphQLField("actions", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
            GraphQLField("effect", type: .scalar(PolicyEffect.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(resource: String, actions: [String], effect: PolicyEffect? = nil) {
          self.init(unsafeResultMap: ["__typename": "PolicyStatement", "resource": resource, "actions": actions, "effect": effect])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var resource: String {
          get {
            return resultMap["resource"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "resource")
          }
        }

        public var actions: [String] {
          get {
            return resultMap["actions"]! as! [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "actions")
          }
        }

        public var effect: PolicyEffect? {
          get {
            return resultMap["effect"] as? PolicyEffect
          }
          set {
            resultMap.updateValue(newValue, forKey: "effect")
          }
        }
      }

      public struct Assignment: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PolicyAssignment"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("code", type: .nonNull(.scalar(String.self))),
            GraphQLField("targetType", type: .nonNull(.scalar(PolicyAssignmentTargetType.self))),
            GraphQLField("targetIdentifier", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(code: String, targetType: PolicyAssignmentTargetType, targetIdentifier: String) {
          self.init(unsafeResultMap: ["__typename": "PolicyAssignment", "code": code, "targetType": targetType, "targetIdentifier": targetIdentifier])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var code: String {
          get {
            return resultMap["code"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "code")
          }
        }

        public var targetType: PolicyAssignmentTargetType {
          get {
            return resultMap["targetType"]! as! PolicyAssignmentTargetType
          }
          set {
            resultMap.updateValue(newValue, forKey: "targetType")
          }
        }

        public var targetIdentifier: String {
          get {
            return resultMap["targetIdentifier"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "targetIdentifier")
          }
        }
      }
    }
  }
}

public final class PreviewEmailQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query previewEmail($type: EmailTemplateType!) {
      previewEmail(type: $type)
    }
    """

  public let operationName: String = "previewEmail"

  public var type: EmailTemplateType

  public init(type: EmailTemplateType) {
    self.type = type
  }

  public var variables: GraphQLMap? {
    return ["type": type]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("previewEmail", arguments: ["type": GraphQLVariable("type")], type: .nonNull(.scalar(String.self))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(previewEmail: String) {
      self.init(unsafeResultMap: ["__typename": "Query", "previewEmail": previewEmail])
    }

    public var previewEmail: String {
      get {
        return resultMap["previewEmail"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "previewEmail")
      }
    }
  }
}

public final class QiniuUptokenQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query qiniuUptoken($type: String) {
      qiniuUptoken(type: $type)
    }
    """

  public let operationName: String = "qiniuUptoken"

  public var type: String?

  public init(type: String? = nil) {
    self.type = type
  }

  public var variables: GraphQLMap? {
    return ["type": type]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("qiniuUptoken", arguments: ["type": GraphQLVariable("type")], type: .scalar(String.self)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(qiniuUptoken: String? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "qiniuUptoken": qiniuUptoken])
    }

    public var qiniuUptoken: String? {
      get {
        return resultMap["qiniuUptoken"] as? String
      }
      set {
        resultMap.updateValue(newValue, forKey: "qiniuUptoken")
      }
    }
  }
}

public final class QueryMfaQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query queryMfa($id: String, $userId: String, $userPoolId: String) {
      queryMfa(id: $id, userId: $userId, userPoolId: $userPoolId) {
        __typename
        id
        userId
        userPoolId
        enable
        secret
      }
    }
    """

  public let operationName: String = "queryMfa"

  public var id: String?
  public var userId: String?
  public var userPoolId: String?

  public init(id: String? = nil, userId: String? = nil, userPoolId: String? = nil) {
    self.id = id
    self.userId = userId
    self.userPoolId = userPoolId
  }

  public var variables: GraphQLMap? {
    return ["id": id, "userId": userId, "userPoolId": userPoolId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("queryMfa", arguments: ["id": GraphQLVariable("id"), "userId": GraphQLVariable("userId"), "userPoolId": GraphQLVariable("userPoolId")], type: .object(QueryMfa.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(queryMfa: QueryMfa? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "queryMfa": queryMfa.flatMap { (value: QueryMfa) -> ResultMap in value.resultMap }])
    }

    /// 查询 MFA 信息
    public var queryMfa: QueryMfa? {
      get {
        return (resultMap["queryMfa"] as? ResultMap).flatMap { QueryMfa(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "queryMfa")
      }
    }

    public struct QueryMfa: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Mfa"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("userId", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("enable", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("secret", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, userId: String, userPoolId: String, enable: Bool, secret: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "Mfa", "id": id, "userId": userId, "userPoolId": userPoolId, "enable": enable, "secret": secret])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// MFA ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// 用户 ID
      public var userId: String {
        get {
          return resultMap["userId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userId")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 是否开启 MFA
      public var enable: Bool {
        get {
          return resultMap["enable"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "enable")
        }
      }

      /// 密钥
      public var secret: String? {
        get {
          return resultMap["secret"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "secret")
        }
      }
    }
  }
}

public final class RefreshAccessTokenMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation refreshAccessToken($accessToken: String) {
      refreshAccessToken(accessToken: $accessToken) {
        __typename
        accessToken
        exp
        iat
      }
    }
    """

  public let operationName: String = "refreshAccessToken"

  public var accessToken: String?

  public init(accessToken: String? = nil) {
    self.accessToken = accessToken
  }

  public var variables: GraphQLMap? {
    return ["accessToken": accessToken]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("refreshAccessToken", arguments: ["accessToken": GraphQLVariable("accessToken")], type: .nonNull(.object(RefreshAccessToken.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(refreshAccessToken: RefreshAccessToken) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "refreshAccessToken": refreshAccessToken.resultMap])
    }

    public var refreshAccessToken: RefreshAccessToken {
      get {
        return RefreshAccessToken(unsafeResultMap: resultMap["refreshAccessToken"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "refreshAccessToken")
      }
    }

    public struct RefreshAccessToken: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["RefreshAccessTokenRes"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("accessToken", type: .scalar(String.self)),
          GraphQLField("exp", type: .scalar(Int.self)),
          GraphQLField("iat", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(accessToken: String? = nil, exp: Int? = nil, iat: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "RefreshAccessTokenRes", "accessToken": accessToken, "exp": exp, "iat": iat])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var accessToken: String? {
        get {
          return resultMap["accessToken"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "accessToken")
        }
      }

      public var exp: Int? {
        get {
          return resultMap["exp"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "exp")
        }
      }

      public var iat: Int? {
        get {
          return resultMap["iat"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "iat")
        }
      }
    }
  }
}

public final class RefreshTokenMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation refreshToken($id: String) {
      refreshToken(id: $id) {
        __typename
        token
        iat
        exp
      }
    }
    """

  public let operationName: String = "refreshToken"

  public var id: String?

  public init(id: String? = nil) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("refreshToken", arguments: ["id": GraphQLVariable("id")], type: .object(RefreshToken.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(refreshToken: RefreshToken? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "refreshToken": refreshToken.flatMap { (value: RefreshToken) -> ResultMap in value.resultMap }])
    }

    public var refreshToken: RefreshToken? {
      get {
        return (resultMap["refreshToken"] as? ResultMap).flatMap { RefreshToken(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "refreshToken")
      }
    }

    public struct RefreshToken: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["RefreshToken"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("iat", type: .scalar(Int.self)),
          GraphQLField("exp", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(token: String? = nil, iat: Int? = nil, exp: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "RefreshToken", "token": token, "iat": iat, "exp": exp])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      public var iat: Int? {
        get {
          return resultMap["iat"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "iat")
        }
      }

      public var exp: Int? {
        get {
          return resultMap["exp"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "exp")
        }
      }
    }
  }
}

public final class RefreshUserpoolSecretMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation refreshUserpoolSecret {
      refreshUserpoolSecret
    }
    """

  public let operationName: String = "refreshUserpoolSecret"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("refreshUserpoolSecret", type: .nonNull(.scalar(String.self))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(refreshUserpoolSecret: String) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "refreshUserpoolSecret": refreshUserpoolSecret])
    }

    public var refreshUserpoolSecret: String {
      get {
        return resultMap["refreshUserpoolSecret"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "refreshUserpoolSecret")
      }
    }
  }
}

public final class RegisterByEmailMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation registerByEmail($input: RegisterByEmailInput!) {
      registerByEmail(input: $input) {
        __typename
        id
        arn
        userPoolId
        status
        username
        email
        emailVerified
        phone
        phoneVerified
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
        externalId
      }
    }
    """

  public let operationName: String = "registerByEmail"

  public var input: RegisterByEmailInput

  public init(input: RegisterByEmailInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("registerByEmail", arguments: ["input": GraphQLVariable("input")], type: .object(RegisterByEmail.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(registerByEmail: RegisterByEmail? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "registerByEmail": registerByEmail.flatMap { (value: RegisterByEmail) -> ResultMap in value.resultMap }])
    }

    public var registerByEmail: RegisterByEmail? {
      get {
        return (resultMap["registerByEmail"] as? ResultMap).flatMap { RegisterByEmail(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "registerByEmail")
      }
    }

    public struct RegisterByEmail: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("externalId", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 用户外部 ID
      public var externalId: String? {
        get {
          return resultMap["externalId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "externalId")
        }
      }
    }
  }
}

public final class RegisterByPhoneCodeMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation registerByPhoneCode($input: RegisterByPhoneCodeInput!) {
      registerByPhoneCode(input: $input) {
        __typename
        id
        arn
        userPoolId
        status
        username
        email
        emailVerified
        phone
        phoneVerified
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
        externalId
      }
    }
    """

  public let operationName: String = "registerByPhoneCode"

  public var input: RegisterByPhoneCodeInput

  public init(input: RegisterByPhoneCodeInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("registerByPhoneCode", arguments: ["input": GraphQLVariable("input")], type: .object(RegisterByPhoneCode.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(registerByPhoneCode: RegisterByPhoneCode? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "registerByPhoneCode": registerByPhoneCode.flatMap { (value: RegisterByPhoneCode) -> ResultMap in value.resultMap }])
    }

    public var registerByPhoneCode: RegisterByPhoneCode? {
      get {
        return (resultMap["registerByPhoneCode"] as? ResultMap).flatMap { RegisterByPhoneCode(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "registerByPhoneCode")
      }
    }

    public struct RegisterByPhoneCode: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("externalId", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 用户外部 ID
      public var externalId: String? {
        get {
          return resultMap["externalId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "externalId")
        }
      }
    }
  }
}

public final class RegisterByUsernameMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation registerByUsername($input: RegisterByUsernameInput!) {
      registerByUsername(input: $input) {
        __typename
        id
        arn
        userPoolId
        status
        username
        email
        emailVerified
        phone
        phoneVerified
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
        externalId
      }
    }
    """

  public let operationName: String = "registerByUsername"

  public var input: RegisterByUsernameInput

  public init(input: RegisterByUsernameInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("registerByUsername", arguments: ["input": GraphQLVariable("input")], type: .object(RegisterByUsername.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(registerByUsername: RegisterByUsername? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "registerByUsername": registerByUsername.flatMap { (value: RegisterByUsername) -> ResultMap in value.resultMap }])
    }

    public var registerByUsername: RegisterByUsername? {
      get {
        return (resultMap["registerByUsername"] as? ResultMap).flatMap { RegisterByUsername(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "registerByUsername")
      }
    }

    public struct RegisterByUsername: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("externalId", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 用户外部 ID
      public var externalId: String? {
        get {
          return resultMap["externalId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "externalId")
        }
      }
    }
  }
}

public final class RemoveMemberMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation removeMember($page: Int, $limit: Int, $sortBy: SortByEnum, $includeChildrenNodes: Boolean, $nodeId: String, $orgId: String, $nodeCode: String, $userIds: [String!]!) {
      removeMember(
        nodeId: $nodeId
        orgId: $orgId
        nodeCode: $nodeCode
        userIds: $userIds
      ) {
        __typename
        id
        name
        nameI18n
        description
        descriptionI18n
        order
        code
        root
        depth
        createdAt
        updatedAt
        children
        users(
          page: $page
          limit: $limit
          sortBy: $sortBy
          includeChildrenNodes: $includeChildrenNodes
        ) {
          __typename
          totalCount
          list {
            __typename
            id
            arn
            userPoolId
            status
            username
            email
            emailVerified
            phone
            phoneVerified
            unionid
            openid
            nickname
            registerSource
            photo
            password
            oauth
            token
            tokenExpiredAt
            loginsCount
            lastLogin
            lastIP
            signedUp
            blocked
            isDeleted
            device
            browser
            company
            name
            givenName
            familyName
            middleName
            profile
            preferredUsername
            website
            gender
            birthdate
            zoneinfo
            locale
            address
            formatted
            streetAddress
            locality
            region
            postalCode
            city
            province
            country
            createdAt
            updatedAt
          }
        }
      }
    }
    """

  public let operationName: String = "removeMember"

  public var page: Int?
  public var limit: Int?
  public var sortBy: SortByEnum?
  public var includeChildrenNodes: Bool?
  public var nodeId: String?
  public var orgId: String?
  public var nodeCode: String?
  public var userIds: [String]

  public init(page: Int? = nil, limit: Int? = nil, sortBy: SortByEnum? = nil, includeChildrenNodes: Bool? = nil, nodeId: String? = nil, orgId: String? = nil, nodeCode: String? = nil, userIds: [String]) {
    self.page = page
    self.limit = limit
    self.sortBy = sortBy
    self.includeChildrenNodes = includeChildrenNodes
    self.nodeId = nodeId
    self.orgId = orgId
    self.nodeCode = nodeCode
    self.userIds = userIds
  }

  public var variables: GraphQLMap? {
    return ["page": page, "limit": limit, "sortBy": sortBy, "includeChildrenNodes": includeChildrenNodes, "nodeId": nodeId, "orgId": orgId, "nodeCode": nodeCode, "userIds": userIds]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("removeMember", arguments: ["nodeId": GraphQLVariable("nodeId"), "orgId": GraphQLVariable("orgId"), "nodeCode": GraphQLVariable("nodeCode"), "userIds": GraphQLVariable("userIds")], type: .nonNull(.object(RemoveMember.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(removeMember: RemoveMember) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "removeMember": removeMember.resultMap])
    }

    /// （批量）将成员从节点中移除
    public var removeMember: RemoveMember {
      get {
        return RemoveMember(unsafeResultMap: resultMap["removeMember"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "removeMember")
      }
    }

    public struct RemoveMember: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Node"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("nameI18n", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("descriptionI18n", type: .scalar(String.self)),
          GraphQLField("order", type: .scalar(Int.self)),
          GraphQLField("code", type: .scalar(String.self)),
          GraphQLField("root", type: .scalar(Bool.self)),
          GraphQLField("depth", type: .scalar(Int.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("children", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("users", arguments: ["page": GraphQLVariable("page"), "limit": GraphQLVariable("limit"), "sortBy": GraphQLVariable("sortBy"), "includeChildrenNodes": GraphQLVariable("includeChildrenNodes")], type: .nonNull(.object(User.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, name: String, nameI18n: String? = nil, description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil, root: Bool? = nil, depth: Int? = nil, createdAt: String? = nil, updatedAt: String? = nil, children: [String]? = nil, users: User) {
        self.init(unsafeResultMap: ["__typename": "Node", "id": id, "name": name, "nameI18n": nameI18n, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code, "root": root, "depth": depth, "createdAt": createdAt, "updatedAt": updatedAt, "children": children, "users": users.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// 节点名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。
      public var nameI18n: String? {
        get {
          return resultMap["nameI18n"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nameI18n")
        }
      }

      /// 描述信息
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 多语言描述信息
      public var descriptionI18n: String? {
        get {
          return resultMap["descriptionI18n"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "descriptionI18n")
        }
      }

      /// 在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)
      public var order: Int? {
        get {
          return resultMap["order"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "order")
        }
      }

      /// 节点唯一标志码，可以通过 code 进行搜索
      public var code: String? {
        get {
          return resultMap["code"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      /// 是否为根节点
      public var root: Bool? {
        get {
          return resultMap["root"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "root")
        }
      }

      /// 距离父节点的深度（如果是查询整棵树，返回的 **depth** 为距离根节点的深度，如果是查询某个节点的子节点，返回的 **depth** 指的是距离该节点的深度。）
      public var depth: Int? {
        get {
          return resultMap["depth"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "depth")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 该节点的子节点 **ID** 列表
      public var children: [String]? {
        get {
          return resultMap["children"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "children")
        }
      }

      /// 节点的用户列表
      public var users: User {
        get {
          return User(unsafeResultMap: resultMap["users"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "users")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PaginatedUsers"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
            GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(totalCount: Int, list: [List]) {
          self.init(unsafeResultMap: ["__typename": "PaginatedUsers", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var totalCount: Int {
          get {
            return resultMap["totalCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalCount")
          }
        }

        public var list: [List] {
          get {
            return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
          }
        }

        public struct List: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["User"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(String.self))),
              GraphQLField("arn", type: .nonNull(.scalar(String.self))),
              GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
              GraphQLField("status", type: .scalar(UserStatus.self)),
              GraphQLField("username", type: .scalar(String.self)),
              GraphQLField("email", type: .scalar(String.self)),
              GraphQLField("emailVerified", type: .scalar(Bool.self)),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("phoneVerified", type: .scalar(Bool.self)),
              GraphQLField("unionid", type: .scalar(String.self)),
              GraphQLField("openid", type: .scalar(String.self)),
              GraphQLField("nickname", type: .scalar(String.self)),
              GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
              GraphQLField("photo", type: .scalar(String.self)),
              GraphQLField("password", type: .scalar(String.self)),
              GraphQLField("oauth", type: .scalar(String.self)),
              GraphQLField("token", type: .scalar(String.self)),
              GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
              GraphQLField("loginsCount", type: .scalar(Int.self)),
              GraphQLField("lastLogin", type: .scalar(String.self)),
              GraphQLField("lastIP", type: .scalar(String.self)),
              GraphQLField("signedUp", type: .scalar(String.self)),
              GraphQLField("blocked", type: .scalar(Bool.self)),
              GraphQLField("isDeleted", type: .scalar(Bool.self)),
              GraphQLField("device", type: .scalar(String.self)),
              GraphQLField("browser", type: .scalar(String.self)),
              GraphQLField("company", type: .scalar(String.self)),
              GraphQLField("name", type: .scalar(String.self)),
              GraphQLField("givenName", type: .scalar(String.self)),
              GraphQLField("familyName", type: .scalar(String.self)),
              GraphQLField("middleName", type: .scalar(String.self)),
              GraphQLField("profile", type: .scalar(String.self)),
              GraphQLField("preferredUsername", type: .scalar(String.self)),
              GraphQLField("website", type: .scalar(String.self)),
              GraphQLField("gender", type: .scalar(String.self)),
              GraphQLField("birthdate", type: .scalar(String.self)),
              GraphQLField("zoneinfo", type: .scalar(String.self)),
              GraphQLField("locale", type: .scalar(String.self)),
              GraphQLField("address", type: .scalar(String.self)),
              GraphQLField("formatted", type: .scalar(String.self)),
              GraphQLField("streetAddress", type: .scalar(String.self)),
              GraphQLField("locality", type: .scalar(String.self)),
              GraphQLField("region", type: .scalar(String.self)),
              GraphQLField("postalCode", type: .scalar(String.self)),
              GraphQLField("city", type: .scalar(String.self)),
              GraphQLField("province", type: .scalar(String.self)),
              GraphQLField("country", type: .scalar(String.self)),
              GraphQLField("createdAt", type: .scalar(String.self)),
              GraphQLField("updatedAt", type: .scalar(String.self)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 用户 ID
          public var id: String {
            get {
              return resultMap["id"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          public var arn: String {
            get {
              return resultMap["arn"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "arn")
            }
          }

          /// 用户池 ID
          public var userPoolId: String {
            get {
              return resultMap["userPoolId"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "userPoolId")
            }
          }

          /// 用户在组织机构中的状态
          public var status: UserStatus? {
            get {
              return resultMap["status"] as? UserStatus
            }
            set {
              resultMap.updateValue(newValue, forKey: "status")
            }
          }

          /// 用户名，用户池内唯一
          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }

          /// 邮箱，用户池内唯一
          public var email: String? {
            get {
              return resultMap["email"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "email")
            }
          }

          /// 邮箱是否已验证
          public var emailVerified: Bool? {
            get {
              return resultMap["emailVerified"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "emailVerified")
            }
          }

          /// 手机号，用户池内唯一
          public var phone: String? {
            get {
              return resultMap["phone"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "phone")
            }
          }

          /// 手机号是否已验证
          public var phoneVerified: Bool? {
            get {
              return resultMap["phoneVerified"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "phoneVerified")
            }
          }

          public var unionid: String? {
            get {
              return resultMap["unionid"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "unionid")
            }
          }

          public var openid: String? {
            get {
              return resultMap["openid"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "openid")
            }
          }

          /// 昵称，该字段不唯一。
          public var nickname: String? {
            get {
              return resultMap["nickname"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "nickname")
            }
          }

          /// 注册方式
          public var registerSource: [String]? {
            get {
              return resultMap["registerSource"] as? [String]
            }
            set {
              resultMap.updateValue(newValue, forKey: "registerSource")
            }
          }

          /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
          public var photo: String? {
            get {
              return resultMap["photo"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "photo")
            }
          }

          /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
          public var password: String? {
            get {
              return resultMap["password"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "password")
            }
          }

          /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
          public var oauth: String? {
            get {
              return resultMap["oauth"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "oauth")
            }
          }

          /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
          public var token: String? {
            get {
              return resultMap["token"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "token")
            }
          }

          /// token 过期时间
          public var tokenExpiredAt: String? {
            get {
              return resultMap["tokenExpiredAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
            }
          }

          /// 用户登录总次数
          public var loginsCount: Int? {
            get {
              return resultMap["loginsCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "loginsCount")
            }
          }

          /// 用户最近一次登录时间
          public var lastLogin: String? {
            get {
              return resultMap["lastLogin"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastLogin")
            }
          }

          /// 用户上一次登录时使用的 IP
          public var lastIp: String? {
            get {
              return resultMap["lastIP"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastIP")
            }
          }

          /// 用户注册时间
          public var signedUp: String? {
            get {
              return resultMap["signedUp"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "signedUp")
            }
          }

          /// 该账号是否被禁用
          public var blocked: Bool? {
            get {
              return resultMap["blocked"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "blocked")
            }
          }

          /// 账号是否被软删除
          public var isDeleted: Bool? {
            get {
              return resultMap["isDeleted"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "isDeleted")
            }
          }

          public var device: String? {
            get {
              return resultMap["device"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "device")
            }
          }

          public var browser: String? {
            get {
              return resultMap["browser"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "browser")
            }
          }

          public var company: String? {
            get {
              return resultMap["company"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "company")
            }
          }

          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          public var givenName: String? {
            get {
              return resultMap["givenName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "givenName")
            }
          }

          public var familyName: String? {
            get {
              return resultMap["familyName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "familyName")
            }
          }

          public var middleName: String? {
            get {
              return resultMap["middleName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "middleName")
            }
          }

          public var profile: String? {
            get {
              return resultMap["profile"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "profile")
            }
          }

          public var preferredUsername: String? {
            get {
              return resultMap["preferredUsername"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "preferredUsername")
            }
          }

          public var website: String? {
            get {
              return resultMap["website"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "website")
            }
          }

          public var gender: String? {
            get {
              return resultMap["gender"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "gender")
            }
          }

          public var birthdate: String? {
            get {
              return resultMap["birthdate"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "birthdate")
            }
          }

          public var zoneinfo: String? {
            get {
              return resultMap["zoneinfo"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "zoneinfo")
            }
          }

          public var locale: String? {
            get {
              return resultMap["locale"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "locale")
            }
          }

          public var address: String? {
            get {
              return resultMap["address"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var formatted: String? {
            get {
              return resultMap["formatted"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "formatted")
            }
          }

          public var streetAddress: String? {
            get {
              return resultMap["streetAddress"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "streetAddress")
            }
          }

          public var locality: String? {
            get {
              return resultMap["locality"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "locality")
            }
          }

          public var region: String? {
            get {
              return resultMap["region"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "region")
            }
          }

          public var postalCode: String? {
            get {
              return resultMap["postalCode"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "postalCode")
            }
          }

          public var city: String? {
            get {
              return resultMap["city"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "city")
            }
          }

          public var province: String? {
            get {
              return resultMap["province"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "province")
            }
          }

          public var country: String? {
            get {
              return resultMap["country"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "country")
            }
          }

          public var createdAt: String? {
            get {
              return resultMap["createdAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String? {
            get {
              return resultMap["updatedAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "updatedAt")
            }
          }
        }
      }
    }
  }
}

public final class RemovePolicyAssignmentsMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation removePolicyAssignments($policies: [String!]!, $targetType: PolicyAssignmentTargetType!, $targetIdentifiers: [String!], $namespace: String) {
      removePolicyAssignments(
        policies: $policies
        targetType: $targetType
        targetIdentifiers: $targetIdentifiers
        namespace: $namespace
      ) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "removePolicyAssignments"

  public var policies: [String]
  public var targetType: PolicyAssignmentTargetType
  public var targetIdentifiers: [String]?
  public var namespace: String?

  public init(policies: [String], targetType: PolicyAssignmentTargetType, targetIdentifiers: [String]?, namespace: String? = nil) {
    self.policies = policies
    self.targetType = targetType
    self.targetIdentifiers = targetIdentifiers
    self.namespace = namespace
  }

  public var variables: GraphQLMap? {
    return ["policies": policies, "targetType": targetType, "targetIdentifiers": targetIdentifiers, "namespace": namespace]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("removePolicyAssignments", arguments: ["policies": GraphQLVariable("policies"), "targetType": GraphQLVariable("targetType"), "targetIdentifiers": GraphQLVariable("targetIdentifiers"), "namespace": GraphQLVariable("namespace")], type: .nonNull(.object(RemovePolicyAssignment.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(removePolicyAssignments: RemovePolicyAssignment) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "removePolicyAssignments": removePolicyAssignments.resultMap])
    }

    public var removePolicyAssignments: RemovePolicyAssignment {
      get {
        return RemovePolicyAssignment(unsafeResultMap: resultMap["removePolicyAssignments"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "removePolicyAssignments")
      }
    }

    public struct RemovePolicyAssignment: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class RemoveUdfMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation removeUdf($targetType: UDFTargetType!, $key: String!) {
      removeUdf(targetType: $targetType, key: $key) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "removeUdf"

  public var targetType: UDFTargetType
  public var key: String

  public init(targetType: UDFTargetType, key: String) {
    self.targetType = targetType
    self.key = key
  }

  public var variables: GraphQLMap? {
    return ["targetType": targetType, "key": key]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("removeUdf", arguments: ["targetType": GraphQLVariable("targetType"), "key": GraphQLVariable("key")], type: .object(RemoveUdf.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(removeUdf: RemoveUdf? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "removeUdf": removeUdf.flatMap { (value: RemoveUdf) -> ResultMap in value.resultMap }])
    }

    public var removeUdf: RemoveUdf? {
      get {
        return (resultMap["removeUdf"] as? ResultMap).flatMap { RemoveUdf(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "removeUdf")
      }
    }

    public struct RemoveUdf: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class RemoveUdvMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation removeUdv($targetType: UDFTargetType!, $targetId: String!, $key: String!) {
      removeUdv(targetType: $targetType, targetId: $targetId, key: $key) {
        __typename
        key
        dataType
        value
        label
      }
    }
    """

  public let operationName: String = "removeUdv"

  public var targetType: UDFTargetType
  public var targetId: String
  public var key: String

  public init(targetType: UDFTargetType, targetId: String, key: String) {
    self.targetType = targetType
    self.targetId = targetId
    self.key = key
  }

  public var variables: GraphQLMap? {
    return ["targetType": targetType, "targetId": targetId, "key": key]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("removeUdv", arguments: ["targetType": GraphQLVariable("targetType"), "targetId": GraphQLVariable("targetId"), "key": GraphQLVariable("key")], type: .list(.nonNull(.object(RemoveUdv.selections)))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(removeUdv: [RemoveUdv]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "removeUdv": removeUdv.flatMap { (value: [RemoveUdv]) -> [ResultMap] in value.map { (value: RemoveUdv) -> ResultMap in value.resultMap } }])
    }

    public var removeUdv: [RemoveUdv]? {
      get {
        return (resultMap["removeUdv"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [RemoveUdv] in value.map { (value: ResultMap) -> RemoveUdv in RemoveUdv(unsafeResultMap: value) } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [RemoveUdv]) -> [ResultMap] in value.map { (value: RemoveUdv) -> ResultMap in value.resultMap } }, forKey: "removeUdv")
      }
    }

    public struct RemoveUdv: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["UserDefinedData"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("key", type: .nonNull(.scalar(String.self))),
          GraphQLField("dataType", type: .nonNull(.scalar(UDFDataType.self))),
          GraphQLField("value", type: .nonNull(.scalar(String.self))),
          GraphQLField("label", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(key: String, dataType: UDFDataType, value: String, label: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "UserDefinedData", "key": key, "dataType": dataType, "value": value, "label": label])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var key: String {
        get {
          return resultMap["key"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "key")
        }
      }

      public var dataType: UDFDataType {
        get {
          return resultMap["dataType"]! as! UDFDataType
        }
        set {
          resultMap.updateValue(newValue, forKey: "dataType")
        }
      }

      public var value: String {
        get {
          return resultMap["value"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "value")
        }
      }

      public var label: String? {
        get {
          return resultMap["label"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "label")
        }
      }
    }
  }
}

public final class RemoveUserFromGroupMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation removeUserFromGroup($userIds: [String!]!, $code: String) {
      removeUserFromGroup(userIds: $userIds, code: $code) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "removeUserFromGroup"

  public var userIds: [String]
  public var code: String?

  public init(userIds: [String], code: String? = nil) {
    self.userIds = userIds
    self.code = code
  }

  public var variables: GraphQLMap? {
    return ["userIds": userIds, "code": code]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("removeUserFromGroup", arguments: ["userIds": GraphQLVariable("userIds"), "code": GraphQLVariable("code")], type: .nonNull(.object(RemoveUserFromGroup.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(removeUserFromGroup: RemoveUserFromGroup) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "removeUserFromGroup": removeUserFromGroup.resultMap])
    }

    public var removeUserFromGroup: RemoveUserFromGroup {
      get {
        return RemoveUserFromGroup(unsafeResultMap: resultMap["removeUserFromGroup"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "removeUserFromGroup")
      }
    }

    public struct RemoveUserFromGroup: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class RemoveWhitelistMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation removeWhitelist($type: WhitelistType!, $list: [String!]!) {
      removeWhitelist(type: $type, list: $list) {
        __typename
        createdAt
        updatedAt
        value
      }
    }
    """

  public let operationName: String = "removeWhitelist"

  public var type: WhitelistType
  public var list: [String]

  public init(type: WhitelistType, list: [String]) {
    self.type = type
    self.list = list
  }

  public var variables: GraphQLMap? {
    return ["type": type, "list": list]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("removeWhitelist", arguments: ["type": GraphQLVariable("type"), "list": GraphQLVariable("list")], type: .nonNull(.list(.object(RemoveWhitelist.selections)))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(removeWhitelist: [RemoveWhitelist?]) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "removeWhitelist": removeWhitelist.map { (value: RemoveWhitelist?) -> ResultMap? in value.flatMap { (value: RemoveWhitelist) -> ResultMap in value.resultMap } }])
    }

    public var removeWhitelist: [RemoveWhitelist?] {
      get {
        return (resultMap["removeWhitelist"] as! [ResultMap?]).map { (value: ResultMap?) -> RemoveWhitelist? in value.flatMap { (value: ResultMap) -> RemoveWhitelist in RemoveWhitelist(unsafeResultMap: value) } }
      }
      set {
        resultMap.updateValue(newValue.map { (value: RemoveWhitelist?) -> ResultMap? in value.flatMap { (value: RemoveWhitelist) -> ResultMap in value.resultMap } }, forKey: "removeWhitelist")
      }
    }

    public struct RemoveWhitelist: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["WhiteList"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("value", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(createdAt: String? = nil, updatedAt: String? = nil, value: String) {
        self.init(unsafeResultMap: ["__typename": "WhiteList", "createdAt": createdAt, "updatedAt": updatedAt, "value": value])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var value: String {
        get {
          return resultMap["value"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "value")
        }
      }
    }
  }
}

public final class ResetPasswordMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation resetPassword($phone: String, $email: String, $code: String!, $newPassword: String!) {
      resetPassword(
        phone: $phone
        email: $email
        code: $code
        newPassword: $newPassword
      ) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "resetPassword"

  public var phone: String?
  public var email: String?
  public var code: String
  public var newPassword: String

  public init(phone: String? = nil, email: String? = nil, code: String, newPassword: String) {
    self.phone = phone
    self.email = email
    self.code = code
    self.newPassword = newPassword
  }

  public var variables: GraphQLMap? {
    return ["phone": phone, "email": email, "code": code, "newPassword": newPassword]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("resetPassword", arguments: ["phone": GraphQLVariable("phone"), "email": GraphQLVariable("email"), "code": GraphQLVariable("code"), "newPassword": GraphQLVariable("newPassword")], type: .object(ResetPassword.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(resetPassword: ResetPassword? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "resetPassword": resetPassword.flatMap { (value: ResetPassword) -> ResultMap in value.resultMap }])
    }

    public var resetPassword: ResetPassword? {
      get {
        return (resultMap["resetPassword"] as? ResultMap).flatMap { ResetPassword(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "resetPassword")
      }
    }

    public struct ResetPassword: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class ResetPasswordByFirstLoginTokenMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation resetPasswordByFirstLoginToken($token: String!, $password: String!) {
      resetPasswordByFirstLoginToken(token: $token, password: $password) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "resetPasswordByFirstLoginToken"

  public var token: String
  public var password: String

  public init(token: String, password: String) {
    self.token = token
    self.password = password
  }

  public var variables: GraphQLMap? {
    return ["token": token, "password": password]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("resetPasswordByFirstLoginToken", arguments: ["token": GraphQLVariable("token"), "password": GraphQLVariable("password")], type: .object(ResetPasswordByFirstLoginToken.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(resetPasswordByFirstLoginToken: ResetPasswordByFirstLoginToken? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "resetPasswordByFirstLoginToken": resetPasswordByFirstLoginToken.flatMap { (value: ResetPasswordByFirstLoginToken) -> ResultMap in value.resultMap }])
    }

    /// 通过首次登录的 Token 重置密码
    public var resetPasswordByFirstLoginToken: ResetPasswordByFirstLoginToken? {
      get {
        return (resultMap["resetPasswordByFirstLoginToken"] as? ResultMap).flatMap { ResetPasswordByFirstLoginToken(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "resetPasswordByFirstLoginToken")
      }
    }

    public struct ResetPasswordByFirstLoginToken: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class ResetPasswordByForceResetTokenMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation resetPasswordByForceResetToken($token: String!, $oldPassword: String!, $newPassword: String!) {
      resetPasswordByForceResetToken(
        token: $token
        oldPassword: $oldPassword
        newPassword: $newPassword
      ) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "resetPasswordByForceResetToken"

  public var token: String
  public var oldPassword: String
  public var newPassword: String

  public init(token: String, oldPassword: String, newPassword: String) {
    self.token = token
    self.oldPassword = oldPassword
    self.newPassword = newPassword
  }

  public var variables: GraphQLMap? {
    return ["token": token, "oldPassword": oldPassword, "newPassword": newPassword]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("resetPasswordByForceResetToken", arguments: ["token": GraphQLVariable("token"), "oldPassword": GraphQLVariable("oldPassword"), "newPassword": GraphQLVariable("newPassword")], type: .object(ResetPasswordByForceResetToken.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(resetPasswordByForceResetToken: ResetPasswordByForceResetToken? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "resetPasswordByForceResetToken": resetPasswordByForceResetToken.flatMap { (value: ResetPasswordByForceResetToken) -> ResultMap in value.resultMap }])
    }

    /// 通过密码强制更新临时 Token 修改密码
    public var resetPasswordByForceResetToken: ResetPasswordByForceResetToken? {
      get {
        return (resultMap["resetPasswordByForceResetToken"] as? ResultMap).flatMap { ResetPasswordByForceResetToken(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "resetPasswordByForceResetToken")
      }
    }

    public struct ResetPasswordByForceResetToken: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class RevokeRoleMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation revokeRole($namespace: String, $roleCode: String, $roleCodes: [String], $userIds: [String!], $groupCodes: [String!], $nodeCodes: [String!]) {
      revokeRole(
        namespace: $namespace
        roleCode: $roleCode
        roleCodes: $roleCodes
        userIds: $userIds
        groupCodes: $groupCodes
        nodeCodes: $nodeCodes
      ) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "revokeRole"

  public var namespace: String?
  public var roleCode: String?
  public var roleCodes: [String?]?
  public var userIds: [String]?
  public var groupCodes: [String]?
  public var nodeCodes: [String]?

  public init(namespace: String? = nil, roleCode: String? = nil, roleCodes: [String?]? = nil, userIds: [String]?, groupCodes: [String]?, nodeCodes: [String]?) {
    self.namespace = namespace
    self.roleCode = roleCode
    self.roleCodes = roleCodes
    self.userIds = userIds
    self.groupCodes = groupCodes
    self.nodeCodes = nodeCodes
  }

  public var variables: GraphQLMap? {
    return ["namespace": namespace, "roleCode": roleCode, "roleCodes": roleCodes, "userIds": userIds, "groupCodes": groupCodes, "nodeCodes": nodeCodes]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("revokeRole", arguments: ["namespace": GraphQLVariable("namespace"), "roleCode": GraphQLVariable("roleCode"), "roleCodes": GraphQLVariable("roleCodes"), "userIds": GraphQLVariable("userIds"), "groupCodes": GraphQLVariable("groupCodes"), "nodeCodes": GraphQLVariable("nodeCodes")], type: .object(RevokeRole.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(revokeRole: RevokeRole? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "revokeRole": revokeRole.flatMap { (value: RevokeRole) -> ResultMap in value.resultMap }])
    }

    /// 撤销角色
    public var revokeRole: RevokeRole? {
      get {
        return (resultMap["revokeRole"] as? ResultMap).flatMap { RevokeRole(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "revokeRole")
      }
    }

    public struct RevokeRole: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class RoleQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query role($code: String!, $namespace: String) {
      role(code: $code, namespace: $namespace) {
        __typename
        id
        namespace
        code
        arn
        description
        createdAt
        updatedAt
        parent {
          __typename
          namespace
          code
          arn
          description
          createdAt
          updatedAt
        }
      }
    }
    """

  public let operationName: String = "role"

  public var code: String
  public var namespace: String?

  public init(code: String, namespace: String? = nil) {
    self.code = code
    self.namespace = namespace
  }

  public var variables: GraphQLMap? {
    return ["code": code, "namespace": namespace]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("role", arguments: ["code": GraphQLVariable("code"), "namespace": GraphQLVariable("namespace")], type: .object(Role.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(role: Role? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "role": role.flatMap { (value: Role) -> ResultMap in value.resultMap }])
    }

    /// 通过 **code** 查询角色详情
    public var role: Role? {
      get {
        return (resultMap["role"] as? ResultMap).flatMap { Role(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "role")
      }
    }

    public struct Role: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Role"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("namespace", type: .nonNull(.scalar(String.self))),
          GraphQLField("code", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("parent", type: .object(Parent.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, namespace: String, code: String, arn: String, description: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, parent: Parent? = nil) {
        self.init(unsafeResultMap: ["__typename": "Role", "id": id, "namespace": namespace, "code": code, "arn": arn, "description": description, "createdAt": createdAt, "updatedAt": updatedAt, "parent": parent.flatMap { (value: Parent) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// 权限组 code
      public var namespace: String {
        get {
          return resultMap["namespace"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "namespace")
        }
      }

      /// 唯一标志 code
      public var code: String {
        get {
          return resultMap["code"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      /// 资源描述符 arn
      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 角色描述
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 创建时间
      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      /// 修改时间
      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 父角色
      public var parent: Parent? {
        get {
          return (resultMap["parent"] as? ResultMap).flatMap { Parent(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "parent")
        }
      }

      public struct Parent: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Role"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("namespace", type: .nonNull(.scalar(String.self))),
            GraphQLField("code", type: .nonNull(.scalar(String.self))),
            GraphQLField("arn", type: .nonNull(.scalar(String.self))),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("createdAt", type: .scalar(String.self)),
            GraphQLField("updatedAt", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(namespace: String, code: String, arn: String, description: String? = nil, createdAt: String? = nil, updatedAt: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "Role", "namespace": namespace, "code": code, "arn": arn, "description": description, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 权限组 code
        public var namespace: String {
          get {
            return resultMap["namespace"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "namespace")
          }
        }

        /// 唯一标志 code
        public var code: String {
          get {
            return resultMap["code"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "code")
          }
        }

        /// 资源描述符 arn
        public var arn: String {
          get {
            return resultMap["arn"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "arn")
          }
        }

        /// 角色描述
        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 创建时间
        public var createdAt: String? {
          get {
            return resultMap["createdAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        /// 修改时间
        public var updatedAt: String? {
          get {
            return resultMap["updatedAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }
      }
    }
  }
}

public final class RolesQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query roles($namespace: String, $page: Int, $limit: Int, $sortBy: SortByEnum) {
      roles(namespace: $namespace, page: $page, limit: $limit, sortBy: $sortBy) {
        __typename
        totalCount
        list {
          __typename
          id
          namespace
          code
          arn
          description
          createdAt
          updatedAt
        }
      }
    }
    """

  public let operationName: String = "roles"

  public var namespace: String?
  public var page: Int?
  public var limit: Int?
  public var sortBy: SortByEnum?

  public init(namespace: String? = nil, page: Int? = nil, limit: Int? = nil, sortBy: SortByEnum? = nil) {
    self.namespace = namespace
    self.page = page
    self.limit = limit
    self.sortBy = sortBy
  }

  public var variables: GraphQLMap? {
    return ["namespace": namespace, "page": page, "limit": limit, "sortBy": sortBy]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("roles", arguments: ["namespace": GraphQLVariable("namespace"), "page": GraphQLVariable("page"), "limit": GraphQLVariable("limit"), "sortBy": GraphQLVariable("sortBy")], type: .nonNull(.object(Role.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(roles: Role) {
      self.init(unsafeResultMap: ["__typename": "Query", "roles": roles.resultMap])
    }

    /// 获取角色列表
    public var roles: Role {
      get {
        return Role(unsafeResultMap: resultMap["roles"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "roles")
      }
    }

    public struct Role: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PaginatedRoles"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
          GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(totalCount: Int, list: [List]) {
        self.init(unsafeResultMap: ["__typename": "PaginatedRoles", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var totalCount: Int {
        get {
          return resultMap["totalCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "totalCount")
        }
      }

      public var list: [List] {
        get {
          return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
        }
      }

      public struct List: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Role"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(String.self))),
            GraphQLField("namespace", type: .nonNull(.scalar(String.self))),
            GraphQLField("code", type: .nonNull(.scalar(String.self))),
            GraphQLField("arn", type: .nonNull(.scalar(String.self))),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("createdAt", type: .scalar(String.self)),
            GraphQLField("updatedAt", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String, namespace: String, code: String, arn: String, description: String? = nil, createdAt: String? = nil, updatedAt: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "Role", "id": id, "namespace": namespace, "code": code, "arn": arn, "description": description, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String {
          get {
            return resultMap["id"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        /// 权限组 code
        public var namespace: String {
          get {
            return resultMap["namespace"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "namespace")
          }
        }

        /// 唯一标志 code
        public var code: String {
          get {
            return resultMap["code"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "code")
          }
        }

        /// 资源描述符 arn
        public var arn: String {
          get {
            return resultMap["arn"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "arn")
          }
        }

        /// 角色描述
        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 创建时间
        public var createdAt: String? {
          get {
            return resultMap["createdAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        /// 修改时间
        public var updatedAt: String? {
          get {
            return resultMap["updatedAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }
      }
    }
  }
}

public final class RoleWithUsersQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query roleWithUsers($code: String!, $namespace: String, $page: Int, $limit: Int) {
      role(code: $code, namespace: $namespace) {
        __typename
        users(page: $page, limit: $limit) {
          __typename
          totalCount
          list {
            __typename
            id
            arn
            status
            userPoolId
            username
            email
            emailVerified
            phone
            phoneVerified
            unionid
            openid
            nickname
            registerSource
            photo
            password
            oauth
            token
            tokenExpiredAt
            loginsCount
            lastLogin
            lastIP
            signedUp
            blocked
            isDeleted
            device
            browser
            company
            name
            givenName
            familyName
            middleName
            profile
            preferredUsername
            website
            gender
            birthdate
            zoneinfo
            locale
            address
            formatted
            streetAddress
            locality
            region
            postalCode
            city
            province
            country
            createdAt
            updatedAt
            externalId
          }
        }
      }
    }
    """

  public let operationName: String = "roleWithUsers"

  public var code: String
  public var namespace: String?
  public var page: Int?
  public var limit: Int?

  public init(code: String, namespace: String? = nil, page: Int? = nil, limit: Int? = nil) {
    self.code = code
    self.namespace = namespace
    self.page = page
    self.limit = limit
  }

  public var variables: GraphQLMap? {
    return ["code": code, "namespace": namespace, "page": page, "limit": limit]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("role", arguments: ["code": GraphQLVariable("code"), "namespace": GraphQLVariable("namespace")], type: .object(Role.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(role: Role? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "role": role.flatMap { (value: Role) -> ResultMap in value.resultMap }])
    }

    /// 通过 **code** 查询角色详情
    public var role: Role? {
      get {
        return (resultMap["role"] as? ResultMap).flatMap { Role(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "role")
      }
    }

    public struct Role: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Role"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("users", arguments: ["page": GraphQLVariable("page"), "limit": GraphQLVariable("limit")], type: .nonNull(.object(User.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(users: User) {
        self.init(unsafeResultMap: ["__typename": "Role", "users": users.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 被授予此角色的用户列表
      public var users: User {
        get {
          return User(unsafeResultMap: resultMap["users"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "users")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PaginatedUsers"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
            GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(totalCount: Int, list: [List]) {
          self.init(unsafeResultMap: ["__typename": "PaginatedUsers", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var totalCount: Int {
          get {
            return resultMap["totalCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalCount")
          }
        }

        public var list: [List] {
          get {
            return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
          }
        }

        public struct List: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["User"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(String.self))),
              GraphQLField("arn", type: .nonNull(.scalar(String.self))),
              GraphQLField("status", type: .scalar(UserStatus.self)),
              GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .scalar(String.self)),
              GraphQLField("email", type: .scalar(String.self)),
              GraphQLField("emailVerified", type: .scalar(Bool.self)),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("phoneVerified", type: .scalar(Bool.self)),
              GraphQLField("unionid", type: .scalar(String.self)),
              GraphQLField("openid", type: .scalar(String.self)),
              GraphQLField("nickname", type: .scalar(String.self)),
              GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
              GraphQLField("photo", type: .scalar(String.self)),
              GraphQLField("password", type: .scalar(String.self)),
              GraphQLField("oauth", type: .scalar(String.self)),
              GraphQLField("token", type: .scalar(String.self)),
              GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
              GraphQLField("loginsCount", type: .scalar(Int.self)),
              GraphQLField("lastLogin", type: .scalar(String.self)),
              GraphQLField("lastIP", type: .scalar(String.self)),
              GraphQLField("signedUp", type: .scalar(String.self)),
              GraphQLField("blocked", type: .scalar(Bool.self)),
              GraphQLField("isDeleted", type: .scalar(Bool.self)),
              GraphQLField("device", type: .scalar(String.self)),
              GraphQLField("browser", type: .scalar(String.self)),
              GraphQLField("company", type: .scalar(String.self)),
              GraphQLField("name", type: .scalar(String.self)),
              GraphQLField("givenName", type: .scalar(String.self)),
              GraphQLField("familyName", type: .scalar(String.self)),
              GraphQLField("middleName", type: .scalar(String.self)),
              GraphQLField("profile", type: .scalar(String.self)),
              GraphQLField("preferredUsername", type: .scalar(String.self)),
              GraphQLField("website", type: .scalar(String.self)),
              GraphQLField("gender", type: .scalar(String.self)),
              GraphQLField("birthdate", type: .scalar(String.self)),
              GraphQLField("zoneinfo", type: .scalar(String.self)),
              GraphQLField("locale", type: .scalar(String.self)),
              GraphQLField("address", type: .scalar(String.self)),
              GraphQLField("formatted", type: .scalar(String.self)),
              GraphQLField("streetAddress", type: .scalar(String.self)),
              GraphQLField("locality", type: .scalar(String.self)),
              GraphQLField("region", type: .scalar(String.self)),
              GraphQLField("postalCode", type: .scalar(String.self)),
              GraphQLField("city", type: .scalar(String.self)),
              GraphQLField("province", type: .scalar(String.self)),
              GraphQLField("country", type: .scalar(String.self)),
              GraphQLField("createdAt", type: .scalar(String.self)),
              GraphQLField("updatedAt", type: .scalar(String.self)),
              GraphQLField("externalId", type: .scalar(String.self)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: String, arn: String, status: UserStatus? = nil, userPoolId: String, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "status": status, "userPoolId": userPoolId, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 用户 ID
          public var id: String {
            get {
              return resultMap["id"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          public var arn: String {
            get {
              return resultMap["arn"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "arn")
            }
          }

          /// 用户在组织机构中的状态
          public var status: UserStatus? {
            get {
              return resultMap["status"] as? UserStatus
            }
            set {
              resultMap.updateValue(newValue, forKey: "status")
            }
          }

          /// 用户池 ID
          public var userPoolId: String {
            get {
              return resultMap["userPoolId"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "userPoolId")
            }
          }

          /// 用户名，用户池内唯一
          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }

          /// 邮箱，用户池内唯一
          public var email: String? {
            get {
              return resultMap["email"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "email")
            }
          }

          /// 邮箱是否已验证
          public var emailVerified: Bool? {
            get {
              return resultMap["emailVerified"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "emailVerified")
            }
          }

          /// 手机号，用户池内唯一
          public var phone: String? {
            get {
              return resultMap["phone"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "phone")
            }
          }

          /// 手机号是否已验证
          public var phoneVerified: Bool? {
            get {
              return resultMap["phoneVerified"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "phoneVerified")
            }
          }

          public var unionid: String? {
            get {
              return resultMap["unionid"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "unionid")
            }
          }

          public var openid: String? {
            get {
              return resultMap["openid"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "openid")
            }
          }

          /// 昵称，该字段不唯一。
          public var nickname: String? {
            get {
              return resultMap["nickname"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "nickname")
            }
          }

          /// 注册方式
          public var registerSource: [String]? {
            get {
              return resultMap["registerSource"] as? [String]
            }
            set {
              resultMap.updateValue(newValue, forKey: "registerSource")
            }
          }

          /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
          public var photo: String? {
            get {
              return resultMap["photo"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "photo")
            }
          }

          /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
          public var password: String? {
            get {
              return resultMap["password"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "password")
            }
          }

          /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
          public var oauth: String? {
            get {
              return resultMap["oauth"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "oauth")
            }
          }

          /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
          public var token: String? {
            get {
              return resultMap["token"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "token")
            }
          }

          /// token 过期时间
          public var tokenExpiredAt: String? {
            get {
              return resultMap["tokenExpiredAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
            }
          }

          /// 用户登录总次数
          public var loginsCount: Int? {
            get {
              return resultMap["loginsCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "loginsCount")
            }
          }

          /// 用户最近一次登录时间
          public var lastLogin: String? {
            get {
              return resultMap["lastLogin"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastLogin")
            }
          }

          /// 用户上一次登录时使用的 IP
          public var lastIp: String? {
            get {
              return resultMap["lastIP"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastIP")
            }
          }

          /// 用户注册时间
          public var signedUp: String? {
            get {
              return resultMap["signedUp"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "signedUp")
            }
          }

          /// 该账号是否被禁用
          public var blocked: Bool? {
            get {
              return resultMap["blocked"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "blocked")
            }
          }

          /// 账号是否被软删除
          public var isDeleted: Bool? {
            get {
              return resultMap["isDeleted"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "isDeleted")
            }
          }

          public var device: String? {
            get {
              return resultMap["device"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "device")
            }
          }

          public var browser: String? {
            get {
              return resultMap["browser"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "browser")
            }
          }

          public var company: String? {
            get {
              return resultMap["company"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "company")
            }
          }

          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          public var givenName: String? {
            get {
              return resultMap["givenName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "givenName")
            }
          }

          public var familyName: String? {
            get {
              return resultMap["familyName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "familyName")
            }
          }

          public var middleName: String? {
            get {
              return resultMap["middleName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "middleName")
            }
          }

          public var profile: String? {
            get {
              return resultMap["profile"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "profile")
            }
          }

          public var preferredUsername: String? {
            get {
              return resultMap["preferredUsername"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "preferredUsername")
            }
          }

          public var website: String? {
            get {
              return resultMap["website"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "website")
            }
          }

          public var gender: String? {
            get {
              return resultMap["gender"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "gender")
            }
          }

          public var birthdate: String? {
            get {
              return resultMap["birthdate"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "birthdate")
            }
          }

          public var zoneinfo: String? {
            get {
              return resultMap["zoneinfo"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "zoneinfo")
            }
          }

          public var locale: String? {
            get {
              return resultMap["locale"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "locale")
            }
          }

          public var address: String? {
            get {
              return resultMap["address"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var formatted: String? {
            get {
              return resultMap["formatted"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "formatted")
            }
          }

          public var streetAddress: String? {
            get {
              return resultMap["streetAddress"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "streetAddress")
            }
          }

          public var locality: String? {
            get {
              return resultMap["locality"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "locality")
            }
          }

          public var region: String? {
            get {
              return resultMap["region"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "region")
            }
          }

          public var postalCode: String? {
            get {
              return resultMap["postalCode"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "postalCode")
            }
          }

          public var city: String? {
            get {
              return resultMap["city"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "city")
            }
          }

          public var province: String? {
            get {
              return resultMap["province"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "province")
            }
          }

          public var country: String? {
            get {
              return resultMap["country"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "country")
            }
          }

          public var createdAt: String? {
            get {
              return resultMap["createdAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String? {
            get {
              return resultMap["updatedAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "updatedAt")
            }
          }

          /// 用户外部 ID
          public var externalId: String? {
            get {
              return resultMap["externalId"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "externalId")
            }
          }
        }
      }
    }
  }
}

public final class RoleWithUsersWithCustomDataQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query roleWithUsersWithCustomData($code: String!, $namespace: String, $page: Int, $limit: Int) {
      role(code: $code, namespace: $namespace) {
        __typename
        users(page: $page, limit: $limit) {
          __typename
          totalCount
          list {
            __typename
            id
            arn
            status
            userPoolId
            username
            email
            emailVerified
            phone
            phoneVerified
            unionid
            openid
            nickname
            registerSource
            photo
            password
            oauth
            token
            tokenExpiredAt
            loginsCount
            lastLogin
            lastIP
            signedUp
            blocked
            isDeleted
            device
            browser
            company
            name
            givenName
            familyName
            middleName
            profile
            preferredUsername
            website
            gender
            birthdate
            zoneinfo
            locale
            address
            formatted
            streetAddress
            locality
            region
            postalCode
            city
            province
            country
            createdAt
            updatedAt
            externalId
            customData {
              __typename
              key
              value
              dataType
              label
            }
          }
        }
      }
    }
    """

  public let operationName: String = "roleWithUsersWithCustomData"

  public var code: String
  public var namespace: String?
  public var page: Int?
  public var limit: Int?

  public init(code: String, namespace: String? = nil, page: Int? = nil, limit: Int? = nil) {
    self.code = code
    self.namespace = namespace
    self.page = page
    self.limit = limit
  }

  public var variables: GraphQLMap? {
    return ["code": code, "namespace": namespace, "page": page, "limit": limit]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("role", arguments: ["code": GraphQLVariable("code"), "namespace": GraphQLVariable("namespace")], type: .object(Role.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(role: Role? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "role": role.flatMap { (value: Role) -> ResultMap in value.resultMap }])
    }

    /// 通过 **code** 查询角色详情
    public var role: Role? {
      get {
        return (resultMap["role"] as? ResultMap).flatMap { Role(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "role")
      }
    }

    public struct Role: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Role"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("users", arguments: ["page": GraphQLVariable("page"), "limit": GraphQLVariable("limit")], type: .nonNull(.object(User.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(users: User) {
        self.init(unsafeResultMap: ["__typename": "Role", "users": users.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 被授予此角色的用户列表
      public var users: User {
        get {
          return User(unsafeResultMap: resultMap["users"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "users")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PaginatedUsers"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
            GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(totalCount: Int, list: [List]) {
          self.init(unsafeResultMap: ["__typename": "PaginatedUsers", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var totalCount: Int {
          get {
            return resultMap["totalCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalCount")
          }
        }

        public var list: [List] {
          get {
            return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
          }
          set {
            resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
          }
        }

        public struct List: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["User"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("id", type: .nonNull(.scalar(String.self))),
              GraphQLField("arn", type: .nonNull(.scalar(String.self))),
              GraphQLField("status", type: .scalar(UserStatus.self)),
              GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
              GraphQLField("username", type: .scalar(String.self)),
              GraphQLField("email", type: .scalar(String.self)),
              GraphQLField("emailVerified", type: .scalar(Bool.self)),
              GraphQLField("phone", type: .scalar(String.self)),
              GraphQLField("phoneVerified", type: .scalar(Bool.self)),
              GraphQLField("unionid", type: .scalar(String.self)),
              GraphQLField("openid", type: .scalar(String.self)),
              GraphQLField("nickname", type: .scalar(String.self)),
              GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
              GraphQLField("photo", type: .scalar(String.self)),
              GraphQLField("password", type: .scalar(String.self)),
              GraphQLField("oauth", type: .scalar(String.self)),
              GraphQLField("token", type: .scalar(String.self)),
              GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
              GraphQLField("loginsCount", type: .scalar(Int.self)),
              GraphQLField("lastLogin", type: .scalar(String.self)),
              GraphQLField("lastIP", type: .scalar(String.self)),
              GraphQLField("signedUp", type: .scalar(String.self)),
              GraphQLField("blocked", type: .scalar(Bool.self)),
              GraphQLField("isDeleted", type: .scalar(Bool.self)),
              GraphQLField("device", type: .scalar(String.self)),
              GraphQLField("browser", type: .scalar(String.self)),
              GraphQLField("company", type: .scalar(String.self)),
              GraphQLField("name", type: .scalar(String.self)),
              GraphQLField("givenName", type: .scalar(String.self)),
              GraphQLField("familyName", type: .scalar(String.self)),
              GraphQLField("middleName", type: .scalar(String.self)),
              GraphQLField("profile", type: .scalar(String.self)),
              GraphQLField("preferredUsername", type: .scalar(String.self)),
              GraphQLField("website", type: .scalar(String.self)),
              GraphQLField("gender", type: .scalar(String.self)),
              GraphQLField("birthdate", type: .scalar(String.self)),
              GraphQLField("zoneinfo", type: .scalar(String.self)),
              GraphQLField("locale", type: .scalar(String.self)),
              GraphQLField("address", type: .scalar(String.self)),
              GraphQLField("formatted", type: .scalar(String.self)),
              GraphQLField("streetAddress", type: .scalar(String.self)),
              GraphQLField("locality", type: .scalar(String.self)),
              GraphQLField("region", type: .scalar(String.self)),
              GraphQLField("postalCode", type: .scalar(String.self)),
              GraphQLField("city", type: .scalar(String.self)),
              GraphQLField("province", type: .scalar(String.self)),
              GraphQLField("country", type: .scalar(String.self)),
              GraphQLField("createdAt", type: .scalar(String.self)),
              GraphQLField("updatedAt", type: .scalar(String.self)),
              GraphQLField("externalId", type: .scalar(String.self)),
              GraphQLField("customData", type: .list(.object(CustomDatum.selections))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(id: String, arn: String, status: UserStatus? = nil, userPoolId: String, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil, customData: [CustomDatum?]? = nil) {
            self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "status": status, "userPoolId": userPoolId, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId, "customData": customData.flatMap { (value: [CustomDatum?]) -> [ResultMap?] in value.map { (value: CustomDatum?) -> ResultMap? in value.flatMap { (value: CustomDatum) -> ResultMap in value.resultMap } } }])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          /// 用户 ID
          public var id: String {
            get {
              return resultMap["id"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "id")
            }
          }

          public var arn: String {
            get {
              return resultMap["arn"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "arn")
            }
          }

          /// 用户在组织机构中的状态
          public var status: UserStatus? {
            get {
              return resultMap["status"] as? UserStatus
            }
            set {
              resultMap.updateValue(newValue, forKey: "status")
            }
          }

          /// 用户池 ID
          public var userPoolId: String {
            get {
              return resultMap["userPoolId"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "userPoolId")
            }
          }

          /// 用户名，用户池内唯一
          public var username: String? {
            get {
              return resultMap["username"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "username")
            }
          }

          /// 邮箱，用户池内唯一
          public var email: String? {
            get {
              return resultMap["email"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "email")
            }
          }

          /// 邮箱是否已验证
          public var emailVerified: Bool? {
            get {
              return resultMap["emailVerified"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "emailVerified")
            }
          }

          /// 手机号，用户池内唯一
          public var phone: String? {
            get {
              return resultMap["phone"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "phone")
            }
          }

          /// 手机号是否已验证
          public var phoneVerified: Bool? {
            get {
              return resultMap["phoneVerified"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "phoneVerified")
            }
          }

          public var unionid: String? {
            get {
              return resultMap["unionid"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "unionid")
            }
          }

          public var openid: String? {
            get {
              return resultMap["openid"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "openid")
            }
          }

          /// 昵称，该字段不唯一。
          public var nickname: String? {
            get {
              return resultMap["nickname"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "nickname")
            }
          }

          /// 注册方式
          public var registerSource: [String]? {
            get {
              return resultMap["registerSource"] as? [String]
            }
            set {
              resultMap.updateValue(newValue, forKey: "registerSource")
            }
          }

          /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
          public var photo: String? {
            get {
              return resultMap["photo"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "photo")
            }
          }

          /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
          public var password: String? {
            get {
              return resultMap["password"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "password")
            }
          }

          /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
          public var oauth: String? {
            get {
              return resultMap["oauth"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "oauth")
            }
          }

          /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
          public var token: String? {
            get {
              return resultMap["token"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "token")
            }
          }

          /// token 过期时间
          public var tokenExpiredAt: String? {
            get {
              return resultMap["tokenExpiredAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
            }
          }

          /// 用户登录总次数
          public var loginsCount: Int? {
            get {
              return resultMap["loginsCount"] as? Int
            }
            set {
              resultMap.updateValue(newValue, forKey: "loginsCount")
            }
          }

          /// 用户最近一次登录时间
          public var lastLogin: String? {
            get {
              return resultMap["lastLogin"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastLogin")
            }
          }

          /// 用户上一次登录时使用的 IP
          public var lastIp: String? {
            get {
              return resultMap["lastIP"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "lastIP")
            }
          }

          /// 用户注册时间
          public var signedUp: String? {
            get {
              return resultMap["signedUp"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "signedUp")
            }
          }

          /// 该账号是否被禁用
          public var blocked: Bool? {
            get {
              return resultMap["blocked"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "blocked")
            }
          }

          /// 账号是否被软删除
          public var isDeleted: Bool? {
            get {
              return resultMap["isDeleted"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "isDeleted")
            }
          }

          public var device: String? {
            get {
              return resultMap["device"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "device")
            }
          }

          public var browser: String? {
            get {
              return resultMap["browser"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "browser")
            }
          }

          public var company: String? {
            get {
              return resultMap["company"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "company")
            }
          }

          public var name: String? {
            get {
              return resultMap["name"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "name")
            }
          }

          public var givenName: String? {
            get {
              return resultMap["givenName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "givenName")
            }
          }

          public var familyName: String? {
            get {
              return resultMap["familyName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "familyName")
            }
          }

          public var middleName: String? {
            get {
              return resultMap["middleName"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "middleName")
            }
          }

          public var profile: String? {
            get {
              return resultMap["profile"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "profile")
            }
          }

          public var preferredUsername: String? {
            get {
              return resultMap["preferredUsername"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "preferredUsername")
            }
          }

          public var website: String? {
            get {
              return resultMap["website"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "website")
            }
          }

          public var gender: String? {
            get {
              return resultMap["gender"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "gender")
            }
          }

          public var birthdate: String? {
            get {
              return resultMap["birthdate"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "birthdate")
            }
          }

          public var zoneinfo: String? {
            get {
              return resultMap["zoneinfo"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "zoneinfo")
            }
          }

          public var locale: String? {
            get {
              return resultMap["locale"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "locale")
            }
          }

          public var address: String? {
            get {
              return resultMap["address"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "address")
            }
          }

          public var formatted: String? {
            get {
              return resultMap["formatted"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "formatted")
            }
          }

          public var streetAddress: String? {
            get {
              return resultMap["streetAddress"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "streetAddress")
            }
          }

          public var locality: String? {
            get {
              return resultMap["locality"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "locality")
            }
          }

          public var region: String? {
            get {
              return resultMap["region"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "region")
            }
          }

          public var postalCode: String? {
            get {
              return resultMap["postalCode"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "postalCode")
            }
          }

          public var city: String? {
            get {
              return resultMap["city"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "city")
            }
          }

          public var province: String? {
            get {
              return resultMap["province"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "province")
            }
          }

          public var country: String? {
            get {
              return resultMap["country"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "country")
            }
          }

          public var createdAt: String? {
            get {
              return resultMap["createdAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "createdAt")
            }
          }

          public var updatedAt: String? {
            get {
              return resultMap["updatedAt"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "updatedAt")
            }
          }

          /// 用户外部 ID
          public var externalId: String? {
            get {
              return resultMap["externalId"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "externalId")
            }
          }

          /// 用户自定义数据
          public var customData: [CustomDatum?]? {
            get {
              return (resultMap["customData"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [CustomDatum?] in value.map { (value: ResultMap?) -> CustomDatum? in value.flatMap { (value: ResultMap) -> CustomDatum in CustomDatum(unsafeResultMap: value) } } }
            }
            set {
              resultMap.updateValue(newValue.flatMap { (value: [CustomDatum?]) -> [ResultMap?] in value.map { (value: CustomDatum?) -> ResultMap? in value.flatMap { (value: CustomDatum) -> ResultMap in value.resultMap } } }, forKey: "customData")
            }
          }

          public struct CustomDatum: GraphQLSelectionSet {
            public static let possibleTypes: [String] = ["UserCustomData"]

            public static var selections: [GraphQLSelection] {
              return [
                GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
                GraphQLField("key", type: .nonNull(.scalar(String.self))),
                GraphQLField("value", type: .scalar(String.self)),
                GraphQLField("dataType", type: .nonNull(.scalar(UDFDataType.self))),
                GraphQLField("label", type: .scalar(String.self)),
              ]
            }

            public private(set) var resultMap: ResultMap

            public init(unsafeResultMap: ResultMap) {
              self.resultMap = unsafeResultMap
            }

            public init(key: String, value: String? = nil, dataType: UDFDataType, label: String? = nil) {
              self.init(unsafeResultMap: ["__typename": "UserCustomData", "key": key, "value": value, "dataType": dataType, "label": label])
            }

            public var __typename: String {
              get {
                return resultMap["__typename"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "__typename")
              }
            }

            public var key: String {
              get {
                return resultMap["key"]! as! String
              }
              set {
                resultMap.updateValue(newValue, forKey: "key")
              }
            }

            public var value: String? {
              get {
                return resultMap["value"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "value")
              }
            }

            public var dataType: UDFDataType {
              get {
                return resultMap["dataType"]! as! UDFDataType
              }
              set {
                resultMap.updateValue(newValue, forKey: "dataType")
              }
            }

            public var label: String? {
              get {
                return resultMap["label"] as? String
              }
              set {
                resultMap.updateValue(newValue, forKey: "label")
              }
            }
          }
        }
      }
    }
  }
}

public final class RootNodeQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query rootNode($orgId: String!) {
      rootNode(orgId: $orgId) {
        __typename
        id
        orgId
        name
        nameI18n
        description
        descriptionI18n
        order
        code
        root
        depth
        path
        codePath
        namePath
        createdAt
        updatedAt
        children
      }
    }
    """

  public let operationName: String = "rootNode"

  public var orgId: String

  public init(orgId: String) {
    self.orgId = orgId
  }

  public var variables: GraphQLMap? {
    return ["orgId": orgId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("rootNode", arguments: ["orgId": GraphQLVariable("orgId")], type: .nonNull(.object(RootNode.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(rootNode: RootNode) {
      self.init(unsafeResultMap: ["__typename": "Query", "rootNode": rootNode.resultMap])
    }

    public var rootNode: RootNode {
      get {
        return RootNode(unsafeResultMap: resultMap["rootNode"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "rootNode")
      }
    }

    public struct RootNode: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Node"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("orgId", type: .scalar(String.self)),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("nameI18n", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("descriptionI18n", type: .scalar(String.self)),
          GraphQLField("order", type: .scalar(Int.self)),
          GraphQLField("code", type: .scalar(String.self)),
          GraphQLField("root", type: .scalar(Bool.self)),
          GraphQLField("depth", type: .scalar(Int.self)),
          GraphQLField("path", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("codePath", type: .nonNull(.list(.scalar(String.self)))),
          GraphQLField("namePath", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("children", type: .list(.nonNull(.scalar(String.self)))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, orgId: String? = nil, name: String, nameI18n: String? = nil, description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil, root: Bool? = nil, depth: Int? = nil, path: [String], codePath: [String?], namePath: [String], createdAt: String? = nil, updatedAt: String? = nil, children: [String]? = nil) {
        self.init(unsafeResultMap: ["__typename": "Node", "id": id, "orgId": orgId, "name": name, "nameI18n": nameI18n, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code, "root": root, "depth": depth, "path": path, "codePath": codePath, "namePath": namePath, "createdAt": createdAt, "updatedAt": updatedAt, "children": children])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// 组织机构 ID
      public var orgId: String? {
        get {
          return resultMap["orgId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "orgId")
        }
      }

      /// 节点名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。
      public var nameI18n: String? {
        get {
          return resultMap["nameI18n"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nameI18n")
        }
      }

      /// 描述信息
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 多语言描述信息
      public var descriptionI18n: String? {
        get {
          return resultMap["descriptionI18n"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "descriptionI18n")
        }
      }

      /// 在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)
      public var order: Int? {
        get {
          return resultMap["order"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "order")
        }
      }

      /// 节点唯一标志码，可以通过 code 进行搜索
      public var code: String? {
        get {
          return resultMap["code"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      /// 是否为根节点
      public var root: Bool? {
        get {
          return resultMap["root"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "root")
        }
      }

      /// 距离父节点的深度（如果是查询整棵树，返回的 **depth** 为距离根节点的深度，如果是查询某个节点的子节点，返回的 **depth** 指的是距离该节点的深度。）
      public var depth: Int? {
        get {
          return resultMap["depth"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "depth")
        }
      }

      public var path: [String] {
        get {
          return resultMap["path"]! as! [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "path")
        }
      }

      public var codePath: [String?] {
        get {
          return resultMap["codePath"]! as! [String?]
        }
        set {
          resultMap.updateValue(newValue, forKey: "codePath")
        }
      }

      public var namePath: [String] {
        get {
          return resultMap["namePath"]! as! [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "namePath")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 该节点的子节点 **ID** 列表
      public var children: [String]? {
        get {
          return resultMap["children"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "children")
        }
      }
    }
  }
}

public final class SearchNodesQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query searchNodes($keyword: String!) {
      searchNodes(keyword: $keyword) {
        __typename
        id
        orgId
        name
        nameI18n
        description
        descriptionI18n
        order
        code
        root
        depth
        path
        codePath
        namePath
        createdAt
        updatedAt
        children
      }
    }
    """

  public let operationName: String = "searchNodes"

  public var keyword: String

  public init(keyword: String) {
    self.keyword = keyword
  }

  public var variables: GraphQLMap? {
    return ["keyword": keyword]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("searchNodes", arguments: ["keyword": GraphQLVariable("keyword")], type: .nonNull(.list(.nonNull(.object(SearchNode.selections))))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(searchNodes: [SearchNode]) {
      self.init(unsafeResultMap: ["__typename": "Query", "searchNodes": searchNodes.map { (value: SearchNode) -> ResultMap in value.resultMap }])
    }

    public var searchNodes: [SearchNode] {
      get {
        return (resultMap["searchNodes"] as! [ResultMap]).map { (value: ResultMap) -> SearchNode in SearchNode(unsafeResultMap: value) }
      }
      set {
        resultMap.updateValue(newValue.map { (value: SearchNode) -> ResultMap in value.resultMap }, forKey: "searchNodes")
      }
    }

    public struct SearchNode: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Node"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("orgId", type: .scalar(String.self)),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("nameI18n", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("descriptionI18n", type: .scalar(String.self)),
          GraphQLField("order", type: .scalar(Int.self)),
          GraphQLField("code", type: .scalar(String.self)),
          GraphQLField("root", type: .scalar(Bool.self)),
          GraphQLField("depth", type: .scalar(Int.self)),
          GraphQLField("path", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("codePath", type: .nonNull(.list(.scalar(String.self)))),
          GraphQLField("namePath", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("children", type: .list(.nonNull(.scalar(String.self)))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, orgId: String? = nil, name: String, nameI18n: String? = nil, description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil, root: Bool? = nil, depth: Int? = nil, path: [String], codePath: [String?], namePath: [String], createdAt: String? = nil, updatedAt: String? = nil, children: [String]? = nil) {
        self.init(unsafeResultMap: ["__typename": "Node", "id": id, "orgId": orgId, "name": name, "nameI18n": nameI18n, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code, "root": root, "depth": depth, "path": path, "codePath": codePath, "namePath": namePath, "createdAt": createdAt, "updatedAt": updatedAt, "children": children])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// 组织机构 ID
      public var orgId: String? {
        get {
          return resultMap["orgId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "orgId")
        }
      }

      /// 节点名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。
      public var nameI18n: String? {
        get {
          return resultMap["nameI18n"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nameI18n")
        }
      }

      /// 描述信息
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 多语言描述信息
      public var descriptionI18n: String? {
        get {
          return resultMap["descriptionI18n"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "descriptionI18n")
        }
      }

      /// 在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)
      public var order: Int? {
        get {
          return resultMap["order"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "order")
        }
      }

      /// 节点唯一标志码，可以通过 code 进行搜索
      public var code: String? {
        get {
          return resultMap["code"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      /// 是否为根节点
      public var root: Bool? {
        get {
          return resultMap["root"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "root")
        }
      }

      /// 距离父节点的深度（如果是查询整棵树，返回的 **depth** 为距离根节点的深度，如果是查询某个节点的子节点，返回的 **depth** 指的是距离该节点的深度。）
      public var depth: Int? {
        get {
          return resultMap["depth"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "depth")
        }
      }

      public var path: [String] {
        get {
          return resultMap["path"]! as! [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "path")
        }
      }

      public var codePath: [String?] {
        get {
          return resultMap["codePath"]! as! [String?]
        }
        set {
          resultMap.updateValue(newValue, forKey: "codePath")
        }
      }

      public var namePath: [String] {
        get {
          return resultMap["namePath"]! as! [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "namePath")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 该节点的子节点 **ID** 列表
      public var children: [String]? {
        get {
          return resultMap["children"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "children")
        }
      }
    }
  }
}

public final class SearchUserQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query searchUser($query: String!, $fields: [String], $page: Int, $limit: Int, $departmentOpts: [SearchUserDepartmentOpt], $groupOpts: [SearchUserGroupOpt], $roleOpts: [SearchUserRoleOpt]) {
      searchUser(
        query: $query
        fields: $fields
        page: $page
        limit: $limit
        departmentOpts: $departmentOpts
        groupOpts: $groupOpts
        roleOpts: $roleOpts
      ) {
        __typename
        totalCount
        list {
          __typename
          id
          arn
          userPoolId
          status
          username
          email
          emailVerified
          phone
          phoneVerified
          unionid
          openid
          nickname
          registerSource
          photo
          password
          oauth
          token
          tokenExpiredAt
          loginsCount
          lastLogin
          lastIP
          signedUp
          blocked
          isDeleted
          device
          browser
          company
          name
          givenName
          familyName
          middleName
          profile
          preferredUsername
          website
          gender
          birthdate
          zoneinfo
          locale
          address
          formatted
          streetAddress
          locality
          region
          postalCode
          city
          province
          country
          createdAt
          updatedAt
          externalId
        }
      }
    }
    """

  public let operationName: String = "searchUser"

  public var query: String
  public var fields: [String?]?
  public var page: Int?
  public var limit: Int?
  public var departmentOpts: [SearchUserDepartmentOpt?]?
  public var groupOpts: [SearchUserGroupOpt?]?
  public var roleOpts: [SearchUserRoleOpt?]?

  public init(query: String, fields: [String?]? = nil, page: Int? = nil, limit: Int? = nil, departmentOpts: [SearchUserDepartmentOpt?]? = nil, groupOpts: [SearchUserGroupOpt?]? = nil, roleOpts: [SearchUserRoleOpt?]? = nil) {
    self.query = query
    self.fields = fields
    self.page = page
    self.limit = limit
    self.departmentOpts = departmentOpts
    self.groupOpts = groupOpts
    self.roleOpts = roleOpts
  }

  public var variables: GraphQLMap? {
    return ["query": query, "fields": fields, "page": page, "limit": limit, "departmentOpts": departmentOpts, "groupOpts": groupOpts, "roleOpts": roleOpts]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("searchUser", arguments: ["query": GraphQLVariable("query"), "fields": GraphQLVariable("fields"), "page": GraphQLVariable("page"), "limit": GraphQLVariable("limit"), "departmentOpts": GraphQLVariable("departmentOpts"), "groupOpts": GraphQLVariable("groupOpts"), "roleOpts": GraphQLVariable("roleOpts")], type: .nonNull(.object(SearchUser.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(searchUser: SearchUser) {
      self.init(unsafeResultMap: ["__typename": "Query", "searchUser": searchUser.resultMap])
    }

    public var searchUser: SearchUser {
      get {
        return SearchUser(unsafeResultMap: resultMap["searchUser"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "searchUser")
      }
    }

    public struct SearchUser: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PaginatedUsers"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
          GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(totalCount: Int, list: [List]) {
        self.init(unsafeResultMap: ["__typename": "PaginatedUsers", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var totalCount: Int {
        get {
          return resultMap["totalCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "totalCount")
        }
      }

      public var list: [List] {
        get {
          return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
        }
      }

      public struct List: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["User"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(String.self))),
            GraphQLField("arn", type: .nonNull(.scalar(String.self))),
            GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
            GraphQLField("status", type: .scalar(UserStatus.self)),
            GraphQLField("username", type: .scalar(String.self)),
            GraphQLField("email", type: .scalar(String.self)),
            GraphQLField("emailVerified", type: .scalar(Bool.self)),
            GraphQLField("phone", type: .scalar(String.self)),
            GraphQLField("phoneVerified", type: .scalar(Bool.self)),
            GraphQLField("unionid", type: .scalar(String.self)),
            GraphQLField("openid", type: .scalar(String.self)),
            GraphQLField("nickname", type: .scalar(String.self)),
            GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
            GraphQLField("photo", type: .scalar(String.self)),
            GraphQLField("password", type: .scalar(String.self)),
            GraphQLField("oauth", type: .scalar(String.self)),
            GraphQLField("token", type: .scalar(String.self)),
            GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
            GraphQLField("loginsCount", type: .scalar(Int.self)),
            GraphQLField("lastLogin", type: .scalar(String.self)),
            GraphQLField("lastIP", type: .scalar(String.self)),
            GraphQLField("signedUp", type: .scalar(String.self)),
            GraphQLField("blocked", type: .scalar(Bool.self)),
            GraphQLField("isDeleted", type: .scalar(Bool.self)),
            GraphQLField("device", type: .scalar(String.self)),
            GraphQLField("browser", type: .scalar(String.self)),
            GraphQLField("company", type: .scalar(String.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("givenName", type: .scalar(String.self)),
            GraphQLField("familyName", type: .scalar(String.self)),
            GraphQLField("middleName", type: .scalar(String.self)),
            GraphQLField("profile", type: .scalar(String.self)),
            GraphQLField("preferredUsername", type: .scalar(String.self)),
            GraphQLField("website", type: .scalar(String.self)),
            GraphQLField("gender", type: .scalar(String.self)),
            GraphQLField("birthdate", type: .scalar(String.self)),
            GraphQLField("zoneinfo", type: .scalar(String.self)),
            GraphQLField("locale", type: .scalar(String.self)),
            GraphQLField("address", type: .scalar(String.self)),
            GraphQLField("formatted", type: .scalar(String.self)),
            GraphQLField("streetAddress", type: .scalar(String.self)),
            GraphQLField("locality", type: .scalar(String.self)),
            GraphQLField("region", type: .scalar(String.self)),
            GraphQLField("postalCode", type: .scalar(String.self)),
            GraphQLField("city", type: .scalar(String.self)),
            GraphQLField("province", type: .scalar(String.self)),
            GraphQLField("country", type: .scalar(String.self)),
            GraphQLField("createdAt", type: .scalar(String.self)),
            GraphQLField("updatedAt", type: .scalar(String.self)),
            GraphQLField("externalId", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 用户 ID
        public var id: String {
          get {
            return resultMap["id"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var arn: String {
          get {
            return resultMap["arn"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "arn")
          }
        }

        /// 用户池 ID
        public var userPoolId: String {
          get {
            return resultMap["userPoolId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "userPoolId")
          }
        }

        /// 用户在组织机构中的状态
        public var status: UserStatus? {
          get {
            return resultMap["status"] as? UserStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// 用户名，用户池内唯一
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// 邮箱，用户池内唯一
        public var email: String? {
          get {
            return resultMap["email"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "email")
          }
        }

        /// 邮箱是否已验证
        public var emailVerified: Bool? {
          get {
            return resultMap["emailVerified"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "emailVerified")
          }
        }

        /// 手机号，用户池内唯一
        public var phone: String? {
          get {
            return resultMap["phone"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "phone")
          }
        }

        /// 手机号是否已验证
        public var phoneVerified: Bool? {
          get {
            return resultMap["phoneVerified"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "phoneVerified")
          }
        }

        public var unionid: String? {
          get {
            return resultMap["unionid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "unionid")
          }
        }

        public var openid: String? {
          get {
            return resultMap["openid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "openid")
          }
        }

        /// 昵称，该字段不唯一。
        public var nickname: String? {
          get {
            return resultMap["nickname"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "nickname")
          }
        }

        /// 注册方式
        public var registerSource: [String]? {
          get {
            return resultMap["registerSource"] as? [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "registerSource")
          }
        }

        /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
        public var photo: String? {
          get {
            return resultMap["photo"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "photo")
          }
        }

        /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
        public var password: String? {
          get {
            return resultMap["password"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "password")
          }
        }

        /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
        public var oauth: String? {
          get {
            return resultMap["oauth"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "oauth")
          }
        }

        /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
        public var token: String? {
          get {
            return resultMap["token"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "token")
          }
        }

        /// token 过期时间
        public var tokenExpiredAt: String? {
          get {
            return resultMap["tokenExpiredAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
          }
        }

        /// 用户登录总次数
        public var loginsCount: Int? {
          get {
            return resultMap["loginsCount"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "loginsCount")
          }
        }

        /// 用户最近一次登录时间
        public var lastLogin: String? {
          get {
            return resultMap["lastLogin"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "lastLogin")
          }
        }

        /// 用户上一次登录时使用的 IP
        public var lastIp: String? {
          get {
            return resultMap["lastIP"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "lastIP")
          }
        }

        /// 用户注册时间
        public var signedUp: String? {
          get {
            return resultMap["signedUp"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "signedUp")
          }
        }

        /// 该账号是否被禁用
        public var blocked: Bool? {
          get {
            return resultMap["blocked"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "blocked")
          }
        }

        /// 账号是否被软删除
        public var isDeleted: Bool? {
          get {
            return resultMap["isDeleted"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isDeleted")
          }
        }

        public var device: String? {
          get {
            return resultMap["device"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "device")
          }
        }

        public var browser: String? {
          get {
            return resultMap["browser"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "browser")
          }
        }

        public var company: String? {
          get {
            return resultMap["company"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "company")
          }
        }

        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        public var givenName: String? {
          get {
            return resultMap["givenName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "givenName")
          }
        }

        public var familyName: String? {
          get {
            return resultMap["familyName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "familyName")
          }
        }

        public var middleName: String? {
          get {
            return resultMap["middleName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "middleName")
          }
        }

        public var profile: String? {
          get {
            return resultMap["profile"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "profile")
          }
        }

        public var preferredUsername: String? {
          get {
            return resultMap["preferredUsername"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "preferredUsername")
          }
        }

        public var website: String? {
          get {
            return resultMap["website"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "website")
          }
        }

        public var gender: String? {
          get {
            return resultMap["gender"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "gender")
          }
        }

        public var birthdate: String? {
          get {
            return resultMap["birthdate"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "birthdate")
          }
        }

        public var zoneinfo: String? {
          get {
            return resultMap["zoneinfo"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "zoneinfo")
          }
        }

        public var locale: String? {
          get {
            return resultMap["locale"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "locale")
          }
        }

        public var address: String? {
          get {
            return resultMap["address"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "address")
          }
        }

        public var formatted: String? {
          get {
            return resultMap["formatted"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "formatted")
          }
        }

        public var streetAddress: String? {
          get {
            return resultMap["streetAddress"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "streetAddress")
          }
        }

        public var locality: String? {
          get {
            return resultMap["locality"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "locality")
          }
        }

        public var region: String? {
          get {
            return resultMap["region"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "region")
          }
        }

        public var postalCode: String? {
          get {
            return resultMap["postalCode"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "postalCode")
          }
        }

        public var city: String? {
          get {
            return resultMap["city"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "city")
          }
        }

        public var province: String? {
          get {
            return resultMap["province"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "province")
          }
        }

        public var country: String? {
          get {
            return resultMap["country"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "country")
          }
        }

        public var createdAt: String? {
          get {
            return resultMap["createdAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String? {
          get {
            return resultMap["updatedAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        /// 用户外部 ID
        public var externalId: String? {
          get {
            return resultMap["externalId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "externalId")
          }
        }
      }
    }
  }
}

public final class SearchUserWithCustomDataQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query searchUserWithCustomData($query: String!, $fields: [String], $page: Int, $limit: Int, $departmentOpts: [SearchUserDepartmentOpt], $groupOpts: [SearchUserGroupOpt], $roleOpts: [SearchUserRoleOpt]) {
      searchUser(
        query: $query
        fields: $fields
        page: $page
        limit: $limit
        departmentOpts: $departmentOpts
        groupOpts: $groupOpts
        roleOpts: $roleOpts
      ) {
        __typename
        totalCount
        list {
          __typename
          id
          arn
          userPoolId
          status
          username
          email
          emailVerified
          phone
          phoneVerified
          unionid
          openid
          nickname
          registerSource
          photo
          password
          oauth
          token
          tokenExpiredAt
          loginsCount
          lastLogin
          lastIP
          signedUp
          blocked
          isDeleted
          device
          browser
          company
          name
          givenName
          familyName
          middleName
          profile
          preferredUsername
          website
          gender
          birthdate
          zoneinfo
          locale
          address
          formatted
          streetAddress
          locality
          region
          postalCode
          city
          province
          country
          createdAt
          updatedAt
          externalId
          customData {
            __typename
            key
            value
            dataType
            label
          }
        }
      }
    }
    """

  public let operationName: String = "searchUserWithCustomData"

  public var query: String
  public var fields: [String?]?
  public var page: Int?
  public var limit: Int?
  public var departmentOpts: [SearchUserDepartmentOpt?]?
  public var groupOpts: [SearchUserGroupOpt?]?
  public var roleOpts: [SearchUserRoleOpt?]?

  public init(query: String, fields: [String?]? = nil, page: Int? = nil, limit: Int? = nil, departmentOpts: [SearchUserDepartmentOpt?]? = nil, groupOpts: [SearchUserGroupOpt?]? = nil, roleOpts: [SearchUserRoleOpt?]? = nil) {
    self.query = query
    self.fields = fields
    self.page = page
    self.limit = limit
    self.departmentOpts = departmentOpts
    self.groupOpts = groupOpts
    self.roleOpts = roleOpts
  }

  public var variables: GraphQLMap? {
    return ["query": query, "fields": fields, "page": page, "limit": limit, "departmentOpts": departmentOpts, "groupOpts": groupOpts, "roleOpts": roleOpts]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("searchUser", arguments: ["query": GraphQLVariable("query"), "fields": GraphQLVariable("fields"), "page": GraphQLVariable("page"), "limit": GraphQLVariable("limit"), "departmentOpts": GraphQLVariable("departmentOpts"), "groupOpts": GraphQLVariable("groupOpts"), "roleOpts": GraphQLVariable("roleOpts")], type: .nonNull(.object(SearchUser.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(searchUser: SearchUser) {
      self.init(unsafeResultMap: ["__typename": "Query", "searchUser": searchUser.resultMap])
    }

    public var searchUser: SearchUser {
      get {
        return SearchUser(unsafeResultMap: resultMap["searchUser"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "searchUser")
      }
    }

    public struct SearchUser: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PaginatedUsers"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
          GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(totalCount: Int, list: [List]) {
        self.init(unsafeResultMap: ["__typename": "PaginatedUsers", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var totalCount: Int {
        get {
          return resultMap["totalCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "totalCount")
        }
      }

      public var list: [List] {
        get {
          return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
        }
      }

      public struct List: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["User"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(String.self))),
            GraphQLField("arn", type: .nonNull(.scalar(String.self))),
            GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
            GraphQLField("status", type: .scalar(UserStatus.self)),
            GraphQLField("username", type: .scalar(String.self)),
            GraphQLField("email", type: .scalar(String.self)),
            GraphQLField("emailVerified", type: .scalar(Bool.self)),
            GraphQLField("phone", type: .scalar(String.self)),
            GraphQLField("phoneVerified", type: .scalar(Bool.self)),
            GraphQLField("unionid", type: .scalar(String.self)),
            GraphQLField("openid", type: .scalar(String.self)),
            GraphQLField("nickname", type: .scalar(String.self)),
            GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
            GraphQLField("photo", type: .scalar(String.self)),
            GraphQLField("password", type: .scalar(String.self)),
            GraphQLField("oauth", type: .scalar(String.self)),
            GraphQLField("token", type: .scalar(String.self)),
            GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
            GraphQLField("loginsCount", type: .scalar(Int.self)),
            GraphQLField("lastLogin", type: .scalar(String.self)),
            GraphQLField("lastIP", type: .scalar(String.self)),
            GraphQLField("signedUp", type: .scalar(String.self)),
            GraphQLField("blocked", type: .scalar(Bool.self)),
            GraphQLField("isDeleted", type: .scalar(Bool.self)),
            GraphQLField("device", type: .scalar(String.self)),
            GraphQLField("browser", type: .scalar(String.self)),
            GraphQLField("company", type: .scalar(String.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("givenName", type: .scalar(String.self)),
            GraphQLField("familyName", type: .scalar(String.self)),
            GraphQLField("middleName", type: .scalar(String.self)),
            GraphQLField("profile", type: .scalar(String.self)),
            GraphQLField("preferredUsername", type: .scalar(String.self)),
            GraphQLField("website", type: .scalar(String.self)),
            GraphQLField("gender", type: .scalar(String.self)),
            GraphQLField("birthdate", type: .scalar(String.self)),
            GraphQLField("zoneinfo", type: .scalar(String.self)),
            GraphQLField("locale", type: .scalar(String.self)),
            GraphQLField("address", type: .scalar(String.self)),
            GraphQLField("formatted", type: .scalar(String.self)),
            GraphQLField("streetAddress", type: .scalar(String.self)),
            GraphQLField("locality", type: .scalar(String.self)),
            GraphQLField("region", type: .scalar(String.self)),
            GraphQLField("postalCode", type: .scalar(String.self)),
            GraphQLField("city", type: .scalar(String.self)),
            GraphQLField("province", type: .scalar(String.self)),
            GraphQLField("country", type: .scalar(String.self)),
            GraphQLField("createdAt", type: .scalar(String.self)),
            GraphQLField("updatedAt", type: .scalar(String.self)),
            GraphQLField("externalId", type: .scalar(String.self)),
            GraphQLField("customData", type: .list(.object(CustomDatum.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil, customData: [CustomDatum?]? = nil) {
          self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId, "customData": customData.flatMap { (value: [CustomDatum?]) -> [ResultMap?] in value.map { (value: CustomDatum?) -> ResultMap? in value.flatMap { (value: CustomDatum) -> ResultMap in value.resultMap } } }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 用户 ID
        public var id: String {
          get {
            return resultMap["id"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var arn: String {
          get {
            return resultMap["arn"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "arn")
          }
        }

        /// 用户池 ID
        public var userPoolId: String {
          get {
            return resultMap["userPoolId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "userPoolId")
          }
        }

        /// 用户在组织机构中的状态
        public var status: UserStatus? {
          get {
            return resultMap["status"] as? UserStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// 用户名，用户池内唯一
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// 邮箱，用户池内唯一
        public var email: String? {
          get {
            return resultMap["email"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "email")
          }
        }

        /// 邮箱是否已验证
        public var emailVerified: Bool? {
          get {
            return resultMap["emailVerified"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "emailVerified")
          }
        }

        /// 手机号，用户池内唯一
        public var phone: String? {
          get {
            return resultMap["phone"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "phone")
          }
        }

        /// 手机号是否已验证
        public var phoneVerified: Bool? {
          get {
            return resultMap["phoneVerified"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "phoneVerified")
          }
        }

        public var unionid: String? {
          get {
            return resultMap["unionid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "unionid")
          }
        }

        public var openid: String? {
          get {
            return resultMap["openid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "openid")
          }
        }

        /// 昵称，该字段不唯一。
        public var nickname: String? {
          get {
            return resultMap["nickname"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "nickname")
          }
        }

        /// 注册方式
        public var registerSource: [String]? {
          get {
            return resultMap["registerSource"] as? [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "registerSource")
          }
        }

        /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
        public var photo: String? {
          get {
            return resultMap["photo"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "photo")
          }
        }

        /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
        public var password: String? {
          get {
            return resultMap["password"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "password")
          }
        }

        /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
        public var oauth: String? {
          get {
            return resultMap["oauth"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "oauth")
          }
        }

        /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
        public var token: String? {
          get {
            return resultMap["token"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "token")
          }
        }

        /// token 过期时间
        public var tokenExpiredAt: String? {
          get {
            return resultMap["tokenExpiredAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
          }
        }

        /// 用户登录总次数
        public var loginsCount: Int? {
          get {
            return resultMap["loginsCount"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "loginsCount")
          }
        }

        /// 用户最近一次登录时间
        public var lastLogin: String? {
          get {
            return resultMap["lastLogin"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "lastLogin")
          }
        }

        /// 用户上一次登录时使用的 IP
        public var lastIp: String? {
          get {
            return resultMap["lastIP"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "lastIP")
          }
        }

        /// 用户注册时间
        public var signedUp: String? {
          get {
            return resultMap["signedUp"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "signedUp")
          }
        }

        /// 该账号是否被禁用
        public var blocked: Bool? {
          get {
            return resultMap["blocked"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "blocked")
          }
        }

        /// 账号是否被软删除
        public var isDeleted: Bool? {
          get {
            return resultMap["isDeleted"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isDeleted")
          }
        }

        public var device: String? {
          get {
            return resultMap["device"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "device")
          }
        }

        public var browser: String? {
          get {
            return resultMap["browser"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "browser")
          }
        }

        public var company: String? {
          get {
            return resultMap["company"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "company")
          }
        }

        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        public var givenName: String? {
          get {
            return resultMap["givenName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "givenName")
          }
        }

        public var familyName: String? {
          get {
            return resultMap["familyName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "familyName")
          }
        }

        public var middleName: String? {
          get {
            return resultMap["middleName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "middleName")
          }
        }

        public var profile: String? {
          get {
            return resultMap["profile"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "profile")
          }
        }

        public var preferredUsername: String? {
          get {
            return resultMap["preferredUsername"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "preferredUsername")
          }
        }

        public var website: String? {
          get {
            return resultMap["website"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "website")
          }
        }

        public var gender: String? {
          get {
            return resultMap["gender"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "gender")
          }
        }

        public var birthdate: String? {
          get {
            return resultMap["birthdate"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "birthdate")
          }
        }

        public var zoneinfo: String? {
          get {
            return resultMap["zoneinfo"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "zoneinfo")
          }
        }

        public var locale: String? {
          get {
            return resultMap["locale"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "locale")
          }
        }

        public var address: String? {
          get {
            return resultMap["address"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "address")
          }
        }

        public var formatted: String? {
          get {
            return resultMap["formatted"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "formatted")
          }
        }

        public var streetAddress: String? {
          get {
            return resultMap["streetAddress"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "streetAddress")
          }
        }

        public var locality: String? {
          get {
            return resultMap["locality"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "locality")
          }
        }

        public var region: String? {
          get {
            return resultMap["region"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "region")
          }
        }

        public var postalCode: String? {
          get {
            return resultMap["postalCode"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "postalCode")
          }
        }

        public var city: String? {
          get {
            return resultMap["city"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "city")
          }
        }

        public var province: String? {
          get {
            return resultMap["province"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "province")
          }
        }

        public var country: String? {
          get {
            return resultMap["country"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "country")
          }
        }

        public var createdAt: String? {
          get {
            return resultMap["createdAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String? {
          get {
            return resultMap["updatedAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        /// 用户外部 ID
        public var externalId: String? {
          get {
            return resultMap["externalId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "externalId")
          }
        }

        /// 用户自定义数据
        public var customData: [CustomDatum?]? {
          get {
            return (resultMap["customData"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [CustomDatum?] in value.map { (value: ResultMap?) -> CustomDatum? in value.flatMap { (value: ResultMap) -> CustomDatum in CustomDatum(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [CustomDatum?]) -> [ResultMap?] in value.map { (value: CustomDatum?) -> ResultMap? in value.flatMap { (value: CustomDatum) -> ResultMap in value.resultMap } } }, forKey: "customData")
          }
        }

        public struct CustomDatum: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["UserCustomData"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("key", type: .nonNull(.scalar(String.self))),
              GraphQLField("value", type: .scalar(String.self)),
              GraphQLField("dataType", type: .nonNull(.scalar(UDFDataType.self))),
              GraphQLField("label", type: .scalar(String.self)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(key: String, value: String? = nil, dataType: UDFDataType, label: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "UserCustomData", "key": key, "value": value, "dataType": dataType, "label": label])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var key: String {
            get {
              return resultMap["key"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "key")
            }
          }

          public var value: String? {
            get {
              return resultMap["value"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "value")
            }
          }

          public var dataType: UDFDataType {
            get {
              return resultMap["dataType"]! as! UDFDataType
            }
            set {
              resultMap.updateValue(newValue, forKey: "dataType")
            }
          }

          public var label: String? {
            get {
              return resultMap["label"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "label")
            }
          }
        }
      }
    }
  }
}

public final class SendEmailMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation sendEmail($email: String!, $scene: EmailScene!) {
      sendEmail(email: $email, scene: $scene) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "sendEmail"

  public var email: String
  public var scene: EmailScene

  public init(email: String, scene: EmailScene) {
    self.email = email
    self.scene = scene
  }

  public var variables: GraphQLMap? {
    return ["email": email, "scene": scene]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("sendEmail", arguments: ["email": GraphQLVariable("email"), "scene": GraphQLVariable("scene")], type: .nonNull(.object(SendEmail.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(sendEmail: SendEmail) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "sendEmail": sendEmail.resultMap])
    }

    /// 发送邮件
    public var sendEmail: SendEmail {
      get {
        return SendEmail(unsafeResultMap: resultMap["sendEmail"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "sendEmail")
      }
    }

    public struct SendEmail: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class SendFirstLoginVerifyEmailMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation sendFirstLoginVerifyEmail($userId: String!, $appId: String!) {
      sendFirstLoginVerifyEmail(userId: $userId, appId: $appId) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "sendFirstLoginVerifyEmail"

  public var userId: String
  public var appId: String

  public init(userId: String, appId: String) {
    self.userId = userId
    self.appId = appId
  }

  public var variables: GraphQLMap? {
    return ["userId": userId, "appId": appId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("sendFirstLoginVerifyEmail", arguments: ["userId": GraphQLVariable("userId"), "appId": GraphQLVariable("appId")], type: .nonNull(.object(SendFirstLoginVerifyEmail.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(sendFirstLoginVerifyEmail: SendFirstLoginVerifyEmail) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "sendFirstLoginVerifyEmail": sendFirstLoginVerifyEmail.resultMap])
    }

    /// 管理员发送首次登录验证邮件
    public var sendFirstLoginVerifyEmail: SendFirstLoginVerifyEmail {
      get {
        return SendFirstLoginVerifyEmail(unsafeResultMap: resultMap["sendFirstLoginVerifyEmail"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "sendFirstLoginVerifyEmail")
      }
    }

    public struct SendFirstLoginVerifyEmail: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class SetMainDepartmentMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation setMainDepartment($userId: String!, $departmentId: String) {
      setMainDepartment(userId: $userId, departmentId: $departmentId) {
        __typename
        message
        code
      }
    }
    """

  public let operationName: String = "setMainDepartment"

  public var userId: String
  public var departmentId: String?

  public init(userId: String, departmentId: String? = nil) {
    self.userId = userId
    self.departmentId = departmentId
  }

  public var variables: GraphQLMap? {
    return ["userId": userId, "departmentId": departmentId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("setMainDepartment", arguments: ["userId": GraphQLVariable("userId"), "departmentId": GraphQLVariable("departmentId")], type: .nonNull(.object(SetMainDepartment.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(setMainDepartment: SetMainDepartment) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "setMainDepartment": setMainDepartment.resultMap])
    }

    /// 设置用户在某个组织机构内所在的主部门
    public var setMainDepartment: SetMainDepartment {
      get {
        return SetMainDepartment(unsafeResultMap: resultMap["setMainDepartment"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "setMainDepartment")
      }
    }

    public struct SetMainDepartment: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("message", type: .scalar(String.self)),
          GraphQLField("code", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(message: String? = nil, code: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "message": message, "code": code])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }
    }
  }
}

public final class SetUdfMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation setUdf($targetType: UDFTargetType!, $key: String!, $dataType: UDFDataType!, $label: String!, $options: String) {
      setUdf(
        targetType: $targetType
        key: $key
        dataType: $dataType
        label: $label
        options: $options
      ) {
        __typename
        targetType
        dataType
        key
        label
        options
      }
    }
    """

  public let operationName: String = "setUdf"

  public var targetType: UDFTargetType
  public var key: String
  public var dataType: UDFDataType
  public var label: String
  public var options: String?

  public init(targetType: UDFTargetType, key: String, dataType: UDFDataType, label: String, options: String? = nil) {
    self.targetType = targetType
    self.key = key
    self.dataType = dataType
    self.label = label
    self.options = options
  }

  public var variables: GraphQLMap? {
    return ["targetType": targetType, "key": key, "dataType": dataType, "label": label, "options": options]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("setUdf", arguments: ["targetType": GraphQLVariable("targetType"), "key": GraphQLVariable("key"), "dataType": GraphQLVariable("dataType"), "label": GraphQLVariable("label"), "options": GraphQLVariable("options")], type: .nonNull(.object(SetUdf.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(setUdf: SetUdf) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "setUdf": setUdf.resultMap])
    }

    public var setUdf: SetUdf {
      get {
        return SetUdf(unsafeResultMap: resultMap["setUdf"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "setUdf")
      }
    }

    public struct SetUdf: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["UserDefinedField"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("targetType", type: .nonNull(.scalar(UDFTargetType.self))),
          GraphQLField("dataType", type: .nonNull(.scalar(UDFDataType.self))),
          GraphQLField("key", type: .nonNull(.scalar(String.self))),
          GraphQLField("label", type: .scalar(String.self)),
          GraphQLField("options", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(targetType: UDFTargetType, dataType: UDFDataType, key: String, label: String? = nil, options: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "UserDefinedField", "targetType": targetType, "dataType": dataType, "key": key, "label": label, "options": options])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var targetType: UDFTargetType {
        get {
          return resultMap["targetType"]! as! UDFTargetType
        }
        set {
          resultMap.updateValue(newValue, forKey: "targetType")
        }
      }

      public var dataType: UDFDataType {
        get {
          return resultMap["dataType"]! as! UDFDataType
        }
        set {
          resultMap.updateValue(newValue, forKey: "dataType")
        }
      }

      public var key: String {
        get {
          return resultMap["key"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "key")
        }
      }

      public var label: String? {
        get {
          return resultMap["label"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "label")
        }
      }

      public var options: String? {
        get {
          return resultMap["options"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "options")
        }
      }
    }
  }
}

public final class SetUdfValueBatchMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation setUdfValueBatch($targetType: UDFTargetType!, $input: [SetUdfValueBatchInput!]!) {
      setUdfValueBatch(targetType: $targetType, input: $input) {
        __typename
        code
        message
      }
    }
    """

  public let operationName: String = "setUdfValueBatch"

  public var targetType: UDFTargetType
  public var input: [SetUdfValueBatchInput]

  public init(targetType: UDFTargetType, input: [SetUdfValueBatchInput]) {
    self.targetType = targetType
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["targetType": targetType, "input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("setUdfValueBatch", arguments: ["targetType": GraphQLVariable("targetType"), "input": GraphQLVariable("input")], type: .object(SetUdfValueBatch.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(setUdfValueBatch: SetUdfValueBatch? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "setUdfValueBatch": setUdfValueBatch.flatMap { (value: SetUdfValueBatch) -> ResultMap in value.resultMap }])
    }

    public var setUdfValueBatch: SetUdfValueBatch? {
      get {
        return (resultMap["setUdfValueBatch"] as? ResultMap).flatMap { SetUdfValueBatch(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "setUdfValueBatch")
      }
    }

    public struct SetUdfValueBatch: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["CommonMessage"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("code", type: .scalar(Int.self)),
          GraphQLField("message", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(code: Int? = nil, message: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "CommonMessage", "code": code, "message": message])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 业务状态码（与 HTTP 响应码不同），但且仅当为 200 的时候表示操作成功表示，详细说明请见：
      /// [Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
      public var code: Int? {
        get {
          return resultMap["code"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      /// 可读的接口响应说明，请以业务状态码 code 作为判断业务是否成功的标志
      public var message: String? {
        get {
          return resultMap["message"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "message")
        }
      }
    }
  }
}

public final class SetUdvMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation setUdv($targetType: UDFTargetType!, $targetId: String!, $key: String!, $value: String!) {
      setUdv(targetType: $targetType, targetId: $targetId, key: $key, value: $value) {
        __typename
        key
        dataType
        value
        label
      }
    }
    """

  public let operationName: String = "setUdv"

  public var targetType: UDFTargetType
  public var targetId: String
  public var key: String
  public var value: String

  public init(targetType: UDFTargetType, targetId: String, key: String, value: String) {
    self.targetType = targetType
    self.targetId = targetId
    self.key = key
    self.value = value
  }

  public var variables: GraphQLMap? {
    return ["targetType": targetType, "targetId": targetId, "key": key, "value": value]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("setUdv", arguments: ["targetType": GraphQLVariable("targetType"), "targetId": GraphQLVariable("targetId"), "key": GraphQLVariable("key"), "value": GraphQLVariable("value")], type: .list(.nonNull(.object(SetUdv.selections)))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(setUdv: [SetUdv]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "setUdv": setUdv.flatMap { (value: [SetUdv]) -> [ResultMap] in value.map { (value: SetUdv) -> ResultMap in value.resultMap } }])
    }

    public var setUdv: [SetUdv]? {
      get {
        return (resultMap["setUdv"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [SetUdv] in value.map { (value: ResultMap) -> SetUdv in SetUdv(unsafeResultMap: value) } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [SetUdv]) -> [ResultMap] in value.map { (value: SetUdv) -> ResultMap in value.resultMap } }, forKey: "setUdv")
      }
    }

    public struct SetUdv: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["UserDefinedData"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("key", type: .nonNull(.scalar(String.self))),
          GraphQLField("dataType", type: .nonNull(.scalar(UDFDataType.self))),
          GraphQLField("value", type: .nonNull(.scalar(String.self))),
          GraphQLField("label", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(key: String, dataType: UDFDataType, value: String, label: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "UserDefinedData", "key": key, "dataType": dataType, "value": value, "label": label])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var key: String {
        get {
          return resultMap["key"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "key")
        }
      }

      public var dataType: UDFDataType {
        get {
          return resultMap["dataType"]! as! UDFDataType
        }
        set {
          resultMap.updateValue(newValue, forKey: "dataType")
        }
      }

      public var value: String {
        get {
          return resultMap["value"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "value")
        }
      }

      public var label: String? {
        get {
          return resultMap["label"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "label")
        }
      }
    }
  }
}

public final class SetUdvBatchMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation setUdvBatch($targetType: UDFTargetType!, $targetId: String!, $udvList: [UserDefinedDataInput!]) {
      setUdvBatch(targetType: $targetType, targetId: $targetId, udvList: $udvList) {
        __typename
        key
        dataType
        value
        label
      }
    }
    """

  public let operationName: String = "setUdvBatch"

  public var targetType: UDFTargetType
  public var targetId: String
  public var udvList: [UserDefinedDataInput]?

  public init(targetType: UDFTargetType, targetId: String, udvList: [UserDefinedDataInput]?) {
    self.targetType = targetType
    self.targetId = targetId
    self.udvList = udvList
  }

  public var variables: GraphQLMap? {
    return ["targetType": targetType, "targetId": targetId, "udvList": udvList]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("setUdvBatch", arguments: ["targetType": GraphQLVariable("targetType"), "targetId": GraphQLVariable("targetId"), "udvList": GraphQLVariable("udvList")], type: .list(.nonNull(.object(SetUdvBatch.selections)))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(setUdvBatch: [SetUdvBatch]? = nil) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "setUdvBatch": setUdvBatch.flatMap { (value: [SetUdvBatch]) -> [ResultMap] in value.map { (value: SetUdvBatch) -> ResultMap in value.resultMap } }])
    }

    public var setUdvBatch: [SetUdvBatch]? {
      get {
        return (resultMap["setUdvBatch"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [SetUdvBatch] in value.map { (value: ResultMap) -> SetUdvBatch in SetUdvBatch(unsafeResultMap: value) } }
      }
      set {
        resultMap.updateValue(newValue.flatMap { (value: [SetUdvBatch]) -> [ResultMap] in value.map { (value: SetUdvBatch) -> ResultMap in value.resultMap } }, forKey: "setUdvBatch")
      }
    }

    public struct SetUdvBatch: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["UserDefinedData"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("key", type: .nonNull(.scalar(String.self))),
          GraphQLField("dataType", type: .nonNull(.scalar(UDFDataType.self))),
          GraphQLField("value", type: .nonNull(.scalar(String.self))),
          GraphQLField("label", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(key: String, dataType: UDFDataType, value: String, label: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "UserDefinedData", "key": key, "dataType": dataType, "value": value, "label": label])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var key: String {
        get {
          return resultMap["key"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "key")
        }
      }

      public var dataType: UDFDataType {
        get {
          return resultMap["dataType"]! as! UDFDataType
        }
        set {
          resultMap.updateValue(newValue, forKey: "dataType")
        }
      }

      public var value: String {
        get {
          return resultMap["value"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "value")
        }
      }

      public var label: String? {
        get {
          return resultMap["label"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "label")
        }
      }
    }
  }
}

public final class SocialConnectionQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query socialConnection($provider: String!) {
      socialConnection(provider: $provider) {
        __typename
        provider
        name
        logo
        description
        fields {
          __typename
          key
          label
          type
          placeholder
        }
      }
    }
    """

  public let operationName: String = "socialConnection"

  public var provider: String

  public init(provider: String) {
    self.provider = provider
  }

  public var variables: GraphQLMap? {
    return ["provider": provider]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("socialConnection", arguments: ["provider": GraphQLVariable("provider")], type: .object(SocialConnection.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(socialConnection: SocialConnection? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "socialConnection": socialConnection.flatMap { (value: SocialConnection) -> ResultMap in value.resultMap }])
    }

    /// 获取社会化登录定义
    public var socialConnection: SocialConnection? {
      get {
        return (resultMap["socialConnection"] as? ResultMap).flatMap { SocialConnection(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "socialConnection")
      }
    }

    public struct SocialConnection: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["SocialConnection"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("provider", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("logo", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("fields", type: .list(.nonNull(.object(Field.selections)))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(provider: String, name: String, logo: String, description: String? = nil, fields: [Field]? = nil) {
        self.init(unsafeResultMap: ["__typename": "SocialConnection", "provider": provider, "name": name, "logo": logo, "description": description, "fields": fields.flatMap { (value: [Field]) -> [ResultMap] in value.map { (value: Field) -> ResultMap in value.resultMap } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 社会化登录服务商唯一标志
      public var provider: String {
        get {
          return resultMap["provider"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "provider")
        }
      }

      /// 名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// logo
      public var logo: String {
        get {
          return resultMap["logo"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "logo")
        }
      }

      /// 描述信息
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 表单字段
      public var fields: [Field]? {
        get {
          return (resultMap["fields"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Field] in value.map { (value: ResultMap) -> Field in Field(unsafeResultMap: value) } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Field]) -> [ResultMap] in value.map { (value: Field) -> ResultMap in value.resultMap } }, forKey: "fields")
        }
      }

      public struct Field: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["SocialConnectionField"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("key", type: .scalar(String.self)),
            GraphQLField("label", type: .scalar(String.self)),
            GraphQLField("type", type: .scalar(String.self)),
            GraphQLField("placeholder", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(key: String? = nil, label: String? = nil, type: String? = nil, placeholder: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "SocialConnectionField", "key": key, "label": label, "type": type, "placeholder": placeholder])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var key: String? {
          get {
            return resultMap["key"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "key")
          }
        }

        public var label: String? {
          get {
            return resultMap["label"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "label")
          }
        }

        public var type: String? {
          get {
            return resultMap["type"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "type")
          }
        }

        public var placeholder: String? {
          get {
            return resultMap["placeholder"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "placeholder")
          }
        }
      }
    }
  }
}

public final class SocialConnectionInstanceQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query socialConnectionInstance($provider: String!) {
      socialConnectionInstance(provider: $provider) {
        __typename
        provider
        enabled
        fields {
          __typename
          key
          value
        }
      }
    }
    """

  public let operationName: String = "socialConnectionInstance"

  public var provider: String

  public init(provider: String) {
    self.provider = provider
  }

  public var variables: GraphQLMap? {
    return ["provider": provider]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("socialConnectionInstance", arguments: ["provider": GraphQLVariable("provider")], type: .nonNull(.object(SocialConnectionInstance.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(socialConnectionInstance: SocialConnectionInstance) {
      self.init(unsafeResultMap: ["__typename": "Query", "socialConnectionInstance": socialConnectionInstance.resultMap])
    }

    /// 获取当前用户池的社会化登录配置
    public var socialConnectionInstance: SocialConnectionInstance {
      get {
        return SocialConnectionInstance(unsafeResultMap: resultMap["socialConnectionInstance"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "socialConnectionInstance")
      }
    }

    public struct SocialConnectionInstance: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["SocialConnectionInstance"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("provider", type: .nonNull(.scalar(String.self))),
          GraphQLField("enabled", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("fields", type: .list(.object(Field.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(provider: String, enabled: Bool, fields: [Field?]? = nil) {
        self.init(unsafeResultMap: ["__typename": "SocialConnectionInstance", "provider": provider, "enabled": enabled, "fields": fields.flatMap { (value: [Field?]) -> [ResultMap?] in value.map { (value: Field?) -> ResultMap? in value.flatMap { (value: Field) -> ResultMap in value.resultMap } } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var provider: String {
        get {
          return resultMap["provider"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "provider")
        }
      }

      public var enabled: Bool {
        get {
          return resultMap["enabled"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "enabled")
        }
      }

      public var fields: [Field?]? {
        get {
          return (resultMap["fields"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Field?] in value.map { (value: ResultMap?) -> Field? in value.flatMap { (value: ResultMap) -> Field in Field(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Field?]) -> [ResultMap?] in value.map { (value: Field?) -> ResultMap? in value.flatMap { (value: Field) -> ResultMap in value.resultMap } } }, forKey: "fields")
        }
      }

      public struct Field: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["SocialConnectionInstanceField"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("key", type: .nonNull(.scalar(String.self))),
            GraphQLField("value", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(key: String, value: String) {
          self.init(unsafeResultMap: ["__typename": "SocialConnectionInstanceField", "key": key, "value": value])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var key: String {
          get {
            return resultMap["key"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "key")
          }
        }

        public var value: String {
          get {
            return resultMap["value"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "value")
          }
        }
      }
    }
  }
}

public final class SocialConnectionInstancesQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query socialConnectionInstances {
      socialConnectionInstances {
        __typename
        provider
        enabled
        fields {
          __typename
          key
          value
        }
      }
    }
    """

  public let operationName: String = "socialConnectionInstances"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("socialConnectionInstances", type: .nonNull(.list(.nonNull(.object(SocialConnectionInstance.selections))))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(socialConnectionInstances: [SocialConnectionInstance]) {
      self.init(unsafeResultMap: ["__typename": "Query", "socialConnectionInstances": socialConnectionInstances.map { (value: SocialConnectionInstance) -> ResultMap in value.resultMap }])
    }

    /// 获取当前用户池的所有社会化登录配置
    public var socialConnectionInstances: [SocialConnectionInstance] {
      get {
        return (resultMap["socialConnectionInstances"] as! [ResultMap]).map { (value: ResultMap) -> SocialConnectionInstance in SocialConnectionInstance(unsafeResultMap: value) }
      }
      set {
        resultMap.updateValue(newValue.map { (value: SocialConnectionInstance) -> ResultMap in value.resultMap }, forKey: "socialConnectionInstances")
      }
    }

    public struct SocialConnectionInstance: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["SocialConnectionInstance"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("provider", type: .nonNull(.scalar(String.self))),
          GraphQLField("enabled", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("fields", type: .list(.object(Field.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(provider: String, enabled: Bool, fields: [Field?]? = nil) {
        self.init(unsafeResultMap: ["__typename": "SocialConnectionInstance", "provider": provider, "enabled": enabled, "fields": fields.flatMap { (value: [Field?]) -> [ResultMap?] in value.map { (value: Field?) -> ResultMap? in value.flatMap { (value: Field) -> ResultMap in value.resultMap } } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var provider: String {
        get {
          return resultMap["provider"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "provider")
        }
      }

      public var enabled: Bool {
        get {
          return resultMap["enabled"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "enabled")
        }
      }

      public var fields: [Field?]? {
        get {
          return (resultMap["fields"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Field?] in value.map { (value: ResultMap?) -> Field? in value.flatMap { (value: ResultMap) -> Field in Field(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Field?]) -> [ResultMap?] in value.map { (value: Field?) -> ResultMap? in value.flatMap { (value: Field) -> ResultMap in value.resultMap } } }, forKey: "fields")
        }
      }

      public struct Field: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["SocialConnectionInstanceField"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("key", type: .nonNull(.scalar(String.self))),
            GraphQLField("value", type: .nonNull(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(key: String, value: String) {
          self.init(unsafeResultMap: ["__typename": "SocialConnectionInstanceField", "key": key, "value": value])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var key: String {
          get {
            return resultMap["key"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "key")
          }
        }

        public var value: String {
          get {
            return resultMap["value"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "value")
          }
        }
      }
    }
  }
}

public final class SocialConnectionsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query socialConnections {
      socialConnections {
        __typename
        provider
        name
        logo
        description
        fields {
          __typename
          key
          label
          type
          placeholder
        }
      }
    }
    """

  public let operationName: String = "socialConnections"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("socialConnections", type: .nonNull(.list(.nonNull(.object(SocialConnection.selections))))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(socialConnections: [SocialConnection]) {
      self.init(unsafeResultMap: ["__typename": "Query", "socialConnections": socialConnections.map { (value: SocialConnection) -> ResultMap in value.resultMap }])
    }

    /// 获取所有社会化登录定义
    public var socialConnections: [SocialConnection] {
      get {
        return (resultMap["socialConnections"] as! [ResultMap]).map { (value: ResultMap) -> SocialConnection in SocialConnection(unsafeResultMap: value) }
      }
      set {
        resultMap.updateValue(newValue.map { (value: SocialConnection) -> ResultMap in value.resultMap }, forKey: "socialConnections")
      }
    }

    public struct SocialConnection: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["SocialConnection"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("provider", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("logo", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("fields", type: .list(.nonNull(.object(Field.selections)))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(provider: String, name: String, logo: String, description: String? = nil, fields: [Field]? = nil) {
        self.init(unsafeResultMap: ["__typename": "SocialConnection", "provider": provider, "name": name, "logo": logo, "description": description, "fields": fields.flatMap { (value: [Field]) -> [ResultMap] in value.map { (value: Field) -> ResultMap in value.resultMap } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 社会化登录服务商唯一标志
      public var provider: String {
        get {
          return resultMap["provider"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "provider")
        }
      }

      /// 名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// logo
      public var logo: String {
        get {
          return resultMap["logo"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "logo")
        }
      }

      /// 描述信息
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 表单字段
      public var fields: [Field]? {
        get {
          return (resultMap["fields"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Field] in value.map { (value: ResultMap) -> Field in Field(unsafeResultMap: value) } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Field]) -> [ResultMap] in value.map { (value: Field) -> ResultMap in value.resultMap } }, forKey: "fields")
        }
      }

      public struct Field: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["SocialConnectionField"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("key", type: .scalar(String.self)),
            GraphQLField("label", type: .scalar(String.self)),
            GraphQLField("type", type: .scalar(String.self)),
            GraphQLField("placeholder", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(key: String? = nil, label: String? = nil, type: String? = nil, placeholder: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "SocialConnectionField", "key": key, "label": label, "type": type, "placeholder": placeholder])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var key: String? {
          get {
            return resultMap["key"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "key")
          }
        }

        public var label: String? {
          get {
            return resultMap["label"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "label")
          }
        }

        public var type: String? {
          get {
            return resultMap["type"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "type")
          }
        }

        public var placeholder: String? {
          get {
            return resultMap["placeholder"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "placeholder")
          }
        }
      }
    }
  }
}

public final class TemplateCodeQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query templateCode {
      templateCode
    }
    """

  public let operationName: String = "templateCode"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("templateCode", type: .nonNull(.scalar(String.self))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(templateCode: String) {
      self.init(unsafeResultMap: ["__typename": "Query", "templateCode": templateCode])
    }

    /// 获取函数模版
    public var templateCode: String {
      get {
        return resultMap["templateCode"]! as! String
      }
      set {
        resultMap.updateValue(newValue, forKey: "templateCode")
      }
    }
  }
}

public final class UdfQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query udf($targetType: UDFTargetType!) {
      udf(targetType: $targetType) {
        __typename
        targetType
        dataType
        key
        label
        options
      }
    }
    """

  public let operationName: String = "udf"

  public var targetType: UDFTargetType

  public init(targetType: UDFTargetType) {
    self.targetType = targetType
  }

  public var variables: GraphQLMap? {
    return ["targetType": targetType]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("udf", arguments: ["targetType": GraphQLVariable("targetType")], type: .nonNull(.list(.nonNull(.object(Udf.selections))))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(udf: [Udf]) {
      self.init(unsafeResultMap: ["__typename": "Query", "udf": udf.map { (value: Udf) -> ResultMap in value.resultMap }])
    }

    /// 查询用户池定义的自定义字段
    public var udf: [Udf] {
      get {
        return (resultMap["udf"] as! [ResultMap]).map { (value: ResultMap) -> Udf in Udf(unsafeResultMap: value) }
      }
      set {
        resultMap.updateValue(newValue.map { (value: Udf) -> ResultMap in value.resultMap }, forKey: "udf")
      }
    }

    public struct Udf: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["UserDefinedField"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("targetType", type: .nonNull(.scalar(UDFTargetType.self))),
          GraphQLField("dataType", type: .nonNull(.scalar(UDFDataType.self))),
          GraphQLField("key", type: .nonNull(.scalar(String.self))),
          GraphQLField("label", type: .scalar(String.self)),
          GraphQLField("options", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(targetType: UDFTargetType, dataType: UDFDataType, key: String, label: String? = nil, options: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "UserDefinedField", "targetType": targetType, "dataType": dataType, "key": key, "label": label, "options": options])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var targetType: UDFTargetType {
        get {
          return resultMap["targetType"]! as! UDFTargetType
        }
        set {
          resultMap.updateValue(newValue, forKey: "targetType")
        }
      }

      public var dataType: UDFDataType {
        get {
          return resultMap["dataType"]! as! UDFDataType
        }
        set {
          resultMap.updateValue(newValue, forKey: "dataType")
        }
      }

      public var key: String {
        get {
          return resultMap["key"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "key")
        }
      }

      public var label: String? {
        get {
          return resultMap["label"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "label")
        }
      }

      public var options: String? {
        get {
          return resultMap["options"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "options")
        }
      }
    }
  }
}

public final class UdfValueBatchQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query udfValueBatch($targetType: UDFTargetType!, $targetIds: [String!]!) {
      udfValueBatch(targetType: $targetType, targetIds: $targetIds) {
        __typename
        targetId
        data {
          __typename
          key
          dataType
          value
          label
        }
      }
    }
    """

  public let operationName: String = "udfValueBatch"

  public var targetType: UDFTargetType
  public var targetIds: [String]

  public init(targetType: UDFTargetType, targetIds: [String]) {
    self.targetType = targetType
    self.targetIds = targetIds
  }

  public var variables: GraphQLMap? {
    return ["targetType": targetType, "targetIds": targetIds]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("udfValueBatch", arguments: ["targetType": GraphQLVariable("targetType"), "targetIds": GraphQLVariable("targetIds")], type: .nonNull(.list(.nonNull(.object(UdfValueBatch.selections))))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(udfValueBatch: [UdfValueBatch]) {
      self.init(unsafeResultMap: ["__typename": "Query", "udfValueBatch": udfValueBatch.map { (value: UdfValueBatch) -> ResultMap in value.resultMap }])
    }

    /// 批量查询多个对象的自定义数据
    public var udfValueBatch: [UdfValueBatch] {
      get {
        return (resultMap["udfValueBatch"] as! [ResultMap]).map { (value: ResultMap) -> UdfValueBatch in UdfValueBatch(unsafeResultMap: value) }
      }
      set {
        resultMap.updateValue(newValue.map { (value: UdfValueBatch) -> ResultMap in value.resultMap }, forKey: "udfValueBatch")
      }
    }

    public struct UdfValueBatch: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["UserDefinedDataMap"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("targetId", type: .nonNull(.scalar(String.self))),
          GraphQLField("data", type: .nonNull(.list(.nonNull(.object(Datum.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(targetId: String, data: [Datum]) {
        self.init(unsafeResultMap: ["__typename": "UserDefinedDataMap", "targetId": targetId, "data": data.map { (value: Datum) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var targetId: String {
        get {
          return resultMap["targetId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "targetId")
        }
      }

      public var data: [Datum] {
        get {
          return (resultMap["data"] as! [ResultMap]).map { (value: ResultMap) -> Datum in Datum(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Datum) -> ResultMap in value.resultMap }, forKey: "data")
        }
      }

      public struct Datum: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["UserDefinedData"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("key", type: .nonNull(.scalar(String.self))),
            GraphQLField("dataType", type: .nonNull(.scalar(UDFDataType.self))),
            GraphQLField("value", type: .nonNull(.scalar(String.self))),
            GraphQLField("label", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(key: String, dataType: UDFDataType, value: String, label: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "UserDefinedData", "key": key, "dataType": dataType, "value": value, "label": label])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var key: String {
          get {
            return resultMap["key"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "key")
          }
        }

        public var dataType: UDFDataType {
          get {
            return resultMap["dataType"]! as! UDFDataType
          }
          set {
            resultMap.updateValue(newValue, forKey: "dataType")
          }
        }

        public var value: String {
          get {
            return resultMap["value"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "value")
          }
        }

        public var label: String? {
          get {
            return resultMap["label"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "label")
          }
        }
      }
    }
  }
}

public final class UdvQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query udv($targetType: UDFTargetType!, $targetId: String!) {
      udv(targetType: $targetType, targetId: $targetId) {
        __typename
        key
        dataType
        value
        label
      }
    }
    """

  public let operationName: String = "udv"

  public var targetType: UDFTargetType
  public var targetId: String

  public init(targetType: UDFTargetType, targetId: String) {
    self.targetType = targetType
    self.targetId = targetId
  }

  public var variables: GraphQLMap? {
    return ["targetType": targetType, "targetId": targetId]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("udv", arguments: ["targetType": GraphQLVariable("targetType"), "targetId": GraphQLVariable("targetId")], type: .nonNull(.list(.nonNull(.object(Udv.selections))))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(udv: [Udv]) {
      self.init(unsafeResultMap: ["__typename": "Query", "udv": udv.map { (value: Udv) -> ResultMap in value.resultMap }])
    }

    /// 查询某个实体定义的自定义数据
    public var udv: [Udv] {
      get {
        return (resultMap["udv"] as! [ResultMap]).map { (value: ResultMap) -> Udv in Udv(unsafeResultMap: value) }
      }
      set {
        resultMap.updateValue(newValue.map { (value: Udv) -> ResultMap in value.resultMap }, forKey: "udv")
      }
    }

    public struct Udv: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["UserDefinedData"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("key", type: .nonNull(.scalar(String.self))),
          GraphQLField("dataType", type: .nonNull(.scalar(UDFDataType.self))),
          GraphQLField("value", type: .nonNull(.scalar(String.self))),
          GraphQLField("label", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(key: String, dataType: UDFDataType, value: String, label: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "UserDefinedData", "key": key, "dataType": dataType, "value": value, "label": label])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var key: String {
        get {
          return resultMap["key"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "key")
        }
      }

      public var dataType: UDFDataType {
        get {
          return resultMap["dataType"]! as! UDFDataType
        }
        set {
          resultMap.updateValue(newValue, forKey: "dataType")
        }
      }

      public var value: String {
        get {
          return resultMap["value"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "value")
        }
      }

      public var label: String? {
        get {
          return resultMap["label"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "label")
        }
      }
    }
  }
}

public final class UnbindEmailMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation unbindEmail {
      unbindEmail {
        __typename
        id
        arn
        userPoolId
        status
        username
        email
        emailVerified
        phone
        phoneVerified
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
      }
    }
    """

  public let operationName: String = "unbindEmail"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("unbindEmail", type: .nonNull(.object(UnbindEmail.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(unbindEmail: UnbindEmail) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "unbindEmail": unbindEmail.resultMap])
    }

    /// 解绑定邮箱
    public var unbindEmail: UnbindEmail {
      get {
        return UnbindEmail(unsafeResultMap: resultMap["unbindEmail"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "unbindEmail")
      }
    }

    public struct UnbindEmail: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }
    }
  }
}

public final class UnbindPhoneMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation unbindPhone {
      unbindPhone {
        __typename
        id
        arn
        userPoolId
        status
        username
        email
        emailVerified
        phone
        phoneVerified
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
      }
    }
    """

  public let operationName: String = "unbindPhone"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("unbindPhone", type: .nonNull(.object(UnbindPhone.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(unbindPhone: UnbindPhone) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "unbindPhone": unbindPhone.resultMap])
    }

    /// 解绑定手机号，调用此接口需要当前用户已绑定手机号并且绑定了其他登录方式
    public var unbindPhone: UnbindPhone {
      get {
        return UnbindPhone(unsafeResultMap: resultMap["unbindPhone"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "unbindPhone")
      }
    }

    public struct UnbindPhone: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }
    }
  }
}

public final class UpdateEmailMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation updateEmail($email: String!, $emailCode: String!, $oldEmail: String, $oldEmailCode: String) {
      updateEmail(
        email: $email
        emailCode: $emailCode
        oldEmail: $oldEmail
        oldEmailCode: $oldEmailCode
      ) {
        __typename
        id
        arn
        userPoolId
        status
        username
        email
        emailVerified
        phone
        phoneVerified
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
      }
    }
    """

  public let operationName: String = "updateEmail"

  public var email: String
  public var emailCode: String
  public var oldEmail: String?
  public var oldEmailCode: String?

  public init(email: String, emailCode: String, oldEmail: String? = nil, oldEmailCode: String? = nil) {
    self.email = email
    self.emailCode = emailCode
    self.oldEmail = oldEmail
    self.oldEmailCode = oldEmailCode
  }

  public var variables: GraphQLMap? {
    return ["email": email, "emailCode": emailCode, "oldEmail": oldEmail, "oldEmailCode": oldEmailCode]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("updateEmail", arguments: ["email": GraphQLVariable("email"), "emailCode": GraphQLVariable("emailCode"), "oldEmail": GraphQLVariable("oldEmail"), "oldEmailCode": GraphQLVariable("oldEmailCode")], type: .nonNull(.object(UpdateEmail.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(updateEmail: UpdateEmail) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "updateEmail": updateEmail.resultMap])
    }

    /// 修改邮箱。此接口需要验证邮箱验证码，管理员直接修改请使用 updateUser 接口。
    public var updateEmail: UpdateEmail {
      get {
        return UpdateEmail(unsafeResultMap: resultMap["updateEmail"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "updateEmail")
      }
    }

    public struct UpdateEmail: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }
    }
  }
}

public final class UpdateFunctionMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation updateFunction($input: UpdateFunctionInput!) {
      updateFunction(input: $input) {
        __typename
        id
        name
        sourceCode
        description
        url
      }
    }
    """

  public let operationName: String = "updateFunction"

  public var input: UpdateFunctionInput

  public init(input: UpdateFunctionInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("updateFunction", arguments: ["input": GraphQLVariable("input")], type: .nonNull(.object(UpdateFunction.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(updateFunction: UpdateFunction) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "updateFunction": updateFunction.resultMap])
    }

    /// 修改函数
    public var updateFunction: UpdateFunction {
      get {
        return UpdateFunction(unsafeResultMap: resultMap["updateFunction"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "updateFunction")
      }
    }

    public struct UpdateFunction: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Function"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("sourceCode", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("url", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, name: String, sourceCode: String, description: String? = nil, url: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "Function", "id": id, "name": name, "sourceCode": sourceCode, "description": description, "url": url])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// 函数名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 源代码
      public var sourceCode: String {
        get {
          return resultMap["sourceCode"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "sourceCode")
        }
      }

      /// 描述信息
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 云函数链接
      public var url: String? {
        get {
          return resultMap["url"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "url")
        }
      }
    }
  }
}

public final class UpdateGroupMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation updateGroup($code: String!, $name: String, $description: String, $newCode: String) {
      updateGroup(
        code: $code
        name: $name
        description: $description
        newCode: $newCode
      ) {
        __typename
        code
        name
        description
        createdAt
        updatedAt
      }
    }
    """

  public let operationName: String = "updateGroup"

  public var code: String
  public var name: String?
  public var description: String?
  public var newCode: String?

  public init(code: String, name: String? = nil, description: String? = nil, newCode: String? = nil) {
    self.code = code
    self.name = name
    self.description = description
    self.newCode = newCode
  }

  public var variables: GraphQLMap? {
    return ["code": code, "name": name, "description": description, "newCode": newCode]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("updateGroup", arguments: ["code": GraphQLVariable("code"), "name": GraphQLVariable("name"), "description": GraphQLVariable("description"), "newCode": GraphQLVariable("newCode")], type: .nonNull(.object(UpdateGroup.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(updateGroup: UpdateGroup) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "updateGroup": updateGroup.resultMap])
    }

    /// 修改角色
    public var updateGroup: UpdateGroup {
      get {
        return UpdateGroup(unsafeResultMap: resultMap["updateGroup"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "updateGroup")
      }
    }

    public struct UpdateGroup: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Group"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("code", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(code: String, name: String, description: String? = nil, createdAt: String? = nil, updatedAt: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "Group", "code": code, "name": name, "description": description, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 唯一标志 code
      public var code: String {
        get {
          return resultMap["code"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      /// 名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 描述
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 创建时间
      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      /// 修改时间
      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }
    }
  }
}

public final class UpdateNodeMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation updateNode($page: Int, $limit: Int, $sortBy: SortByEnum, $includeChildrenNodes: Boolean, $id: String!, $name: String, $code: String, $description: String) {
      updateNode(id: $id, name: $name, code: $code, description: $description) {
        __typename
        id
        orgId
        name
        nameI18n
        description
        descriptionI18n
        order
        code
        root
        depth
        path
        createdAt
        updatedAt
        children
        users(
          page: $page
          limit: $limit
          sortBy: $sortBy
          includeChildrenNodes: $includeChildrenNodes
        ) {
          __typename
          totalCount
        }
      }
    }
    """

  public let operationName: String = "updateNode"

  public var page: Int?
  public var limit: Int?
  public var sortBy: SortByEnum?
  public var includeChildrenNodes: Bool?
  public var id: String
  public var name: String?
  public var code: String?
  public var description: String?

  public init(page: Int? = nil, limit: Int? = nil, sortBy: SortByEnum? = nil, includeChildrenNodes: Bool? = nil, id: String, name: String? = nil, code: String? = nil, description: String? = nil) {
    self.page = page
    self.limit = limit
    self.sortBy = sortBy
    self.includeChildrenNodes = includeChildrenNodes
    self.id = id
    self.name = name
    self.code = code
    self.description = description
  }

  public var variables: GraphQLMap? {
    return ["page": page, "limit": limit, "sortBy": sortBy, "includeChildrenNodes": includeChildrenNodes, "id": id, "name": name, "code": code, "description": description]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("updateNode", arguments: ["id": GraphQLVariable("id"), "name": GraphQLVariable("name"), "code": GraphQLVariable("code"), "description": GraphQLVariable("description")], type: .nonNull(.object(UpdateNode.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(updateNode: UpdateNode) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "updateNode": updateNode.resultMap])
    }

    /// 修改节点
    public var updateNode: UpdateNode {
      get {
        return UpdateNode(unsafeResultMap: resultMap["updateNode"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "updateNode")
      }
    }

    public struct UpdateNode: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Node"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("orgId", type: .scalar(String.self)),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("nameI18n", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("descriptionI18n", type: .scalar(String.self)),
          GraphQLField("order", type: .scalar(Int.self)),
          GraphQLField("code", type: .scalar(String.self)),
          GraphQLField("root", type: .scalar(Bool.self)),
          GraphQLField("depth", type: .scalar(Int.self)),
          GraphQLField("path", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("children", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("users", arguments: ["page": GraphQLVariable("page"), "limit": GraphQLVariable("limit"), "sortBy": GraphQLVariable("sortBy"), "includeChildrenNodes": GraphQLVariable("includeChildrenNodes")], type: .nonNull(.object(User.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, orgId: String? = nil, name: String, nameI18n: String? = nil, description: String? = nil, descriptionI18n: String? = nil, order: Int? = nil, code: String? = nil, root: Bool? = nil, depth: Int? = nil, path: [String], createdAt: String? = nil, updatedAt: String? = nil, children: [String]? = nil, users: User) {
        self.init(unsafeResultMap: ["__typename": "Node", "id": id, "orgId": orgId, "name": name, "nameI18n": nameI18n, "description": description, "descriptionI18n": descriptionI18n, "order": order, "code": code, "root": root, "depth": depth, "path": path, "createdAt": createdAt, "updatedAt": updatedAt, "children": children, "users": users.resultMap])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// 组织机构 ID
      public var orgId: String? {
        get {
          return resultMap["orgId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "orgId")
        }
      }

      /// 节点名称
      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      /// 多语言名称，**key** 为标准 **i18n** 语言编码，**value** 为对应语言的名称。
      public var nameI18n: String? {
        get {
          return resultMap["nameI18n"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nameI18n")
        }
      }

      /// 描述信息
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 多语言描述信息
      public var descriptionI18n: String? {
        get {
          return resultMap["descriptionI18n"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "descriptionI18n")
        }
      }

      /// 在父节点中的次序值。**order** 值大的排序靠前。有效的值范围是[0, 2^32)
      public var order: Int? {
        get {
          return resultMap["order"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "order")
        }
      }

      /// 节点唯一标志码，可以通过 code 进行搜索
      public var code: String? {
        get {
          return resultMap["code"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      /// 是否为根节点
      public var root: Bool? {
        get {
          return resultMap["root"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "root")
        }
      }

      /// 距离父节点的深度（如果是查询整棵树，返回的 **depth** 为距离根节点的深度，如果是查询某个节点的子节点，返回的 **depth** 指的是距离该节点的深度。）
      public var depth: Int? {
        get {
          return resultMap["depth"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "depth")
        }
      }

      public var path: [String] {
        get {
          return resultMap["path"]! as! [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "path")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 该节点的子节点 **ID** 列表
      public var children: [String]? {
        get {
          return resultMap["children"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "children")
        }
      }

      /// 节点的用户列表
      public var users: User {
        get {
          return User(unsafeResultMap: resultMap["users"]! as! ResultMap)
        }
        set {
          resultMap.updateValue(newValue.resultMap, forKey: "users")
        }
      }

      public struct User: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PaginatedUsers"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(totalCount: Int) {
          self.init(unsafeResultMap: ["__typename": "PaginatedUsers", "totalCount": totalCount])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var totalCount: Int {
          get {
            return resultMap["totalCount"]! as! Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "totalCount")
          }
        }
      }
    }
  }
}

public final class UpdatePasswordMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation updatePassword($newPassword: String!, $oldPassword: String) {
      updatePassword(newPassword: $newPassword, oldPassword: $oldPassword) {
        __typename
        id
        arn
        userPoolId
        status
        username
        email
        emailVerified
        phone
        phoneVerified
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
      }
    }
    """

  public let operationName: String = "updatePassword"

  public var newPassword: String
  public var oldPassword: String?

  public init(newPassword: String, oldPassword: String? = nil) {
    self.newPassword = newPassword
    self.oldPassword = oldPassword
  }

  public var variables: GraphQLMap? {
    return ["newPassword": newPassword, "oldPassword": oldPassword]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("updatePassword", arguments: ["newPassword": GraphQLVariable("newPassword"), "oldPassword": GraphQLVariable("oldPassword")], type: .nonNull(.object(UpdatePassword.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(updatePassword: UpdatePassword) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "updatePassword": updatePassword.resultMap])
    }

    /// 修改用户密码，此接口需要验证原始密码，管理员直接修改请使用 **updateUser** 接口。
    public var updatePassword: UpdatePassword {
      get {
        return UpdatePassword(unsafeResultMap: resultMap["updatePassword"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "updatePassword")
      }
    }

    public struct UpdatePassword: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }
    }
  }
}

public final class UpdatePhoneMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation updatePhone($phone: String!, $phoneCode: String!, $oldPhone: String, $oldPhoneCode: String) {
      updatePhone(
        phone: $phone
        phoneCode: $phoneCode
        oldPhone: $oldPhone
        oldPhoneCode: $oldPhoneCode
      ) {
        __typename
        id
        arn
        userPoolId
        status
        username
        email
        emailVerified
        phone
        phoneVerified
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
      }
    }
    """

  public let operationName: String = "updatePhone"

  public var phone: String
  public var phoneCode: String
  public var oldPhone: String?
  public var oldPhoneCode: String?

  public init(phone: String, phoneCode: String, oldPhone: String? = nil, oldPhoneCode: String? = nil) {
    self.phone = phone
    self.phoneCode = phoneCode
    self.oldPhone = oldPhone
    self.oldPhoneCode = oldPhoneCode
  }

  public var variables: GraphQLMap? {
    return ["phone": phone, "phoneCode": phoneCode, "oldPhone": oldPhone, "oldPhoneCode": oldPhoneCode]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("updatePhone", arguments: ["phone": GraphQLVariable("phone"), "phoneCode": GraphQLVariable("phoneCode"), "oldPhone": GraphQLVariable("oldPhone"), "oldPhoneCode": GraphQLVariable("oldPhoneCode")], type: .nonNull(.object(UpdatePhone.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(updatePhone: UpdatePhone) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "updatePhone": updatePhone.resultMap])
    }

    /// 修改手机号。此接口需要验证手机号验证码，管理员直接修改请使用 **updateUser** 接口。
    public var updatePhone: UpdatePhone {
      get {
        return UpdatePhone(unsafeResultMap: resultMap["updatePhone"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "updatePhone")
      }
    }

    public struct UpdatePhone: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }
    }
  }
}

public final class UpdatePolicyMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation updatePolicy($namespace: String, $code: String!, $description: String, $statements: [PolicyStatementInput!], $newCode: String) {
      updatePolicy(
        namespace: $namespace
        code: $code
        description: $description
        statements: $statements
        newCode: $newCode
      ) {
        __typename
        namespace
        code
        description
        statements {
          __typename
          resource
          actions
          effect
          condition {
            __typename
            param
            operator
            value
          }
        }
        createdAt
        updatedAt
      }
    }
    """

  public let operationName: String = "updatePolicy"

  public var namespace: String?
  public var code: String
  public var description: String?
  public var statements: [PolicyStatementInput]?
  public var newCode: String?

  public init(namespace: String? = nil, code: String, description: String? = nil, statements: [PolicyStatementInput]?, newCode: String? = nil) {
    self.namespace = namespace
    self.code = code
    self.description = description
    self.statements = statements
    self.newCode = newCode
  }

  public var variables: GraphQLMap? {
    return ["namespace": namespace, "code": code, "description": description, "statements": statements, "newCode": newCode]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("updatePolicy", arguments: ["namespace": GraphQLVariable("namespace"), "code": GraphQLVariable("code"), "description": GraphQLVariable("description"), "statements": GraphQLVariable("statements"), "newCode": GraphQLVariable("newCode")], type: .nonNull(.object(UpdatePolicy.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(updatePolicy: UpdatePolicy) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "updatePolicy": updatePolicy.resultMap])
    }

    public var updatePolicy: UpdatePolicy {
      get {
        return UpdatePolicy(unsafeResultMap: resultMap["updatePolicy"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "updatePolicy")
      }
    }

    public struct UpdatePolicy: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Policy"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("namespace", type: .nonNull(.scalar(String.self))),
          GraphQLField("code", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("statements", type: .nonNull(.list(.nonNull(.object(Statement.selections))))),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(namespace: String, code: String, description: String? = nil, statements: [Statement], createdAt: String? = nil, updatedAt: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "Policy", "namespace": namespace, "code": code, "description": description, "statements": statements.map { (value: Statement) -> ResultMap in value.resultMap }, "createdAt": createdAt, "updatedAt": updatedAt])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 权限组 code
      public var namespace: String {
        get {
          return resultMap["namespace"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "namespace")
        }
      }

      public var code: String {
        get {
          return resultMap["code"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      public var statements: [Statement] {
        get {
          return (resultMap["statements"] as! [ResultMap]).map { (value: ResultMap) -> Statement in Statement(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: Statement) -> ResultMap in value.resultMap }, forKey: "statements")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public struct Statement: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["PolicyStatement"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("resource", type: .nonNull(.scalar(String.self))),
            GraphQLField("actions", type: .nonNull(.list(.nonNull(.scalar(String.self))))),
            GraphQLField("effect", type: .scalar(PolicyEffect.self)),
            GraphQLField("condition", type: .list(.nonNull(.object(Condition.selections)))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(resource: String, actions: [String], effect: PolicyEffect? = nil, condition: [Condition]? = nil) {
          self.init(unsafeResultMap: ["__typename": "PolicyStatement", "resource": resource, "actions": actions, "effect": effect, "condition": condition.flatMap { (value: [Condition]) -> [ResultMap] in value.map { (value: Condition) -> ResultMap in value.resultMap } }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var resource: String {
          get {
            return resultMap["resource"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "resource")
          }
        }

        public var actions: [String] {
          get {
            return resultMap["actions"]! as! [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "actions")
          }
        }

        public var effect: PolicyEffect? {
          get {
            return resultMap["effect"] as? PolicyEffect
          }
          set {
            resultMap.updateValue(newValue, forKey: "effect")
          }
        }

        public var condition: [Condition]? {
          get {
            return (resultMap["condition"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [Condition] in value.map { (value: ResultMap) -> Condition in Condition(unsafeResultMap: value) } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Condition]) -> [ResultMap] in value.map { (value: Condition) -> ResultMap in value.resultMap } }, forKey: "condition")
          }
        }

        public struct Condition: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["PolicyStatementCondition"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("param", type: .nonNull(.scalar(String.self))),
              GraphQLField("operator", type: .nonNull(.scalar(String.self))),
              GraphQLField("value", type: .nonNull(.scalar(String.self))),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(param: String, `operator`: String, value: String) {
            self.init(unsafeResultMap: ["__typename": "PolicyStatementCondition", "param": param, "operator": `operator`, "value": value])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var param: String {
            get {
              return resultMap["param"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "param")
            }
          }

          public var `operator`: String {
            get {
              return resultMap["operator"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "operator")
            }
          }

          public var value: String {
            get {
              return resultMap["value"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "value")
            }
          }
        }
      }
    }
  }
}

public final class UpdateRoleMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation updateRole($code: String!, $description: String, $newCode: String, $namespace: String) {
      updateRole(
        code: $code
        description: $description
        newCode: $newCode
        namespace: $namespace
      ) {
        __typename
        id
        namespace
        code
        arn
        description
        createdAt
        updatedAt
        parent {
          __typename
          namespace
          code
          arn
          description
          createdAt
          updatedAt
        }
      }
    }
    """

  public let operationName: String = "updateRole"

  public var code: String
  public var description: String?
  public var newCode: String?
  public var namespace: String?

  public init(code: String, description: String? = nil, newCode: String? = nil, namespace: String? = nil) {
    self.code = code
    self.description = description
    self.newCode = newCode
    self.namespace = namespace
  }

  public var variables: GraphQLMap? {
    return ["code": code, "description": description, "newCode": newCode, "namespace": namespace]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("updateRole", arguments: ["code": GraphQLVariable("code"), "description": GraphQLVariable("description"), "newCode": GraphQLVariable("newCode"), "namespace": GraphQLVariable("namespace")], type: .nonNull(.object(UpdateRole.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(updateRole: UpdateRole) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "updateRole": updateRole.resultMap])
    }

    /// 修改角色
    public var updateRole: UpdateRole {
      get {
        return UpdateRole(unsafeResultMap: resultMap["updateRole"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "updateRole")
      }
    }

    public struct UpdateRole: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["Role"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("namespace", type: .nonNull(.scalar(String.self))),
          GraphQLField("code", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("parent", type: .object(Parent.selections)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, namespace: String, code: String, arn: String, description: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, parent: Parent? = nil) {
        self.init(unsafeResultMap: ["__typename": "Role", "id": id, "namespace": namespace, "code": code, "arn": arn, "description": description, "createdAt": createdAt, "updatedAt": updatedAt, "parent": parent.flatMap { (value: Parent) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      /// 权限组 code
      public var namespace: String {
        get {
          return resultMap["namespace"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "namespace")
        }
      }

      /// 唯一标志 code
      public var code: String {
        get {
          return resultMap["code"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      /// 资源描述符 arn
      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 角色描述
      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      /// 创建时间
      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      /// 修改时间
      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 父角色
      public var parent: Parent? {
        get {
          return (resultMap["parent"] as? ResultMap).flatMap { Parent(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "parent")
        }
      }

      public struct Parent: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Role"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("namespace", type: .nonNull(.scalar(String.self))),
            GraphQLField("code", type: .nonNull(.scalar(String.self))),
            GraphQLField("arn", type: .nonNull(.scalar(String.self))),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("createdAt", type: .scalar(String.self)),
            GraphQLField("updatedAt", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(namespace: String, code: String, arn: String, description: String? = nil, createdAt: String? = nil, updatedAt: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "Role", "namespace": namespace, "code": code, "arn": arn, "description": description, "createdAt": createdAt, "updatedAt": updatedAt])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 权限组 code
        public var namespace: String {
          get {
            return resultMap["namespace"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "namespace")
          }
        }

        /// 唯一标志 code
        public var code: String {
          get {
            return resultMap["code"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "code")
          }
        }

        /// 资源描述符 arn
        public var arn: String {
          get {
            return resultMap["arn"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "arn")
          }
        }

        /// 角色描述
        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        /// 创建时间
        public var createdAt: String? {
          get {
            return resultMap["createdAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        /// 修改时间
        public var updatedAt: String? {
          get {
            return resultMap["updatedAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }
      }
    }
  }
}

public final class UpdateUserMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation updateUser($id: String, $input: UpdateUserInput!) {
      updateUser(id: $id, input: $input) {
        __typename
        id
        arn
        userPoolId
        status
        username
        email
        emailVerified
        phone
        phoneVerified
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
        externalId
      }
    }
    """

  public let operationName: String = "updateUser"

  public var id: String?
  public var input: UpdateUserInput

  public init(id: String? = nil, input: UpdateUserInput) {
    self.id = id
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["id": id, "input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("updateUser", arguments: ["id": GraphQLVariable("id"), "input": GraphQLVariable("input")], type: .nonNull(.object(UpdateUser.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(updateUser: UpdateUser) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "updateUser": updateUser.resultMap])
    }

    /// 更新用户信息。
    public var updateUser: UpdateUser {
      get {
        return UpdateUser(unsafeResultMap: resultMap["updateUser"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "updateUser")
      }
    }

    public struct UpdateUser: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("externalId", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 用户外部 ID
      public var externalId: String? {
        get {
          return resultMap["externalId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "externalId")
        }
      }
    }
  }
}

public final class UpdateUserpoolMutation: GraphQLMutation {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    mutation updateUserpool($input: UpdateUserpoolInput!) {
      updateUserpool(input: $input) {
        __typename
        id
        name
        domain
        description
        secret
        jwtSecret
        userpoolTypes {
          __typename
          code
          name
          description
          image
          sdks
        }
        logo
        createdAt
        updatedAt
        emailVerifiedDefault
        sendWelcomeEmail
        registerDisabled
        appSsoEnabled
        showWxQRCodeWhenRegisterDisabled
        allowedOrigins
        tokenExpiresAfter
        isDeleted
        frequentRegisterCheck {
          __typename
          timeInterval
          limit
          enabled
        }
        loginFailCheck {
          __typename
          timeInterval
          limit
          enabled
        }
        loginFailStrategy
        loginPasswordFailCheck {
          __typename
          timeInterval
          limit
          enabled
        }
        changePhoneStrategy {
          __typename
          verifyOldPhone
        }
        changeEmailStrategy {
          __typename
          verifyOldEmail
        }
        qrcodeLoginStrategy {
          __typename
          qrcodeExpiresAfter
          returnFullUserInfo
          allowExchangeUserInfoFromBrowser
          ticketExpiresAfter
        }
        app2WxappLoginStrategy {
          __typename
          ticketExpriresAfter
          ticketExchangeUserInfoNeedSecret
        }
        whitelist {
          __typename
          phoneEnabled
          emailEnabled
          usernameEnabled
        }
        customSMSProvider {
          __typename
          enabled
          provider
          config
        }
        packageType
        useCustomUserStore
        loginRequireEmailVerified
        verifyCodeLength
      }
    }
    """

  public let operationName: String = "updateUserpool"

  public var input: UpdateUserpoolInput

  public init(input: UpdateUserpoolInput) {
    self.input = input
  }

  public var variables: GraphQLMap? {
    return ["input": input]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Mutation"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("updateUserpool", arguments: ["input": GraphQLVariable("input")], type: .nonNull(.object(UpdateUserpool.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(updateUserpool: UpdateUserpool) {
      self.init(unsafeResultMap: ["__typename": "Mutation", "updateUserpool": updateUserpool.resultMap])
    }

    public var updateUserpool: UpdateUserpool {
      get {
        return UpdateUserpool(unsafeResultMap: resultMap["updateUserpool"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "updateUserpool")
      }
    }

    public struct UpdateUserpool: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["UserPool"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("domain", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("secret", type: .nonNull(.scalar(String.self))),
          GraphQLField("jwtSecret", type: .nonNull(.scalar(String.self))),
          GraphQLField("userpoolTypes", type: .list(.nonNull(.object(UserpoolType.selections)))),
          GraphQLField("logo", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("emailVerifiedDefault", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("sendWelcomeEmail", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("registerDisabled", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("appSsoEnabled", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("showWxQRCodeWhenRegisterDisabled", type: .scalar(Bool.self)),
          GraphQLField("allowedOrigins", type: .scalar(String.self)),
          GraphQLField("tokenExpiresAfter", type: .scalar(Int.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("frequentRegisterCheck", type: .object(FrequentRegisterCheck.selections)),
          GraphQLField("loginFailCheck", type: .object(LoginFailCheck.selections)),
          GraphQLField("loginFailStrategy", type: .scalar(String.self)),
          GraphQLField("loginPasswordFailCheck", type: .object(LoginPasswordFailCheck.selections)),
          GraphQLField("changePhoneStrategy", type: .object(ChangePhoneStrategy.selections)),
          GraphQLField("changeEmailStrategy", type: .object(ChangeEmailStrategy.selections)),
          GraphQLField("qrcodeLoginStrategy", type: .object(QrcodeLoginStrategy.selections)),
          GraphQLField("app2WxappLoginStrategy", type: .object(App2WxappLoginStrategy.selections)),
          GraphQLField("whitelist", type: .object(Whitelist.selections)),
          GraphQLField("customSMSProvider", type: .object(CustomSmsProvider.selections)),
          GraphQLField("packageType", type: .scalar(Int.self)),
          GraphQLField("useCustomUserStore", type: .scalar(Bool.self)),
          GraphQLField("loginRequireEmailVerified", type: .scalar(Bool.self)),
          GraphQLField("verifyCodeLength", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, name: String, domain: String, description: String? = nil, secret: String, jwtSecret: String, userpoolTypes: [UserpoolType]? = nil, logo: String, createdAt: String? = nil, updatedAt: String? = nil, emailVerifiedDefault: Bool, sendWelcomeEmail: Bool, registerDisabled: Bool, appSsoEnabled: Bool, showWxQrCodeWhenRegisterDisabled: Bool? = nil, allowedOrigins: String? = nil, tokenExpiresAfter: Int? = nil, isDeleted: Bool? = nil, frequentRegisterCheck: FrequentRegisterCheck? = nil, loginFailCheck: LoginFailCheck? = nil, loginFailStrategy: String? = nil, loginPasswordFailCheck: LoginPasswordFailCheck? = nil, changePhoneStrategy: ChangePhoneStrategy? = nil, changeEmailStrategy: ChangeEmailStrategy? = nil, qrcodeLoginStrategy: QrcodeLoginStrategy? = nil, app2WxappLoginStrategy: App2WxappLoginStrategy? = nil, whitelist: Whitelist? = nil, customSmsProvider: CustomSmsProvider? = nil, packageType: Int? = nil, useCustomUserStore: Bool? = nil, loginRequireEmailVerified: Bool? = nil, verifyCodeLength: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "UserPool", "id": id, "name": name, "domain": domain, "description": description, "secret": secret, "jwtSecret": jwtSecret, "userpoolTypes": userpoolTypes.flatMap { (value: [UserpoolType]) -> [ResultMap] in value.map { (value: UserpoolType) -> ResultMap in value.resultMap } }, "logo": logo, "createdAt": createdAt, "updatedAt": updatedAt, "emailVerifiedDefault": emailVerifiedDefault, "sendWelcomeEmail": sendWelcomeEmail, "registerDisabled": registerDisabled, "appSsoEnabled": appSsoEnabled, "showWxQRCodeWhenRegisterDisabled": showWxQrCodeWhenRegisterDisabled, "allowedOrigins": allowedOrigins, "tokenExpiresAfter": tokenExpiresAfter, "isDeleted": isDeleted, "frequentRegisterCheck": frequentRegisterCheck.flatMap { (value: FrequentRegisterCheck) -> ResultMap in value.resultMap }, "loginFailCheck": loginFailCheck.flatMap { (value: LoginFailCheck) -> ResultMap in value.resultMap }, "loginFailStrategy": loginFailStrategy, "loginPasswordFailCheck": loginPasswordFailCheck.flatMap { (value: LoginPasswordFailCheck) -> ResultMap in value.resultMap }, "changePhoneStrategy": changePhoneStrategy.flatMap { (value: ChangePhoneStrategy) -> ResultMap in value.resultMap }, "changeEmailStrategy": changeEmailStrategy.flatMap { (value: ChangeEmailStrategy) -> ResultMap in value.resultMap }, "qrcodeLoginStrategy": qrcodeLoginStrategy.flatMap { (value: QrcodeLoginStrategy) -> ResultMap in value.resultMap }, "app2WxappLoginStrategy": app2WxappLoginStrategy.flatMap { (value: App2WxappLoginStrategy) -> ResultMap in value.resultMap }, "whitelist": whitelist.flatMap { (value: Whitelist) -> ResultMap in value.resultMap }, "customSMSProvider": customSmsProvider.flatMap { (value: CustomSmsProvider) -> ResultMap in value.resultMap }, "packageType": packageType, "useCustomUserStore": useCustomUserStore, "loginRequireEmailVerified": loginRequireEmailVerified, "verifyCodeLength": verifyCodeLength])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var domain: String {
        get {
          return resultMap["domain"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "domain")
        }
      }

      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      public var secret: String {
        get {
          return resultMap["secret"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "secret")
        }
      }

      public var jwtSecret: String {
        get {
          return resultMap["jwtSecret"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "jwtSecret")
        }
      }

      public var userpoolTypes: [UserpoolType]? {
        get {
          return (resultMap["userpoolTypes"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [UserpoolType] in value.map { (value: ResultMap) -> UserpoolType in UserpoolType(unsafeResultMap: value) } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [UserpoolType]) -> [ResultMap] in value.map { (value: UserpoolType) -> ResultMap in value.resultMap } }, forKey: "userpoolTypes")
        }
      }

      public var logo: String {
        get {
          return resultMap["logo"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "logo")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 用户邮箱是否验证（用户的 emailVerified 字段）默认值，默认为 false
      public var emailVerifiedDefault: Bool {
        get {
          return resultMap["emailVerifiedDefault"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerifiedDefault")
        }
      }

      /// 用户注册之后是否发送欢迎邮件
      public var sendWelcomeEmail: Bool {
        get {
          return resultMap["sendWelcomeEmail"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "sendWelcomeEmail")
        }
      }

      /// 是否关闭注册
      public var registerDisabled: Bool {
        get {
          return resultMap["registerDisabled"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerDisabled")
        }
      }

      /// @deprecated 是否开启用户池下应用间单点登录
      public var appSsoEnabled: Bool {
        get {
          return resultMap["appSsoEnabled"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "appSsoEnabled")
        }
      }

      /// 用户池禁止注册后，是否还显示微信小程序扫码登录。当 **showWXMPQRCode** 为 **true** 时，
      /// 前端显示小程序码，此时只有以前允许注册时，扫码登录过的用户可以继续登录；新用户扫码无法登录。
      public var showWxQrCodeWhenRegisterDisabled: Bool? {
        get {
          return resultMap["showWxQRCodeWhenRegisterDisabled"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "showWxQRCodeWhenRegisterDisabled")
        }
      }

      /// 前端跨域请求白名单
      public var allowedOrigins: String? {
        get {
          return resultMap["allowedOrigins"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "allowedOrigins")
        }
      }

      /// 用户 **token** 有效时间，单位为秒，默认为 15 天。
      public var tokenExpiresAfter: Int? {
        get {
          return resultMap["tokenExpiresAfter"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiresAfter")
        }
      }

      /// 是否已删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      /// 注册频繁检测
      public var frequentRegisterCheck: FrequentRegisterCheck? {
        get {
          return (resultMap["frequentRegisterCheck"] as? ResultMap).flatMap { FrequentRegisterCheck(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "frequentRegisterCheck")
        }
      }

      /// 登录失败检测
      public var loginFailCheck: LoginFailCheck? {
        get {
          return (resultMap["loginFailCheck"] as? ResultMap).flatMap { LoginFailCheck(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "loginFailCheck")
        }
      }

      /// 密码安全策略
      public var loginFailStrategy: String? {
        get {
          return resultMap["loginFailStrategy"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginFailStrategy")
        }
      }

      /// 登录失败检测
      public var loginPasswordFailCheck: LoginPasswordFailCheck? {
        get {
          return (resultMap["loginPasswordFailCheck"] as? ResultMap).flatMap { LoginPasswordFailCheck(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "loginPasswordFailCheck")
        }
      }

      /// 手机号修改策略
      public var changePhoneStrategy: ChangePhoneStrategy? {
        get {
          return (resultMap["changePhoneStrategy"] as? ResultMap).flatMap { ChangePhoneStrategy(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "changePhoneStrategy")
        }
      }

      /// 邮箱修改策略
      public var changeEmailStrategy: ChangeEmailStrategy? {
        get {
          return (resultMap["changeEmailStrategy"] as? ResultMap).flatMap { ChangeEmailStrategy(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "changeEmailStrategy")
        }
      }

      /// APP 扫码登录配置
      public var qrcodeLoginStrategy: QrcodeLoginStrategy? {
        get {
          return (resultMap["qrcodeLoginStrategy"] as? ResultMap).flatMap { QrcodeLoginStrategy(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "qrcodeLoginStrategy")
        }
      }

      /// APP 拉起小程序登录配置
      public var app2WxappLoginStrategy: App2WxappLoginStrategy? {
        get {
          return (resultMap["app2WxappLoginStrategy"] as? ResultMap).flatMap { App2WxappLoginStrategy(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "app2WxappLoginStrategy")
        }
      }

      /// 注册白名单配置
      public var whitelist: Whitelist? {
        get {
          return (resultMap["whitelist"] as? ResultMap).flatMap { Whitelist(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "whitelist")
        }
      }

      /// 自定义短信服务商配置
      public var customSmsProvider: CustomSmsProvider? {
        get {
          return (resultMap["customSMSProvider"] as? ResultMap).flatMap { CustomSmsProvider(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "customSMSProvider")
        }
      }

      /// 用户池套餐类型
      public var packageType: Int? {
        get {
          return resultMap["packageType"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "packageType")
        }
      }

      /// 是否使用自定义数据库 CUSTOM_USER_STORE 模式
      public var useCustomUserStore: Bool? {
        get {
          return resultMap["useCustomUserStore"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "useCustomUserStore")
        }
      }

      /// 是否要求邮箱必须验证才能登录（如果是通过邮箱登录的话）
      public var loginRequireEmailVerified: Bool? {
        get {
          return resultMap["loginRequireEmailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginRequireEmailVerified")
        }
      }

      /// 短信验证码长度
      public var verifyCodeLength: Int? {
        get {
          return resultMap["verifyCodeLength"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "verifyCodeLength")
        }
      }

      public struct UserpoolType: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["UserPoolType"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("code", type: .scalar(String.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("sdks", type: .list(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(code: String? = nil, name: String? = nil, description: String? = nil, image: String? = nil, sdks: [String?]? = nil) {
          self.init(unsafeResultMap: ["__typename": "UserPoolType", "code": code, "name": name, "description": description, "image": image, "sdks": sdks])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var code: String? {
          get {
            return resultMap["code"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "code")
          }
        }

        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        public var image: String? {
          get {
            return resultMap["image"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "image")
          }
        }

        public var sdks: [String?]? {
          get {
            return resultMap["sdks"] as? [String?]
          }
          set {
            resultMap.updateValue(newValue, forKey: "sdks")
          }
        }
      }

      public struct FrequentRegisterCheck: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["FrequentRegisterCheckConfig"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("timeInterval", type: .scalar(Int.self)),
            GraphQLField("limit", type: .scalar(Int.self)),
            GraphQLField("enabled", type: .scalar(Bool.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(timeInterval: Int? = nil, limit: Int? = nil, enabled: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "FrequentRegisterCheckConfig", "timeInterval": timeInterval, "limit": limit, "enabled": enabled])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var timeInterval: Int? {
          get {
            return resultMap["timeInterval"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "timeInterval")
          }
        }

        public var limit: Int? {
          get {
            return resultMap["limit"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "limit")
          }
        }

        public var enabled: Bool? {
          get {
            return resultMap["enabled"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "enabled")
          }
        }
      }

      public struct LoginFailCheck: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["LoginFailCheckConfig"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("timeInterval", type: .scalar(Int.self)),
            GraphQLField("limit", type: .scalar(Int.self)),
            GraphQLField("enabled", type: .scalar(Bool.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(timeInterval: Int? = nil, limit: Int? = nil, enabled: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "LoginFailCheckConfig", "timeInterval": timeInterval, "limit": limit, "enabled": enabled])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var timeInterval: Int? {
          get {
            return resultMap["timeInterval"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "timeInterval")
          }
        }

        public var limit: Int? {
          get {
            return resultMap["limit"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "limit")
          }
        }

        public var enabled: Bool? {
          get {
            return resultMap["enabled"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "enabled")
          }
        }
      }

      public struct LoginPasswordFailCheck: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["LoginPasswordFailCheckConfig"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("timeInterval", type: .scalar(Int.self)),
            GraphQLField("limit", type: .scalar(Int.self)),
            GraphQLField("enabled", type: .scalar(Bool.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(timeInterval: Int? = nil, limit: Int? = nil, enabled: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "LoginPasswordFailCheckConfig", "timeInterval": timeInterval, "limit": limit, "enabled": enabled])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var timeInterval: Int? {
          get {
            return resultMap["timeInterval"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "timeInterval")
          }
        }

        public var limit: Int? {
          get {
            return resultMap["limit"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "limit")
          }
        }

        public var enabled: Bool? {
          get {
            return resultMap["enabled"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "enabled")
          }
        }
      }

      public struct ChangePhoneStrategy: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["ChangePhoneStrategy"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("verifyOldPhone", type: .scalar(Bool.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(verifyOldPhone: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "ChangePhoneStrategy", "verifyOldPhone": verifyOldPhone])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var verifyOldPhone: Bool? {
          get {
            return resultMap["verifyOldPhone"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "verifyOldPhone")
          }
        }
      }

      public struct ChangeEmailStrategy: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["ChangeEmailStrategy"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("verifyOldEmail", type: .scalar(Bool.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(verifyOldEmail: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "ChangeEmailStrategy", "verifyOldEmail": verifyOldEmail])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var verifyOldEmail: Bool? {
          get {
            return resultMap["verifyOldEmail"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "verifyOldEmail")
          }
        }
      }

      public struct QrcodeLoginStrategy: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["QrcodeLoginStrategy"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("qrcodeExpiresAfter", type: .scalar(Int.self)),
            GraphQLField("returnFullUserInfo", type: .scalar(Bool.self)),
            GraphQLField("allowExchangeUserInfoFromBrowser", type: .scalar(Bool.self)),
            GraphQLField("ticketExpiresAfter", type: .scalar(Int.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(qrcodeExpiresAfter: Int? = nil, returnFullUserInfo: Bool? = nil, allowExchangeUserInfoFromBrowser: Bool? = nil, ticketExpiresAfter: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "QrcodeLoginStrategy", "qrcodeExpiresAfter": qrcodeExpiresAfter, "returnFullUserInfo": returnFullUserInfo, "allowExchangeUserInfoFromBrowser": allowExchangeUserInfoFromBrowser, "ticketExpiresAfter": ticketExpiresAfter])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var qrcodeExpiresAfter: Int? {
          get {
            return resultMap["qrcodeExpiresAfter"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "qrcodeExpiresAfter")
          }
        }

        public var returnFullUserInfo: Bool? {
          get {
            return resultMap["returnFullUserInfo"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "returnFullUserInfo")
          }
        }

        public var allowExchangeUserInfoFromBrowser: Bool? {
          get {
            return resultMap["allowExchangeUserInfoFromBrowser"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "allowExchangeUserInfoFromBrowser")
          }
        }

        public var ticketExpiresAfter: Int? {
          get {
            return resultMap["ticketExpiresAfter"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "ticketExpiresAfter")
          }
        }
      }

      public struct App2WxappLoginStrategy: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["App2WxappLoginStrategy"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("ticketExpriresAfter", type: .scalar(Int.self)),
            GraphQLField("ticketExchangeUserInfoNeedSecret", type: .scalar(Bool.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(ticketExpriresAfter: Int? = nil, ticketExchangeUserInfoNeedSecret: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "App2WxappLoginStrategy", "ticketExpriresAfter": ticketExpriresAfter, "ticketExchangeUserInfoNeedSecret": ticketExchangeUserInfoNeedSecret])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var ticketExpriresAfter: Int? {
          get {
            return resultMap["ticketExpriresAfter"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "ticketExpriresAfter")
          }
        }

        public var ticketExchangeUserInfoNeedSecret: Bool? {
          get {
            return resultMap["ticketExchangeUserInfoNeedSecret"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "ticketExchangeUserInfoNeedSecret")
          }
        }
      }

      public struct Whitelist: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["RegisterWhiteListConfig"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("phoneEnabled", type: .scalar(Bool.self)),
            GraphQLField("emailEnabled", type: .scalar(Bool.self)),
            GraphQLField("usernameEnabled", type: .scalar(Bool.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(phoneEnabled: Bool? = nil, emailEnabled: Bool? = nil, usernameEnabled: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "RegisterWhiteListConfig", "phoneEnabled": phoneEnabled, "emailEnabled": emailEnabled, "usernameEnabled": usernameEnabled])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 是否开启手机号注册白名单
        public var phoneEnabled: Bool? {
          get {
            return resultMap["phoneEnabled"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "phoneEnabled")
          }
        }

        /// 是否开启邮箱注册白名单
        public var emailEnabled: Bool? {
          get {
            return resultMap["emailEnabled"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "emailEnabled")
          }
        }

        /// 是否开用户名注册白名单
        public var usernameEnabled: Bool? {
          get {
            return resultMap["usernameEnabled"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "usernameEnabled")
          }
        }
      }

      public struct CustomSmsProvider: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CustomSMSProvider"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("enabled", type: .scalar(Bool.self)),
            GraphQLField("provider", type: .scalar(String.self)),
            GraphQLField("config", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(enabled: Bool? = nil, provider: String? = nil, config: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "CustomSMSProvider", "enabled": enabled, "provider": provider, "config": config])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var enabled: Bool? {
          get {
            return resultMap["enabled"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "enabled")
          }
        }

        public var provider: String? {
          get {
            return resultMap["provider"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "provider")
          }
        }

        public var config: String? {
          get {
            return resultMap["config"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "config")
          }
        }
      }
    }
  }
}

public final class UserQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query user($id: String) {
      user(id: $id) {
        __typename
        id
        arn
        userPoolId
        status
        username
        email
        emailVerified
        phone
        phoneVerified
        identities {
          __typename
          openid
          userIdInIdp
          userId
          connectionId
          isSocial
          provider
          type
          userPoolId
        }
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
        externalId
      }
    }
    """

  public let operationName: String = "user"

  public var id: String?

  public init(id: String? = nil) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("user", arguments: ["id": GraphQLVariable("id")], type: .object(User.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(user: User? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }])
    }

    public var user: User? {
      get {
        return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "user")
      }
    }

    public struct User: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("identities", type: .list(.object(Identity.selections))),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("externalId", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, identities: [Identity?]? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "identities": identities.flatMap { (value: [Identity?]) -> [ResultMap?] in value.map { (value: Identity?) -> ResultMap? in value.flatMap { (value: Identity) -> ResultMap in value.resultMap } } }, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      /// 用户的身份信息
      public var identities: [Identity?]? {
        get {
          return (resultMap["identities"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Identity?] in value.map { (value: ResultMap?) -> Identity? in value.flatMap { (value: ResultMap) -> Identity in Identity(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Identity?]) -> [ResultMap?] in value.map { (value: Identity?) -> ResultMap? in value.flatMap { (value: Identity) -> ResultMap in value.resultMap } } }, forKey: "identities")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 用户外部 ID
      public var externalId: String? {
        get {
          return resultMap["externalId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "externalId")
        }
      }

      public struct Identity: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Identity"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("openid", type: .scalar(String.self)),
            GraphQLField("userIdInIdp", type: .scalar(String.self)),
            GraphQLField("userId", type: .scalar(String.self)),
            GraphQLField("connectionId", type: .scalar(String.self)),
            GraphQLField("isSocial", type: .scalar(Bool.self)),
            GraphQLField("provider", type: .scalar(String.self)),
            GraphQLField("type", type: .scalar(String.self)),
            GraphQLField("userPoolId", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(openid: String? = nil, userIdInIdp: String? = nil, userId: String? = nil, connectionId: String? = nil, isSocial: Bool? = nil, provider: String? = nil, type: String? = nil, userPoolId: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "Identity", "openid": openid, "userIdInIdp": userIdInIdp, "userId": userId, "connectionId": connectionId, "isSocial": isSocial, "provider": provider, "type": type, "userPoolId": userPoolId])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var openid: String? {
          get {
            return resultMap["openid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "openid")
          }
        }

        public var userIdInIdp: String? {
          get {
            return resultMap["userIdInIdp"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "userIdInIdp")
          }
        }

        public var userId: String? {
          get {
            return resultMap["userId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "userId")
          }
        }

        public var connectionId: String? {
          get {
            return resultMap["connectionId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "connectionId")
          }
        }

        public var isSocial: Bool? {
          get {
            return resultMap["isSocial"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isSocial")
          }
        }

        public var provider: String? {
          get {
            return resultMap["provider"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "provider")
          }
        }

        public var type: String? {
          get {
            return resultMap["type"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "type")
          }
        }

        public var userPoolId: String? {
          get {
            return resultMap["userPoolId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "userPoolId")
          }
        }
      }
    }
  }
}

public final class UserBatchQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query userBatch($ids: [String!]!, $type: String) {
      userBatch(ids: $ids, type: $type) {
        __typename
        identities {
          __typename
          openid
          userIdInIdp
          userId
          connectionId
          isSocial
          provider
          type
          userPoolId
        }
        id
        arn
        userPoolId
        status
        username
        email
        emailVerified
        phone
        phoneVerified
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
        externalId
      }
    }
    """

  public let operationName: String = "userBatch"

  public var ids: [String]
  public var type: String?

  public init(ids: [String], type: String? = nil) {
    self.ids = ids
    self.type = type
  }

  public var variables: GraphQLMap? {
    return ["ids": ids, "type": type]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("userBatch", arguments: ["ids": GraphQLVariable("ids"), "type": GraphQLVariable("type")], type: .nonNull(.list(.nonNull(.object(UserBatch.selections))))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(userBatch: [UserBatch]) {
      self.init(unsafeResultMap: ["__typename": "Query", "userBatch": userBatch.map { (value: UserBatch) -> ResultMap in value.resultMap }])
    }

    public var userBatch: [UserBatch] {
      get {
        return (resultMap["userBatch"] as! [ResultMap]).map { (value: ResultMap) -> UserBatch in UserBatch(unsafeResultMap: value) }
      }
      set {
        resultMap.updateValue(newValue.map { (value: UserBatch) -> ResultMap in value.resultMap }, forKey: "userBatch")
      }
    }

    public struct UserBatch: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("identities", type: .list(.object(Identity.selections))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("externalId", type: .scalar(String.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(identities: [Identity?]? = nil, id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "identities": identities.flatMap { (value: [Identity?]) -> [ResultMap?] in value.map { (value: Identity?) -> ResultMap? in value.flatMap { (value: Identity) -> ResultMap in value.resultMap } } }, "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户的身份信息
      public var identities: [Identity?]? {
        get {
          return (resultMap["identities"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Identity?] in value.map { (value: ResultMap?) -> Identity? in value.flatMap { (value: ResultMap) -> Identity in Identity(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Identity?]) -> [ResultMap?] in value.map { (value: Identity?) -> ResultMap? in value.flatMap { (value: Identity) -> ResultMap in value.resultMap } } }, forKey: "identities")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 用户外部 ID
      public var externalId: String? {
        get {
          return resultMap["externalId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "externalId")
        }
      }

      public struct Identity: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Identity"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("openid", type: .scalar(String.self)),
            GraphQLField("userIdInIdp", type: .scalar(String.self)),
            GraphQLField("userId", type: .scalar(String.self)),
            GraphQLField("connectionId", type: .scalar(String.self)),
            GraphQLField("isSocial", type: .scalar(Bool.self)),
            GraphQLField("provider", type: .scalar(String.self)),
            GraphQLField("type", type: .scalar(String.self)),
            GraphQLField("userPoolId", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(openid: String? = nil, userIdInIdp: String? = nil, userId: String? = nil, connectionId: String? = nil, isSocial: Bool? = nil, provider: String? = nil, type: String? = nil, userPoolId: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "Identity", "openid": openid, "userIdInIdp": userIdInIdp, "userId": userId, "connectionId": connectionId, "isSocial": isSocial, "provider": provider, "type": type, "userPoolId": userPoolId])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var openid: String? {
          get {
            return resultMap["openid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "openid")
          }
        }

        public var userIdInIdp: String? {
          get {
            return resultMap["userIdInIdp"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "userIdInIdp")
          }
        }

        public var userId: String? {
          get {
            return resultMap["userId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "userId")
          }
        }

        public var connectionId: String? {
          get {
            return resultMap["connectionId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "connectionId")
          }
        }

        public var isSocial: Bool? {
          get {
            return resultMap["isSocial"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isSocial")
          }
        }

        public var provider: String? {
          get {
            return resultMap["provider"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "provider")
          }
        }

        public var type: String? {
          get {
            return resultMap["type"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "type")
          }
        }

        public var userPoolId: String? {
          get {
            return resultMap["userPoolId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "userPoolId")
          }
        }
      }
    }
  }
}

public final class UserBatchWithCustomDataQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query userBatchWithCustomData($ids: [String!]!, $type: String) {
      userBatch(ids: $ids, type: $type) {
        __typename
        identities {
          __typename
          openid
          userIdInIdp
          userId
          connectionId
          isSocial
          provider
          type
          userPoolId
        }
        id
        arn
        userPoolId
        status
        username
        email
        emailVerified
        phone
        phoneVerified
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
        externalId
        customData {
          __typename
          key
          value
          dataType
          label
        }
      }
    }
    """

  public let operationName: String = "userBatchWithCustomData"

  public var ids: [String]
  public var type: String?

  public init(ids: [String], type: String? = nil) {
    self.ids = ids
    self.type = type
  }

  public var variables: GraphQLMap? {
    return ["ids": ids, "type": type]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("userBatch", arguments: ["ids": GraphQLVariable("ids"), "type": GraphQLVariable("type")], type: .nonNull(.list(.nonNull(.object(UserBatch.selections))))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(userBatch: [UserBatch]) {
      self.init(unsafeResultMap: ["__typename": "Query", "userBatch": userBatch.map { (value: UserBatch) -> ResultMap in value.resultMap }])
    }

    public var userBatch: [UserBatch] {
      get {
        return (resultMap["userBatch"] as! [ResultMap]).map { (value: ResultMap) -> UserBatch in UserBatch(unsafeResultMap: value) }
      }
      set {
        resultMap.updateValue(newValue.map { (value: UserBatch) -> ResultMap in value.resultMap }, forKey: "userBatch")
      }
    }

    public struct UserBatch: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("identities", type: .list(.object(Identity.selections))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("externalId", type: .scalar(String.self)),
          GraphQLField("customData", type: .list(.object(CustomDatum.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(identities: [Identity?]? = nil, id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil, customData: [CustomDatum?]? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "identities": identities.flatMap { (value: [Identity?]) -> [ResultMap?] in value.map { (value: Identity?) -> ResultMap? in value.flatMap { (value: Identity) -> ResultMap in value.resultMap } } }, "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId, "customData": customData.flatMap { (value: [CustomDatum?]) -> [ResultMap?] in value.map { (value: CustomDatum?) -> ResultMap? in value.flatMap { (value: CustomDatum) -> ResultMap in value.resultMap } } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户的身份信息
      public var identities: [Identity?]? {
        get {
          return (resultMap["identities"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Identity?] in value.map { (value: ResultMap?) -> Identity? in value.flatMap { (value: ResultMap) -> Identity in Identity(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Identity?]) -> [ResultMap?] in value.map { (value: Identity?) -> ResultMap? in value.flatMap { (value: Identity) -> ResultMap in value.resultMap } } }, forKey: "identities")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 用户外部 ID
      public var externalId: String? {
        get {
          return resultMap["externalId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "externalId")
        }
      }

      /// 用户自定义数据
      public var customData: [CustomDatum?]? {
        get {
          return (resultMap["customData"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [CustomDatum?] in value.map { (value: ResultMap?) -> CustomDatum? in value.flatMap { (value: ResultMap) -> CustomDatum in CustomDatum(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [CustomDatum?]) -> [ResultMap?] in value.map { (value: CustomDatum?) -> ResultMap? in value.flatMap { (value: CustomDatum) -> ResultMap in value.resultMap } } }, forKey: "customData")
        }
      }

      public struct Identity: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Identity"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("openid", type: .scalar(String.self)),
            GraphQLField("userIdInIdp", type: .scalar(String.self)),
            GraphQLField("userId", type: .scalar(String.self)),
            GraphQLField("connectionId", type: .scalar(String.self)),
            GraphQLField("isSocial", type: .scalar(Bool.self)),
            GraphQLField("provider", type: .scalar(String.self)),
            GraphQLField("type", type: .scalar(String.self)),
            GraphQLField("userPoolId", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(openid: String? = nil, userIdInIdp: String? = nil, userId: String? = nil, connectionId: String? = nil, isSocial: Bool? = nil, provider: String? = nil, type: String? = nil, userPoolId: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "Identity", "openid": openid, "userIdInIdp": userIdInIdp, "userId": userId, "connectionId": connectionId, "isSocial": isSocial, "provider": provider, "type": type, "userPoolId": userPoolId])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var openid: String? {
          get {
            return resultMap["openid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "openid")
          }
        }

        public var userIdInIdp: String? {
          get {
            return resultMap["userIdInIdp"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "userIdInIdp")
          }
        }

        public var userId: String? {
          get {
            return resultMap["userId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "userId")
          }
        }

        public var connectionId: String? {
          get {
            return resultMap["connectionId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "connectionId")
          }
        }

        public var isSocial: Bool? {
          get {
            return resultMap["isSocial"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isSocial")
          }
        }

        public var provider: String? {
          get {
            return resultMap["provider"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "provider")
          }
        }

        public var type: String? {
          get {
            return resultMap["type"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "type")
          }
        }

        public var userPoolId: String? {
          get {
            return resultMap["userPoolId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "userPoolId")
          }
        }
      }

      public struct CustomDatum: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["UserCustomData"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("key", type: .nonNull(.scalar(String.self))),
            GraphQLField("value", type: .scalar(String.self)),
            GraphQLField("dataType", type: .nonNull(.scalar(UDFDataType.self))),
            GraphQLField("label", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(key: String, value: String? = nil, dataType: UDFDataType, label: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "UserCustomData", "key": key, "value": value, "dataType": dataType, "label": label])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var key: String {
          get {
            return resultMap["key"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "key")
          }
        }

        public var value: String? {
          get {
            return resultMap["value"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "value")
          }
        }

        public var dataType: UDFDataType {
          get {
            return resultMap["dataType"]! as! UDFDataType
          }
          set {
            resultMap.updateValue(newValue, forKey: "dataType")
          }
        }

        public var label: String? {
          get {
            return resultMap["label"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "label")
          }
        }
      }
    }
  }
}

public final class UserpoolQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query userpool {
      userpool {
        __typename
        id
        name
        domain
        description
        secret
        jwtSecret
        ownerId
        userpoolTypes {
          __typename
          code
          name
          description
          image
          sdks
        }
        logo
        createdAt
        updatedAt
        emailVerifiedDefault
        sendWelcomeEmail
        registerDisabled
        appSsoEnabled
        showWxQRCodeWhenRegisterDisabled
        allowedOrigins
        tokenExpiresAfter
        isDeleted
        frequentRegisterCheck {
          __typename
          timeInterval
          limit
          enabled
        }
        loginFailCheck {
          __typename
          timeInterval
          limit
          enabled
        }
        loginPasswordFailCheck {
          __typename
          timeInterval
          limit
          enabled
        }
        loginFailStrategy
        changePhoneStrategy {
          __typename
          verifyOldPhone
        }
        changeEmailStrategy {
          __typename
          verifyOldEmail
        }
        qrcodeLoginStrategy {
          __typename
          qrcodeExpiresAfter
          returnFullUserInfo
          allowExchangeUserInfoFromBrowser
          ticketExpiresAfter
        }
        app2WxappLoginStrategy {
          __typename
          ticketExpriresAfter
          ticketExchangeUserInfoNeedSecret
        }
        whitelist {
          __typename
          phoneEnabled
          emailEnabled
          usernameEnabled
        }
        customSMSProvider {
          __typename
          enabled
          provider
          config
        }
        packageType
        useCustomUserStore
        loginRequireEmailVerified
        verifyCodeLength
      }
    }
    """

  public let operationName: String = "userpool"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("userpool", type: .nonNull(.object(Userpool.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(userpool: Userpool) {
      self.init(unsafeResultMap: ["__typename": "Query", "userpool": userpool.resultMap])
    }

    /// 查询用户池详情
    public var userpool: Userpool {
      get {
        return Userpool(unsafeResultMap: resultMap["userpool"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "userpool")
      }
    }

    public struct Userpool: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["UserPool"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("name", type: .nonNull(.scalar(String.self))),
          GraphQLField("domain", type: .nonNull(.scalar(String.self))),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("secret", type: .nonNull(.scalar(String.self))),
          GraphQLField("jwtSecret", type: .nonNull(.scalar(String.self))),
          GraphQLField("ownerId", type: .scalar(String.self)),
          GraphQLField("userpoolTypes", type: .list(.nonNull(.object(UserpoolType.selections)))),
          GraphQLField("logo", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("emailVerifiedDefault", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("sendWelcomeEmail", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("registerDisabled", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("appSsoEnabled", type: .nonNull(.scalar(Bool.self))),
          GraphQLField("showWxQRCodeWhenRegisterDisabled", type: .scalar(Bool.self)),
          GraphQLField("allowedOrigins", type: .scalar(String.self)),
          GraphQLField("tokenExpiresAfter", type: .scalar(Int.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("frequentRegisterCheck", type: .object(FrequentRegisterCheck.selections)),
          GraphQLField("loginFailCheck", type: .object(LoginFailCheck.selections)),
          GraphQLField("loginPasswordFailCheck", type: .object(LoginPasswordFailCheck.selections)),
          GraphQLField("loginFailStrategy", type: .scalar(String.self)),
          GraphQLField("changePhoneStrategy", type: .object(ChangePhoneStrategy.selections)),
          GraphQLField("changeEmailStrategy", type: .object(ChangeEmailStrategy.selections)),
          GraphQLField("qrcodeLoginStrategy", type: .object(QrcodeLoginStrategy.selections)),
          GraphQLField("app2WxappLoginStrategy", type: .object(App2WxappLoginStrategy.selections)),
          GraphQLField("whitelist", type: .object(Whitelist.selections)),
          GraphQLField("customSMSProvider", type: .object(CustomSmsProvider.selections)),
          GraphQLField("packageType", type: .scalar(Int.self)),
          GraphQLField("useCustomUserStore", type: .scalar(Bool.self)),
          GraphQLField("loginRequireEmailVerified", type: .scalar(Bool.self)),
          GraphQLField("verifyCodeLength", type: .scalar(Int.self)),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, name: String, domain: String, description: String? = nil, secret: String, jwtSecret: String, ownerId: String? = nil, userpoolTypes: [UserpoolType]? = nil, logo: String, createdAt: String? = nil, updatedAt: String? = nil, emailVerifiedDefault: Bool, sendWelcomeEmail: Bool, registerDisabled: Bool, appSsoEnabled: Bool, showWxQrCodeWhenRegisterDisabled: Bool? = nil, allowedOrigins: String? = nil, tokenExpiresAfter: Int? = nil, isDeleted: Bool? = nil, frequentRegisterCheck: FrequentRegisterCheck? = nil, loginFailCheck: LoginFailCheck? = nil, loginPasswordFailCheck: LoginPasswordFailCheck? = nil, loginFailStrategy: String? = nil, changePhoneStrategy: ChangePhoneStrategy? = nil, changeEmailStrategy: ChangeEmailStrategy? = nil, qrcodeLoginStrategy: QrcodeLoginStrategy? = nil, app2WxappLoginStrategy: App2WxappLoginStrategy? = nil, whitelist: Whitelist? = nil, customSmsProvider: CustomSmsProvider? = nil, packageType: Int? = nil, useCustomUserStore: Bool? = nil, loginRequireEmailVerified: Bool? = nil, verifyCodeLength: Int? = nil) {
        self.init(unsafeResultMap: ["__typename": "UserPool", "id": id, "name": name, "domain": domain, "description": description, "secret": secret, "jwtSecret": jwtSecret, "ownerId": ownerId, "userpoolTypes": userpoolTypes.flatMap { (value: [UserpoolType]) -> [ResultMap] in value.map { (value: UserpoolType) -> ResultMap in value.resultMap } }, "logo": logo, "createdAt": createdAt, "updatedAt": updatedAt, "emailVerifiedDefault": emailVerifiedDefault, "sendWelcomeEmail": sendWelcomeEmail, "registerDisabled": registerDisabled, "appSsoEnabled": appSsoEnabled, "showWxQRCodeWhenRegisterDisabled": showWxQrCodeWhenRegisterDisabled, "allowedOrigins": allowedOrigins, "tokenExpiresAfter": tokenExpiresAfter, "isDeleted": isDeleted, "frequentRegisterCheck": frequentRegisterCheck.flatMap { (value: FrequentRegisterCheck) -> ResultMap in value.resultMap }, "loginFailCheck": loginFailCheck.flatMap { (value: LoginFailCheck) -> ResultMap in value.resultMap }, "loginPasswordFailCheck": loginPasswordFailCheck.flatMap { (value: LoginPasswordFailCheck) -> ResultMap in value.resultMap }, "loginFailStrategy": loginFailStrategy, "changePhoneStrategy": changePhoneStrategy.flatMap { (value: ChangePhoneStrategy) -> ResultMap in value.resultMap }, "changeEmailStrategy": changeEmailStrategy.flatMap { (value: ChangeEmailStrategy) -> ResultMap in value.resultMap }, "qrcodeLoginStrategy": qrcodeLoginStrategy.flatMap { (value: QrcodeLoginStrategy) -> ResultMap in value.resultMap }, "app2WxappLoginStrategy": app2WxappLoginStrategy.flatMap { (value: App2WxappLoginStrategy) -> ResultMap in value.resultMap }, "whitelist": whitelist.flatMap { (value: Whitelist) -> ResultMap in value.resultMap }, "customSMSProvider": customSmsProvider.flatMap { (value: CustomSmsProvider) -> ResultMap in value.resultMap }, "packageType": packageType, "useCustomUserStore": useCustomUserStore, "loginRequireEmailVerified": loginRequireEmailVerified, "verifyCodeLength": verifyCodeLength])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var name: String {
        get {
          return resultMap["name"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var domain: String {
        get {
          return resultMap["domain"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "domain")
        }
      }

      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      public var secret: String {
        get {
          return resultMap["secret"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "secret")
        }
      }

      public var jwtSecret: String {
        get {
          return resultMap["jwtSecret"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "jwtSecret")
        }
      }

      public var ownerId: String? {
        get {
          return resultMap["ownerId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "ownerId")
        }
      }

      public var userpoolTypes: [UserpoolType]? {
        get {
          return (resultMap["userpoolTypes"] as? [ResultMap]).flatMap { (value: [ResultMap]) -> [UserpoolType] in value.map { (value: ResultMap) -> UserpoolType in UserpoolType(unsafeResultMap: value) } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [UserpoolType]) -> [ResultMap] in value.map { (value: UserpoolType) -> ResultMap in value.resultMap } }, forKey: "userpoolTypes")
        }
      }

      public var logo: String {
        get {
          return resultMap["logo"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "logo")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 用户邮箱是否验证（用户的 emailVerified 字段）默认值，默认为 false
      public var emailVerifiedDefault: Bool {
        get {
          return resultMap["emailVerifiedDefault"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerifiedDefault")
        }
      }

      /// 用户注册之后是否发送欢迎邮件
      public var sendWelcomeEmail: Bool {
        get {
          return resultMap["sendWelcomeEmail"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "sendWelcomeEmail")
        }
      }

      /// 是否关闭注册
      public var registerDisabled: Bool {
        get {
          return resultMap["registerDisabled"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerDisabled")
        }
      }

      /// @deprecated 是否开启用户池下应用间单点登录
      public var appSsoEnabled: Bool {
        get {
          return resultMap["appSsoEnabled"]! as! Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "appSsoEnabled")
        }
      }

      /// 用户池禁止注册后，是否还显示微信小程序扫码登录。当 **showWXMPQRCode** 为 **true** 时，
      /// 前端显示小程序码，此时只有以前允许注册时，扫码登录过的用户可以继续登录；新用户扫码无法登录。
      public var showWxQrCodeWhenRegisterDisabled: Bool? {
        get {
          return resultMap["showWxQRCodeWhenRegisterDisabled"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "showWxQRCodeWhenRegisterDisabled")
        }
      }

      /// 前端跨域请求白名单
      public var allowedOrigins: String? {
        get {
          return resultMap["allowedOrigins"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "allowedOrigins")
        }
      }

      /// 用户 **token** 有效时间，单位为秒，默认为 15 天。
      public var tokenExpiresAfter: Int? {
        get {
          return resultMap["tokenExpiresAfter"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiresAfter")
        }
      }

      /// 是否已删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      /// 注册频繁检测
      public var frequentRegisterCheck: FrequentRegisterCheck? {
        get {
          return (resultMap["frequentRegisterCheck"] as? ResultMap).flatMap { FrequentRegisterCheck(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "frequentRegisterCheck")
        }
      }

      /// 登录失败检测
      public var loginFailCheck: LoginFailCheck? {
        get {
          return (resultMap["loginFailCheck"] as? ResultMap).flatMap { LoginFailCheck(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "loginFailCheck")
        }
      }

      /// 登录失败检测
      public var loginPasswordFailCheck: LoginPasswordFailCheck? {
        get {
          return (resultMap["loginPasswordFailCheck"] as? ResultMap).flatMap { LoginPasswordFailCheck(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "loginPasswordFailCheck")
        }
      }

      /// 密码安全策略
      public var loginFailStrategy: String? {
        get {
          return resultMap["loginFailStrategy"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginFailStrategy")
        }
      }

      /// 手机号修改策略
      public var changePhoneStrategy: ChangePhoneStrategy? {
        get {
          return (resultMap["changePhoneStrategy"] as? ResultMap).flatMap { ChangePhoneStrategy(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "changePhoneStrategy")
        }
      }

      /// 邮箱修改策略
      public var changeEmailStrategy: ChangeEmailStrategy? {
        get {
          return (resultMap["changeEmailStrategy"] as? ResultMap).flatMap { ChangeEmailStrategy(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "changeEmailStrategy")
        }
      }

      /// APP 扫码登录配置
      public var qrcodeLoginStrategy: QrcodeLoginStrategy? {
        get {
          return (resultMap["qrcodeLoginStrategy"] as? ResultMap).flatMap { QrcodeLoginStrategy(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "qrcodeLoginStrategy")
        }
      }

      /// APP 拉起小程序登录配置
      public var app2WxappLoginStrategy: App2WxappLoginStrategy? {
        get {
          return (resultMap["app2WxappLoginStrategy"] as? ResultMap).flatMap { App2WxappLoginStrategy(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "app2WxappLoginStrategy")
        }
      }

      /// 注册白名单配置
      public var whitelist: Whitelist? {
        get {
          return (resultMap["whitelist"] as? ResultMap).flatMap { Whitelist(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "whitelist")
        }
      }

      /// 自定义短信服务商配置
      public var customSmsProvider: CustomSmsProvider? {
        get {
          return (resultMap["customSMSProvider"] as? ResultMap).flatMap { CustomSmsProvider(unsafeResultMap: $0) }
        }
        set {
          resultMap.updateValue(newValue?.resultMap, forKey: "customSMSProvider")
        }
      }

      /// 用户池套餐类型
      public var packageType: Int? {
        get {
          return resultMap["packageType"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "packageType")
        }
      }

      /// 是否使用自定义数据库 CUSTOM_USER_STORE 模式
      public var useCustomUserStore: Bool? {
        get {
          return resultMap["useCustomUserStore"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "useCustomUserStore")
        }
      }

      /// 是否要求邮箱必须验证才能登录（如果是通过邮箱登录的话）
      public var loginRequireEmailVerified: Bool? {
        get {
          return resultMap["loginRequireEmailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginRequireEmailVerified")
        }
      }

      /// 短信验证码长度
      public var verifyCodeLength: Int? {
        get {
          return resultMap["verifyCodeLength"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "verifyCodeLength")
        }
      }

      public struct UserpoolType: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["UserPoolType"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("code", type: .scalar(String.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("image", type: .scalar(String.self)),
            GraphQLField("sdks", type: .list(.scalar(String.self))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(code: String? = nil, name: String? = nil, description: String? = nil, image: String? = nil, sdks: [String?]? = nil) {
          self.init(unsafeResultMap: ["__typename": "UserPoolType", "code": code, "name": name, "description": description, "image": image, "sdks": sdks])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var code: String? {
          get {
            return resultMap["code"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "code")
          }
        }

        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        public var image: String? {
          get {
            return resultMap["image"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "image")
          }
        }

        public var sdks: [String?]? {
          get {
            return resultMap["sdks"] as? [String?]
          }
          set {
            resultMap.updateValue(newValue, forKey: "sdks")
          }
        }
      }

      public struct FrequentRegisterCheck: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["FrequentRegisterCheckConfig"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("timeInterval", type: .scalar(Int.self)),
            GraphQLField("limit", type: .scalar(Int.self)),
            GraphQLField("enabled", type: .scalar(Bool.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(timeInterval: Int? = nil, limit: Int? = nil, enabled: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "FrequentRegisterCheckConfig", "timeInterval": timeInterval, "limit": limit, "enabled": enabled])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var timeInterval: Int? {
          get {
            return resultMap["timeInterval"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "timeInterval")
          }
        }

        public var limit: Int? {
          get {
            return resultMap["limit"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "limit")
          }
        }

        public var enabled: Bool? {
          get {
            return resultMap["enabled"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "enabled")
          }
        }
      }

      public struct LoginFailCheck: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["LoginFailCheckConfig"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("timeInterval", type: .scalar(Int.self)),
            GraphQLField("limit", type: .scalar(Int.self)),
            GraphQLField("enabled", type: .scalar(Bool.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(timeInterval: Int? = nil, limit: Int? = nil, enabled: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "LoginFailCheckConfig", "timeInterval": timeInterval, "limit": limit, "enabled": enabled])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var timeInterval: Int? {
          get {
            return resultMap["timeInterval"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "timeInterval")
          }
        }

        public var limit: Int? {
          get {
            return resultMap["limit"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "limit")
          }
        }

        public var enabled: Bool? {
          get {
            return resultMap["enabled"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "enabled")
          }
        }
      }

      public struct LoginPasswordFailCheck: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["LoginPasswordFailCheckConfig"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("timeInterval", type: .scalar(Int.self)),
            GraphQLField("limit", type: .scalar(Int.self)),
            GraphQLField("enabled", type: .scalar(Bool.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(timeInterval: Int? = nil, limit: Int? = nil, enabled: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "LoginPasswordFailCheckConfig", "timeInterval": timeInterval, "limit": limit, "enabled": enabled])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var timeInterval: Int? {
          get {
            return resultMap["timeInterval"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "timeInterval")
          }
        }

        public var limit: Int? {
          get {
            return resultMap["limit"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "limit")
          }
        }

        public var enabled: Bool? {
          get {
            return resultMap["enabled"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "enabled")
          }
        }
      }

      public struct ChangePhoneStrategy: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["ChangePhoneStrategy"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("verifyOldPhone", type: .scalar(Bool.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(verifyOldPhone: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "ChangePhoneStrategy", "verifyOldPhone": verifyOldPhone])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var verifyOldPhone: Bool? {
          get {
            return resultMap["verifyOldPhone"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "verifyOldPhone")
          }
        }
      }

      public struct ChangeEmailStrategy: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["ChangeEmailStrategy"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("verifyOldEmail", type: .scalar(Bool.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(verifyOldEmail: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "ChangeEmailStrategy", "verifyOldEmail": verifyOldEmail])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var verifyOldEmail: Bool? {
          get {
            return resultMap["verifyOldEmail"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "verifyOldEmail")
          }
        }
      }

      public struct QrcodeLoginStrategy: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["QrcodeLoginStrategy"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("qrcodeExpiresAfter", type: .scalar(Int.self)),
            GraphQLField("returnFullUserInfo", type: .scalar(Bool.self)),
            GraphQLField("allowExchangeUserInfoFromBrowser", type: .scalar(Bool.self)),
            GraphQLField("ticketExpiresAfter", type: .scalar(Int.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(qrcodeExpiresAfter: Int? = nil, returnFullUserInfo: Bool? = nil, allowExchangeUserInfoFromBrowser: Bool? = nil, ticketExpiresAfter: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "QrcodeLoginStrategy", "qrcodeExpiresAfter": qrcodeExpiresAfter, "returnFullUserInfo": returnFullUserInfo, "allowExchangeUserInfoFromBrowser": allowExchangeUserInfoFromBrowser, "ticketExpiresAfter": ticketExpiresAfter])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var qrcodeExpiresAfter: Int? {
          get {
            return resultMap["qrcodeExpiresAfter"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "qrcodeExpiresAfter")
          }
        }

        public var returnFullUserInfo: Bool? {
          get {
            return resultMap["returnFullUserInfo"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "returnFullUserInfo")
          }
        }

        public var allowExchangeUserInfoFromBrowser: Bool? {
          get {
            return resultMap["allowExchangeUserInfoFromBrowser"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "allowExchangeUserInfoFromBrowser")
          }
        }

        public var ticketExpiresAfter: Int? {
          get {
            return resultMap["ticketExpiresAfter"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "ticketExpiresAfter")
          }
        }
      }

      public struct App2WxappLoginStrategy: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["App2WxappLoginStrategy"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("ticketExpriresAfter", type: .scalar(Int.self)),
            GraphQLField("ticketExchangeUserInfoNeedSecret", type: .scalar(Bool.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(ticketExpriresAfter: Int? = nil, ticketExchangeUserInfoNeedSecret: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "App2WxappLoginStrategy", "ticketExpriresAfter": ticketExpriresAfter, "ticketExchangeUserInfoNeedSecret": ticketExchangeUserInfoNeedSecret])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var ticketExpriresAfter: Int? {
          get {
            return resultMap["ticketExpriresAfter"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "ticketExpriresAfter")
          }
        }

        public var ticketExchangeUserInfoNeedSecret: Bool? {
          get {
            return resultMap["ticketExchangeUserInfoNeedSecret"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "ticketExchangeUserInfoNeedSecret")
          }
        }
      }

      public struct Whitelist: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["RegisterWhiteListConfig"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("phoneEnabled", type: .scalar(Bool.self)),
            GraphQLField("emailEnabled", type: .scalar(Bool.self)),
            GraphQLField("usernameEnabled", type: .scalar(Bool.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(phoneEnabled: Bool? = nil, emailEnabled: Bool? = nil, usernameEnabled: Bool? = nil) {
          self.init(unsafeResultMap: ["__typename": "RegisterWhiteListConfig", "phoneEnabled": phoneEnabled, "emailEnabled": emailEnabled, "usernameEnabled": usernameEnabled])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 是否开启手机号注册白名单
        public var phoneEnabled: Bool? {
          get {
            return resultMap["phoneEnabled"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "phoneEnabled")
          }
        }

        /// 是否开启邮箱注册白名单
        public var emailEnabled: Bool? {
          get {
            return resultMap["emailEnabled"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "emailEnabled")
          }
        }

        /// 是否开用户名注册白名单
        public var usernameEnabled: Bool? {
          get {
            return resultMap["usernameEnabled"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "usernameEnabled")
          }
        }
      }

      public struct CustomSmsProvider: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["CustomSMSProvider"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("enabled", type: .scalar(Bool.self)),
            GraphQLField("provider", type: .scalar(String.self)),
            GraphQLField("config", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(enabled: Bool? = nil, provider: String? = nil, config: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "CustomSMSProvider", "enabled": enabled, "provider": provider, "config": config])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var enabled: Bool? {
          get {
            return resultMap["enabled"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "enabled")
          }
        }

        public var provider: String? {
          get {
            return resultMap["provider"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "provider")
          }
        }

        public var config: String? {
          get {
            return resultMap["config"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "config")
          }
        }
      }
    }
  }
}

public final class UserpoolsQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query userpools($page: Int, $limit: Int, $sortBy: SortByEnum) {
      userpools(page: $page, limit: $limit, sortBy: $sortBy) {
        __typename
        totalCount
        list {
          __typename
          id
          name
          domain
          ownerId
          description
          secret
          jwtSecret
          logo
          createdAt
          updatedAt
          emailVerifiedDefault
          sendWelcomeEmail
          registerDisabled
          appSsoEnabled
          showWxQRCodeWhenRegisterDisabled
          allowedOrigins
          tokenExpiresAfter
          isDeleted
          packageType
          useCustomUserStore
          loginRequireEmailVerified
          verifyCodeLength
        }
      }
    }
    """

  public let operationName: String = "userpools"

  public var page: Int?
  public var limit: Int?
  public var sortBy: SortByEnum?

  public init(page: Int? = nil, limit: Int? = nil, sortBy: SortByEnum? = nil) {
    self.page = page
    self.limit = limit
    self.sortBy = sortBy
  }

  public var variables: GraphQLMap? {
    return ["page": page, "limit": limit, "sortBy": sortBy]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("userpools", arguments: ["page": GraphQLVariable("page"), "limit": GraphQLVariable("limit"), "sortBy": GraphQLVariable("sortBy")], type: .nonNull(.object(Userpool.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(userpools: Userpool) {
      self.init(unsafeResultMap: ["__typename": "Query", "userpools": userpools.resultMap])
    }

    /// 查询用户池列表
    public var userpools: Userpool {
      get {
        return Userpool(unsafeResultMap: resultMap["userpools"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "userpools")
      }
    }

    public struct Userpool: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PaginatedUserpool"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
          GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(totalCount: Int, list: [List]) {
        self.init(unsafeResultMap: ["__typename": "PaginatedUserpool", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var totalCount: Int {
        get {
          return resultMap["totalCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "totalCount")
        }
      }

      public var list: [List] {
        get {
          return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
        }
      }

      public struct List: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["UserPool"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(String.self))),
            GraphQLField("name", type: .nonNull(.scalar(String.self))),
            GraphQLField("domain", type: .nonNull(.scalar(String.self))),
            GraphQLField("ownerId", type: .scalar(String.self)),
            GraphQLField("description", type: .scalar(String.self)),
            GraphQLField("secret", type: .nonNull(.scalar(String.self))),
            GraphQLField("jwtSecret", type: .nonNull(.scalar(String.self))),
            GraphQLField("logo", type: .nonNull(.scalar(String.self))),
            GraphQLField("createdAt", type: .scalar(String.self)),
            GraphQLField("updatedAt", type: .scalar(String.self)),
            GraphQLField("emailVerifiedDefault", type: .nonNull(.scalar(Bool.self))),
            GraphQLField("sendWelcomeEmail", type: .nonNull(.scalar(Bool.self))),
            GraphQLField("registerDisabled", type: .nonNull(.scalar(Bool.self))),
            GraphQLField("appSsoEnabled", type: .nonNull(.scalar(Bool.self))),
            GraphQLField("showWxQRCodeWhenRegisterDisabled", type: .scalar(Bool.self)),
            GraphQLField("allowedOrigins", type: .scalar(String.self)),
            GraphQLField("tokenExpiresAfter", type: .scalar(Int.self)),
            GraphQLField("isDeleted", type: .scalar(Bool.self)),
            GraphQLField("packageType", type: .scalar(Int.self)),
            GraphQLField("useCustomUserStore", type: .scalar(Bool.self)),
            GraphQLField("loginRequireEmailVerified", type: .scalar(Bool.self)),
            GraphQLField("verifyCodeLength", type: .scalar(Int.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String, name: String, domain: String, ownerId: String? = nil, description: String? = nil, secret: String, jwtSecret: String, logo: String, createdAt: String? = nil, updatedAt: String? = nil, emailVerifiedDefault: Bool, sendWelcomeEmail: Bool, registerDisabled: Bool, appSsoEnabled: Bool, showWxQrCodeWhenRegisterDisabled: Bool? = nil, allowedOrigins: String? = nil, tokenExpiresAfter: Int? = nil, isDeleted: Bool? = nil, packageType: Int? = nil, useCustomUserStore: Bool? = nil, loginRequireEmailVerified: Bool? = nil, verifyCodeLength: Int? = nil) {
          self.init(unsafeResultMap: ["__typename": "UserPool", "id": id, "name": name, "domain": domain, "ownerId": ownerId, "description": description, "secret": secret, "jwtSecret": jwtSecret, "logo": logo, "createdAt": createdAt, "updatedAt": updatedAt, "emailVerifiedDefault": emailVerifiedDefault, "sendWelcomeEmail": sendWelcomeEmail, "registerDisabled": registerDisabled, "appSsoEnabled": appSsoEnabled, "showWxQRCodeWhenRegisterDisabled": showWxQrCodeWhenRegisterDisabled, "allowedOrigins": allowedOrigins, "tokenExpiresAfter": tokenExpiresAfter, "isDeleted": isDeleted, "packageType": packageType, "useCustomUserStore": useCustomUserStore, "loginRequireEmailVerified": loginRequireEmailVerified, "verifyCodeLength": verifyCodeLength])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var id: String {
          get {
            return resultMap["id"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var name: String {
          get {
            return resultMap["name"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        public var domain: String {
          get {
            return resultMap["domain"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "domain")
          }
        }

        public var ownerId: String? {
          get {
            return resultMap["ownerId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "ownerId")
          }
        }

        public var description: String? {
          get {
            return resultMap["description"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "description")
          }
        }

        public var secret: String {
          get {
            return resultMap["secret"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "secret")
          }
        }

        public var jwtSecret: String {
          get {
            return resultMap["jwtSecret"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "jwtSecret")
          }
        }

        public var logo: String {
          get {
            return resultMap["logo"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "logo")
          }
        }

        public var createdAt: String? {
          get {
            return resultMap["createdAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String? {
          get {
            return resultMap["updatedAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        /// 用户邮箱是否验证（用户的 emailVerified 字段）默认值，默认为 false
        public var emailVerifiedDefault: Bool {
          get {
            return resultMap["emailVerifiedDefault"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "emailVerifiedDefault")
          }
        }

        /// 用户注册之后是否发送欢迎邮件
        public var sendWelcomeEmail: Bool {
          get {
            return resultMap["sendWelcomeEmail"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "sendWelcomeEmail")
          }
        }

        /// 是否关闭注册
        public var registerDisabled: Bool {
          get {
            return resultMap["registerDisabled"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "registerDisabled")
          }
        }

        /// @deprecated 是否开启用户池下应用间单点登录
        public var appSsoEnabled: Bool {
          get {
            return resultMap["appSsoEnabled"]! as! Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "appSsoEnabled")
          }
        }

        /// 用户池禁止注册后，是否还显示微信小程序扫码登录。当 **showWXMPQRCode** 为 **true** 时，
        /// 前端显示小程序码，此时只有以前允许注册时，扫码登录过的用户可以继续登录；新用户扫码无法登录。
        public var showWxQrCodeWhenRegisterDisabled: Bool? {
          get {
            return resultMap["showWxQRCodeWhenRegisterDisabled"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "showWxQRCodeWhenRegisterDisabled")
          }
        }

        /// 前端跨域请求白名单
        public var allowedOrigins: String? {
          get {
            return resultMap["allowedOrigins"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "allowedOrigins")
          }
        }

        /// 用户 **token** 有效时间，单位为秒，默认为 15 天。
        public var tokenExpiresAfter: Int? {
          get {
            return resultMap["tokenExpiresAfter"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenExpiresAfter")
          }
        }

        /// 是否已删除
        public var isDeleted: Bool? {
          get {
            return resultMap["isDeleted"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isDeleted")
          }
        }

        /// 用户池套餐类型
        public var packageType: Int? {
          get {
            return resultMap["packageType"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "packageType")
          }
        }

        /// 是否使用自定义数据库 CUSTOM_USER_STORE 模式
        public var useCustomUserStore: Bool? {
          get {
            return resultMap["useCustomUserStore"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "useCustomUserStore")
          }
        }

        /// 是否要求邮箱必须验证才能登录（如果是通过邮箱登录的话）
        public var loginRequireEmailVerified: Bool? {
          get {
            return resultMap["loginRequireEmailVerified"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "loginRequireEmailVerified")
          }
        }

        /// 短信验证码长度
        public var verifyCodeLength: Int? {
          get {
            return resultMap["verifyCodeLength"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "verifyCodeLength")
          }
        }
      }
    }
  }
}

public final class UserpoolTypesQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query userpoolTypes {
      userpoolTypes {
        __typename
        code
        name
        description
        image
        sdks
      }
    }
    """

  public let operationName: String = "userpoolTypes"

  public init() {
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("userpoolTypes", type: .nonNull(.list(.nonNull(.object(UserpoolType.selections))))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(userpoolTypes: [UserpoolType]) {
      self.init(unsafeResultMap: ["__typename": "Query", "userpoolTypes": userpoolTypes.map { (value: UserpoolType) -> ResultMap in value.resultMap }])
    }

    public var userpoolTypes: [UserpoolType] {
      get {
        return (resultMap["userpoolTypes"] as! [ResultMap]).map { (value: ResultMap) -> UserpoolType in UserpoolType(unsafeResultMap: value) }
      }
      set {
        resultMap.updateValue(newValue.map { (value: UserpoolType) -> ResultMap in value.resultMap }, forKey: "userpoolTypes")
      }
    }

    public struct UserpoolType: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["UserPoolType"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("code", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("description", type: .scalar(String.self)),
          GraphQLField("image", type: .scalar(String.self)),
          GraphQLField("sdks", type: .list(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(code: String? = nil, name: String? = nil, description: String? = nil, image: String? = nil, sdks: [String?]? = nil) {
        self.init(unsafeResultMap: ["__typename": "UserPoolType", "code": code, "name": name, "description": description, "image": image, "sdks": sdks])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var code: String? {
        get {
          return resultMap["code"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "code")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var description: String? {
        get {
          return resultMap["description"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "description")
        }
      }

      public var image: String? {
        get {
          return resultMap["image"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "image")
        }
      }

      public var sdks: [String?]? {
        get {
          return resultMap["sdks"] as? [String?]
        }
        set {
          resultMap.updateValue(newValue, forKey: "sdks")
        }
      }
    }
  }
}

public final class UsersQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query users($page: Int, $limit: Int, $sortBy: SortByEnum, $excludeUsersInOrg: Boolean) {
      users(
        page: $page
        limit: $limit
        sortBy: $sortBy
        excludeUsersInOrg: $excludeUsersInOrg
      ) {
        __typename
        totalCount
        list {
          __typename
          identities {
            __typename
            openid
            userIdInIdp
            userId
            connectionId
            isSocial
            provider
            type
            userPoolId
          }
          id
          arn
          userPoolId
          status
          username
          email
          emailVerified
          phone
          phoneVerified
          unionid
          openid
          nickname
          registerSource
          photo
          password
          oauth
          token
          tokenExpiredAt
          loginsCount
          lastLogin
          lastIP
          signedUp
          blocked
          isDeleted
          device
          browser
          company
          name
          givenName
          familyName
          middleName
          profile
          preferredUsername
          website
          gender
          birthdate
          zoneinfo
          locale
          address
          formatted
          streetAddress
          locality
          region
          postalCode
          city
          province
          country
          createdAt
          updatedAt
          externalId
        }
      }
    }
    """

  public let operationName: String = "users"

  public var page: Int?
  public var limit: Int?
  public var sortBy: SortByEnum?
  public var excludeUsersInOrg: Bool?

  public init(page: Int? = nil, limit: Int? = nil, sortBy: SortByEnum? = nil, excludeUsersInOrg: Bool? = nil) {
    self.page = page
    self.limit = limit
    self.sortBy = sortBy
    self.excludeUsersInOrg = excludeUsersInOrg
  }

  public var variables: GraphQLMap? {
    return ["page": page, "limit": limit, "sortBy": sortBy, "excludeUsersInOrg": excludeUsersInOrg]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("users", arguments: ["page": GraphQLVariable("page"), "limit": GraphQLVariable("limit"), "sortBy": GraphQLVariable("sortBy"), "excludeUsersInOrg": GraphQLVariable("excludeUsersInOrg")], type: .nonNull(.object(User.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(users: User) {
      self.init(unsafeResultMap: ["__typename": "Query", "users": users.resultMap])
    }

    public var users: User {
      get {
        return User(unsafeResultMap: resultMap["users"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "users")
      }
    }

    public struct User: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PaginatedUsers"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
          GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(totalCount: Int, list: [List]) {
        self.init(unsafeResultMap: ["__typename": "PaginatedUsers", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var totalCount: Int {
        get {
          return resultMap["totalCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "totalCount")
        }
      }

      public var list: [List] {
        get {
          return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
        }
      }

      public struct List: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["User"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("identities", type: .list(.object(Identity.selections))),
            GraphQLField("id", type: .nonNull(.scalar(String.self))),
            GraphQLField("arn", type: .nonNull(.scalar(String.self))),
            GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
            GraphQLField("status", type: .scalar(UserStatus.self)),
            GraphQLField("username", type: .scalar(String.self)),
            GraphQLField("email", type: .scalar(String.self)),
            GraphQLField("emailVerified", type: .scalar(Bool.self)),
            GraphQLField("phone", type: .scalar(String.self)),
            GraphQLField("phoneVerified", type: .scalar(Bool.self)),
            GraphQLField("unionid", type: .scalar(String.self)),
            GraphQLField("openid", type: .scalar(String.self)),
            GraphQLField("nickname", type: .scalar(String.self)),
            GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
            GraphQLField("photo", type: .scalar(String.self)),
            GraphQLField("password", type: .scalar(String.self)),
            GraphQLField("oauth", type: .scalar(String.self)),
            GraphQLField("token", type: .scalar(String.self)),
            GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
            GraphQLField("loginsCount", type: .scalar(Int.self)),
            GraphQLField("lastLogin", type: .scalar(String.self)),
            GraphQLField("lastIP", type: .scalar(String.self)),
            GraphQLField("signedUp", type: .scalar(String.self)),
            GraphQLField("blocked", type: .scalar(Bool.self)),
            GraphQLField("isDeleted", type: .scalar(Bool.self)),
            GraphQLField("device", type: .scalar(String.self)),
            GraphQLField("browser", type: .scalar(String.self)),
            GraphQLField("company", type: .scalar(String.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("givenName", type: .scalar(String.self)),
            GraphQLField("familyName", type: .scalar(String.self)),
            GraphQLField("middleName", type: .scalar(String.self)),
            GraphQLField("profile", type: .scalar(String.self)),
            GraphQLField("preferredUsername", type: .scalar(String.self)),
            GraphQLField("website", type: .scalar(String.self)),
            GraphQLField("gender", type: .scalar(String.self)),
            GraphQLField("birthdate", type: .scalar(String.self)),
            GraphQLField("zoneinfo", type: .scalar(String.self)),
            GraphQLField("locale", type: .scalar(String.self)),
            GraphQLField("address", type: .scalar(String.self)),
            GraphQLField("formatted", type: .scalar(String.self)),
            GraphQLField("streetAddress", type: .scalar(String.self)),
            GraphQLField("locality", type: .scalar(String.self)),
            GraphQLField("region", type: .scalar(String.self)),
            GraphQLField("postalCode", type: .scalar(String.self)),
            GraphQLField("city", type: .scalar(String.self)),
            GraphQLField("province", type: .scalar(String.self)),
            GraphQLField("country", type: .scalar(String.self)),
            GraphQLField("createdAt", type: .scalar(String.self)),
            GraphQLField("updatedAt", type: .scalar(String.self)),
            GraphQLField("externalId", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(identities: [Identity?]? = nil, id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "User", "identities": identities.flatMap { (value: [Identity?]) -> [ResultMap?] in value.map { (value: Identity?) -> ResultMap? in value.flatMap { (value: Identity) -> ResultMap in value.resultMap } } }, "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 用户的身份信息
        public var identities: [Identity?]? {
          get {
            return (resultMap["identities"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Identity?] in value.map { (value: ResultMap?) -> Identity? in value.flatMap { (value: ResultMap) -> Identity in Identity(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Identity?]) -> [ResultMap?] in value.map { (value: Identity?) -> ResultMap? in value.flatMap { (value: Identity) -> ResultMap in value.resultMap } } }, forKey: "identities")
          }
        }

        /// 用户 ID
        public var id: String {
          get {
            return resultMap["id"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        public var arn: String {
          get {
            return resultMap["arn"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "arn")
          }
        }

        /// 用户池 ID
        public var userPoolId: String {
          get {
            return resultMap["userPoolId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "userPoolId")
          }
        }

        /// 用户在组织机构中的状态
        public var status: UserStatus? {
          get {
            return resultMap["status"] as? UserStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// 用户名，用户池内唯一
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// 邮箱，用户池内唯一
        public var email: String? {
          get {
            return resultMap["email"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "email")
          }
        }

        /// 邮箱是否已验证
        public var emailVerified: Bool? {
          get {
            return resultMap["emailVerified"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "emailVerified")
          }
        }

        /// 手机号，用户池内唯一
        public var phone: String? {
          get {
            return resultMap["phone"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "phone")
          }
        }

        /// 手机号是否已验证
        public var phoneVerified: Bool? {
          get {
            return resultMap["phoneVerified"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "phoneVerified")
          }
        }

        public var unionid: String? {
          get {
            return resultMap["unionid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "unionid")
          }
        }

        public var openid: String? {
          get {
            return resultMap["openid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "openid")
          }
        }

        /// 昵称，该字段不唯一。
        public var nickname: String? {
          get {
            return resultMap["nickname"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "nickname")
          }
        }

        /// 注册方式
        public var registerSource: [String]? {
          get {
            return resultMap["registerSource"] as? [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "registerSource")
          }
        }

        /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
        public var photo: String? {
          get {
            return resultMap["photo"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "photo")
          }
        }

        /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
        public var password: String? {
          get {
            return resultMap["password"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "password")
          }
        }

        /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
        public var oauth: String? {
          get {
            return resultMap["oauth"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "oauth")
          }
        }

        /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
        public var token: String? {
          get {
            return resultMap["token"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "token")
          }
        }

        /// token 过期时间
        public var tokenExpiredAt: String? {
          get {
            return resultMap["tokenExpiredAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
          }
        }

        /// 用户登录总次数
        public var loginsCount: Int? {
          get {
            return resultMap["loginsCount"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "loginsCount")
          }
        }

        /// 用户最近一次登录时间
        public var lastLogin: String? {
          get {
            return resultMap["lastLogin"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "lastLogin")
          }
        }

        /// 用户上一次登录时使用的 IP
        public var lastIp: String? {
          get {
            return resultMap["lastIP"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "lastIP")
          }
        }

        /// 用户注册时间
        public var signedUp: String? {
          get {
            return resultMap["signedUp"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "signedUp")
          }
        }

        /// 该账号是否被禁用
        public var blocked: Bool? {
          get {
            return resultMap["blocked"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "blocked")
          }
        }

        /// 账号是否被软删除
        public var isDeleted: Bool? {
          get {
            return resultMap["isDeleted"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isDeleted")
          }
        }

        public var device: String? {
          get {
            return resultMap["device"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "device")
          }
        }

        public var browser: String? {
          get {
            return resultMap["browser"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "browser")
          }
        }

        public var company: String? {
          get {
            return resultMap["company"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "company")
          }
        }

        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        public var givenName: String? {
          get {
            return resultMap["givenName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "givenName")
          }
        }

        public var familyName: String? {
          get {
            return resultMap["familyName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "familyName")
          }
        }

        public var middleName: String? {
          get {
            return resultMap["middleName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "middleName")
          }
        }

        public var profile: String? {
          get {
            return resultMap["profile"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "profile")
          }
        }

        public var preferredUsername: String? {
          get {
            return resultMap["preferredUsername"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "preferredUsername")
          }
        }

        public var website: String? {
          get {
            return resultMap["website"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "website")
          }
        }

        public var gender: String? {
          get {
            return resultMap["gender"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "gender")
          }
        }

        public var birthdate: String? {
          get {
            return resultMap["birthdate"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "birthdate")
          }
        }

        public var zoneinfo: String? {
          get {
            return resultMap["zoneinfo"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "zoneinfo")
          }
        }

        public var locale: String? {
          get {
            return resultMap["locale"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "locale")
          }
        }

        public var address: String? {
          get {
            return resultMap["address"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "address")
          }
        }

        public var formatted: String? {
          get {
            return resultMap["formatted"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "formatted")
          }
        }

        public var streetAddress: String? {
          get {
            return resultMap["streetAddress"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "streetAddress")
          }
        }

        public var locality: String? {
          get {
            return resultMap["locality"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "locality")
          }
        }

        public var region: String? {
          get {
            return resultMap["region"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "region")
          }
        }

        public var postalCode: String? {
          get {
            return resultMap["postalCode"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "postalCode")
          }
        }

        public var city: String? {
          get {
            return resultMap["city"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "city")
          }
        }

        public var province: String? {
          get {
            return resultMap["province"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "province")
          }
        }

        public var country: String? {
          get {
            return resultMap["country"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "country")
          }
        }

        public var createdAt: String? {
          get {
            return resultMap["createdAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String? {
          get {
            return resultMap["updatedAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        /// 用户外部 ID
        public var externalId: String? {
          get {
            return resultMap["externalId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "externalId")
          }
        }

        public struct Identity: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Identity"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("openid", type: .scalar(String.self)),
              GraphQLField("userIdInIdp", type: .scalar(String.self)),
              GraphQLField("userId", type: .scalar(String.self)),
              GraphQLField("connectionId", type: .scalar(String.self)),
              GraphQLField("isSocial", type: .scalar(Bool.self)),
              GraphQLField("provider", type: .scalar(String.self)),
              GraphQLField("type", type: .scalar(String.self)),
              GraphQLField("userPoolId", type: .scalar(String.self)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(openid: String? = nil, userIdInIdp: String? = nil, userId: String? = nil, connectionId: String? = nil, isSocial: Bool? = nil, provider: String? = nil, type: String? = nil, userPoolId: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "Identity", "openid": openid, "userIdInIdp": userIdInIdp, "userId": userId, "connectionId": connectionId, "isSocial": isSocial, "provider": provider, "type": type, "userPoolId": userPoolId])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var openid: String? {
            get {
              return resultMap["openid"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "openid")
            }
          }

          public var userIdInIdp: String? {
            get {
              return resultMap["userIdInIdp"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "userIdInIdp")
            }
          }

          public var userId: String? {
            get {
              return resultMap["userId"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "userId")
            }
          }

          public var connectionId: String? {
            get {
              return resultMap["connectionId"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "connectionId")
            }
          }

          public var isSocial: Bool? {
            get {
              return resultMap["isSocial"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "isSocial")
            }
          }

          public var provider: String? {
            get {
              return resultMap["provider"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "provider")
            }
          }

          public var type: String? {
            get {
              return resultMap["type"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "type")
            }
          }

          public var userPoolId: String? {
            get {
              return resultMap["userPoolId"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "userPoolId")
            }
          }
        }
      }
    }
  }
}

public final class UsersWithCustomDataQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query usersWithCustomData($page: Int, $limit: Int, $sortBy: SortByEnum, $excludeUsersInOrg: Boolean) {
      users(
        page: $page
        limit: $limit
        sortBy: $sortBy
        excludeUsersInOrg: $excludeUsersInOrg
      ) {
        __typename
        totalCount
        list {
          __typename
          id
          identities {
            __typename
            openid
            userIdInIdp
            userId
            connectionId
            isSocial
            provider
            type
            userPoolId
          }
          arn
          userPoolId
          status
          username
          email
          emailVerified
          phone
          phoneVerified
          unionid
          openid
          nickname
          registerSource
          photo
          password
          oauth
          token
          tokenExpiredAt
          loginsCount
          lastLogin
          lastIP
          signedUp
          blocked
          isDeleted
          device
          browser
          company
          name
          givenName
          familyName
          middleName
          profile
          preferredUsername
          website
          gender
          birthdate
          zoneinfo
          locale
          address
          formatted
          streetAddress
          locality
          region
          postalCode
          city
          province
          country
          createdAt
          updatedAt
          externalId
          customData {
            __typename
            key
            value
            dataType
            label
          }
        }
      }
    }
    """

  public let operationName: String = "usersWithCustomData"

  public var page: Int?
  public var limit: Int?
  public var sortBy: SortByEnum?
  public var excludeUsersInOrg: Bool?

  public init(page: Int? = nil, limit: Int? = nil, sortBy: SortByEnum? = nil, excludeUsersInOrg: Bool? = nil) {
    self.page = page
    self.limit = limit
    self.sortBy = sortBy
    self.excludeUsersInOrg = excludeUsersInOrg
  }

  public var variables: GraphQLMap? {
    return ["page": page, "limit": limit, "sortBy": sortBy, "excludeUsersInOrg": excludeUsersInOrg]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("users", arguments: ["page": GraphQLVariable("page"), "limit": GraphQLVariable("limit"), "sortBy": GraphQLVariable("sortBy"), "excludeUsersInOrg": GraphQLVariable("excludeUsersInOrg")], type: .nonNull(.object(User.selections))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(users: User) {
      self.init(unsafeResultMap: ["__typename": "Query", "users": users.resultMap])
    }

    public var users: User {
      get {
        return User(unsafeResultMap: resultMap["users"]! as! ResultMap)
      }
      set {
        resultMap.updateValue(newValue.resultMap, forKey: "users")
      }
    }

    public struct User: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["PaginatedUsers"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("totalCount", type: .nonNull(.scalar(Int.self))),
          GraphQLField("list", type: .nonNull(.list(.nonNull(.object(List.selections))))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(totalCount: Int, list: [List]) {
        self.init(unsafeResultMap: ["__typename": "PaginatedUsers", "totalCount": totalCount, "list": list.map { (value: List) -> ResultMap in value.resultMap }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var totalCount: Int {
        get {
          return resultMap["totalCount"]! as! Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "totalCount")
        }
      }

      public var list: [List] {
        get {
          return (resultMap["list"] as! [ResultMap]).map { (value: ResultMap) -> List in List(unsafeResultMap: value) }
        }
        set {
          resultMap.updateValue(newValue.map { (value: List) -> ResultMap in value.resultMap }, forKey: "list")
        }
      }

      public struct List: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["User"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("id", type: .nonNull(.scalar(String.self))),
            GraphQLField("identities", type: .list(.object(Identity.selections))),
            GraphQLField("arn", type: .nonNull(.scalar(String.self))),
            GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
            GraphQLField("status", type: .scalar(UserStatus.self)),
            GraphQLField("username", type: .scalar(String.self)),
            GraphQLField("email", type: .scalar(String.self)),
            GraphQLField("emailVerified", type: .scalar(Bool.self)),
            GraphQLField("phone", type: .scalar(String.self)),
            GraphQLField("phoneVerified", type: .scalar(Bool.self)),
            GraphQLField("unionid", type: .scalar(String.self)),
            GraphQLField("openid", type: .scalar(String.self)),
            GraphQLField("nickname", type: .scalar(String.self)),
            GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
            GraphQLField("photo", type: .scalar(String.self)),
            GraphQLField("password", type: .scalar(String.self)),
            GraphQLField("oauth", type: .scalar(String.self)),
            GraphQLField("token", type: .scalar(String.self)),
            GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
            GraphQLField("loginsCount", type: .scalar(Int.self)),
            GraphQLField("lastLogin", type: .scalar(String.self)),
            GraphQLField("lastIP", type: .scalar(String.self)),
            GraphQLField("signedUp", type: .scalar(String.self)),
            GraphQLField("blocked", type: .scalar(Bool.self)),
            GraphQLField("isDeleted", type: .scalar(Bool.self)),
            GraphQLField("device", type: .scalar(String.self)),
            GraphQLField("browser", type: .scalar(String.self)),
            GraphQLField("company", type: .scalar(String.self)),
            GraphQLField("name", type: .scalar(String.self)),
            GraphQLField("givenName", type: .scalar(String.self)),
            GraphQLField("familyName", type: .scalar(String.self)),
            GraphQLField("middleName", type: .scalar(String.self)),
            GraphQLField("profile", type: .scalar(String.self)),
            GraphQLField("preferredUsername", type: .scalar(String.self)),
            GraphQLField("website", type: .scalar(String.self)),
            GraphQLField("gender", type: .scalar(String.self)),
            GraphQLField("birthdate", type: .scalar(String.self)),
            GraphQLField("zoneinfo", type: .scalar(String.self)),
            GraphQLField("locale", type: .scalar(String.self)),
            GraphQLField("address", type: .scalar(String.self)),
            GraphQLField("formatted", type: .scalar(String.self)),
            GraphQLField("streetAddress", type: .scalar(String.self)),
            GraphQLField("locality", type: .scalar(String.self)),
            GraphQLField("region", type: .scalar(String.self)),
            GraphQLField("postalCode", type: .scalar(String.self)),
            GraphQLField("city", type: .scalar(String.self)),
            GraphQLField("province", type: .scalar(String.self)),
            GraphQLField("country", type: .scalar(String.self)),
            GraphQLField("createdAt", type: .scalar(String.self)),
            GraphQLField("updatedAt", type: .scalar(String.self)),
            GraphQLField("externalId", type: .scalar(String.self)),
            GraphQLField("customData", type: .list(.object(CustomDatum.selections))),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(id: String, identities: [Identity?]? = nil, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil, customData: [CustomDatum?]? = nil) {
          self.init(unsafeResultMap: ["__typename": "User", "id": id, "identities": identities.flatMap { (value: [Identity?]) -> [ResultMap?] in value.map { (value: Identity?) -> ResultMap? in value.flatMap { (value: Identity) -> ResultMap in value.resultMap } } }, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId, "customData": customData.flatMap { (value: [CustomDatum?]) -> [ResultMap?] in value.map { (value: CustomDatum?) -> ResultMap? in value.flatMap { (value: CustomDatum) -> ResultMap in value.resultMap } } }])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        /// 用户 ID
        public var id: String {
          get {
            return resultMap["id"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "id")
          }
        }

        /// 用户的身份信息
        public var identities: [Identity?]? {
          get {
            return (resultMap["identities"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Identity?] in value.map { (value: ResultMap?) -> Identity? in value.flatMap { (value: ResultMap) -> Identity in Identity(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [Identity?]) -> [ResultMap?] in value.map { (value: Identity?) -> ResultMap? in value.flatMap { (value: Identity) -> ResultMap in value.resultMap } } }, forKey: "identities")
          }
        }

        public var arn: String {
          get {
            return resultMap["arn"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "arn")
          }
        }

        /// 用户池 ID
        public var userPoolId: String {
          get {
            return resultMap["userPoolId"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "userPoolId")
          }
        }

        /// 用户在组织机构中的状态
        public var status: UserStatus? {
          get {
            return resultMap["status"] as? UserStatus
          }
          set {
            resultMap.updateValue(newValue, forKey: "status")
          }
        }

        /// 用户名，用户池内唯一
        public var username: String? {
          get {
            return resultMap["username"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "username")
          }
        }

        /// 邮箱，用户池内唯一
        public var email: String? {
          get {
            return resultMap["email"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "email")
          }
        }

        /// 邮箱是否已验证
        public var emailVerified: Bool? {
          get {
            return resultMap["emailVerified"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "emailVerified")
          }
        }

        /// 手机号，用户池内唯一
        public var phone: String? {
          get {
            return resultMap["phone"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "phone")
          }
        }

        /// 手机号是否已验证
        public var phoneVerified: Bool? {
          get {
            return resultMap["phoneVerified"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "phoneVerified")
          }
        }

        public var unionid: String? {
          get {
            return resultMap["unionid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "unionid")
          }
        }

        public var openid: String? {
          get {
            return resultMap["openid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "openid")
          }
        }

        /// 昵称，该字段不唯一。
        public var nickname: String? {
          get {
            return resultMap["nickname"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "nickname")
          }
        }

        /// 注册方式
        public var registerSource: [String]? {
          get {
            return resultMap["registerSource"] as? [String]
          }
          set {
            resultMap.updateValue(newValue, forKey: "registerSource")
          }
        }

        /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
        public var photo: String? {
          get {
            return resultMap["photo"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "photo")
          }
        }

        /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
        public var password: String? {
          get {
            return resultMap["password"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "password")
          }
        }

        /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
        public var oauth: String? {
          get {
            return resultMap["oauth"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "oauth")
          }
        }

        /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
        public var token: String? {
          get {
            return resultMap["token"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "token")
          }
        }

        /// token 过期时间
        public var tokenExpiredAt: String? {
          get {
            return resultMap["tokenExpiredAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
          }
        }

        /// 用户登录总次数
        public var loginsCount: Int? {
          get {
            return resultMap["loginsCount"] as? Int
          }
          set {
            resultMap.updateValue(newValue, forKey: "loginsCount")
          }
        }

        /// 用户最近一次登录时间
        public var lastLogin: String? {
          get {
            return resultMap["lastLogin"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "lastLogin")
          }
        }

        /// 用户上一次登录时使用的 IP
        public var lastIp: String? {
          get {
            return resultMap["lastIP"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "lastIP")
          }
        }

        /// 用户注册时间
        public var signedUp: String? {
          get {
            return resultMap["signedUp"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "signedUp")
          }
        }

        /// 该账号是否被禁用
        public var blocked: Bool? {
          get {
            return resultMap["blocked"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "blocked")
          }
        }

        /// 账号是否被软删除
        public var isDeleted: Bool? {
          get {
            return resultMap["isDeleted"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isDeleted")
          }
        }

        public var device: String? {
          get {
            return resultMap["device"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "device")
          }
        }

        public var browser: String? {
          get {
            return resultMap["browser"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "browser")
          }
        }

        public var company: String? {
          get {
            return resultMap["company"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "company")
          }
        }

        public var name: String? {
          get {
            return resultMap["name"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "name")
          }
        }

        public var givenName: String? {
          get {
            return resultMap["givenName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "givenName")
          }
        }

        public var familyName: String? {
          get {
            return resultMap["familyName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "familyName")
          }
        }

        public var middleName: String? {
          get {
            return resultMap["middleName"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "middleName")
          }
        }

        public var profile: String? {
          get {
            return resultMap["profile"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "profile")
          }
        }

        public var preferredUsername: String? {
          get {
            return resultMap["preferredUsername"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "preferredUsername")
          }
        }

        public var website: String? {
          get {
            return resultMap["website"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "website")
          }
        }

        public var gender: String? {
          get {
            return resultMap["gender"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "gender")
          }
        }

        public var birthdate: String? {
          get {
            return resultMap["birthdate"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "birthdate")
          }
        }

        public var zoneinfo: String? {
          get {
            return resultMap["zoneinfo"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "zoneinfo")
          }
        }

        public var locale: String? {
          get {
            return resultMap["locale"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "locale")
          }
        }

        public var address: String? {
          get {
            return resultMap["address"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "address")
          }
        }

        public var formatted: String? {
          get {
            return resultMap["formatted"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "formatted")
          }
        }

        public var streetAddress: String? {
          get {
            return resultMap["streetAddress"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "streetAddress")
          }
        }

        public var locality: String? {
          get {
            return resultMap["locality"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "locality")
          }
        }

        public var region: String? {
          get {
            return resultMap["region"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "region")
          }
        }

        public var postalCode: String? {
          get {
            return resultMap["postalCode"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "postalCode")
          }
        }

        public var city: String? {
          get {
            return resultMap["city"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "city")
          }
        }

        public var province: String? {
          get {
            return resultMap["province"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "province")
          }
        }

        public var country: String? {
          get {
            return resultMap["country"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "country")
          }
        }

        public var createdAt: String? {
          get {
            return resultMap["createdAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "createdAt")
          }
        }

        public var updatedAt: String? {
          get {
            return resultMap["updatedAt"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "updatedAt")
          }
        }

        /// 用户外部 ID
        public var externalId: String? {
          get {
            return resultMap["externalId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "externalId")
          }
        }

        /// 用户自定义数据
        public var customData: [CustomDatum?]? {
          get {
            return (resultMap["customData"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [CustomDatum?] in value.map { (value: ResultMap?) -> CustomDatum? in value.flatMap { (value: ResultMap) -> CustomDatum in CustomDatum(unsafeResultMap: value) } } }
          }
          set {
            resultMap.updateValue(newValue.flatMap { (value: [CustomDatum?]) -> [ResultMap?] in value.map { (value: CustomDatum?) -> ResultMap? in value.flatMap { (value: CustomDatum) -> ResultMap in value.resultMap } } }, forKey: "customData")
          }
        }

        public struct Identity: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["Identity"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("openid", type: .scalar(String.self)),
              GraphQLField("userIdInIdp", type: .scalar(String.self)),
              GraphQLField("userId", type: .scalar(String.self)),
              GraphQLField("connectionId", type: .scalar(String.self)),
              GraphQLField("isSocial", type: .scalar(Bool.self)),
              GraphQLField("provider", type: .scalar(String.self)),
              GraphQLField("type", type: .scalar(String.self)),
              GraphQLField("userPoolId", type: .scalar(String.self)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(openid: String? = nil, userIdInIdp: String? = nil, userId: String? = nil, connectionId: String? = nil, isSocial: Bool? = nil, provider: String? = nil, type: String? = nil, userPoolId: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "Identity", "openid": openid, "userIdInIdp": userIdInIdp, "userId": userId, "connectionId": connectionId, "isSocial": isSocial, "provider": provider, "type": type, "userPoolId": userPoolId])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var openid: String? {
            get {
              return resultMap["openid"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "openid")
            }
          }

          public var userIdInIdp: String? {
            get {
              return resultMap["userIdInIdp"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "userIdInIdp")
            }
          }

          public var userId: String? {
            get {
              return resultMap["userId"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "userId")
            }
          }

          public var connectionId: String? {
            get {
              return resultMap["connectionId"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "connectionId")
            }
          }

          public var isSocial: Bool? {
            get {
              return resultMap["isSocial"] as? Bool
            }
            set {
              resultMap.updateValue(newValue, forKey: "isSocial")
            }
          }

          public var provider: String? {
            get {
              return resultMap["provider"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "provider")
            }
          }

          public var type: String? {
            get {
              return resultMap["type"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "type")
            }
          }

          public var userPoolId: String? {
            get {
              return resultMap["userPoolId"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "userPoolId")
            }
          }
        }

        public struct CustomDatum: GraphQLSelectionSet {
          public static let possibleTypes: [String] = ["UserCustomData"]

          public static var selections: [GraphQLSelection] {
            return [
              GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
              GraphQLField("key", type: .nonNull(.scalar(String.self))),
              GraphQLField("value", type: .scalar(String.self)),
              GraphQLField("dataType", type: .nonNull(.scalar(UDFDataType.self))),
              GraphQLField("label", type: .scalar(String.self)),
            ]
          }

          public private(set) var resultMap: ResultMap

          public init(unsafeResultMap: ResultMap) {
            self.resultMap = unsafeResultMap
          }

          public init(key: String, value: String? = nil, dataType: UDFDataType, label: String? = nil) {
            self.init(unsafeResultMap: ["__typename": "UserCustomData", "key": key, "value": value, "dataType": dataType, "label": label])
          }

          public var __typename: String {
            get {
              return resultMap["__typename"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "__typename")
            }
          }

          public var key: String {
            get {
              return resultMap["key"]! as! String
            }
            set {
              resultMap.updateValue(newValue, forKey: "key")
            }
          }

          public var value: String? {
            get {
              return resultMap["value"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "value")
            }
          }

          public var dataType: UDFDataType {
            get {
              return resultMap["dataType"]! as! UDFDataType
            }
            set {
              resultMap.updateValue(newValue, forKey: "dataType")
            }
          }

          public var label: String? {
            get {
              return resultMap["label"] as? String
            }
            set {
              resultMap.updateValue(newValue, forKey: "label")
            }
          }
        }
      }
    }
  }
}

public final class UserWithCustomDataQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query userWithCustomData($id: String) {
      user(id: $id) {
        __typename
        id
        arn
        userPoolId
        status
        username
        email
        emailVerified
        phone
        phoneVerified
        identities {
          __typename
          openid
          userIdInIdp
          userId
          connectionId
          isSocial
          provider
          userPoolId
        }
        unionid
        openid
        nickname
        registerSource
        photo
        password
        oauth
        token
        tokenExpiredAt
        loginsCount
        lastLogin
        lastIP
        signedUp
        blocked
        isDeleted
        device
        browser
        company
        name
        givenName
        familyName
        middleName
        profile
        preferredUsername
        website
        gender
        birthdate
        zoneinfo
        locale
        address
        formatted
        streetAddress
        locality
        region
        postalCode
        city
        province
        country
        createdAt
        updatedAt
        externalId
        customData {
          __typename
          key
          value
          dataType
          label
        }
      }
    }
    """

  public let operationName: String = "userWithCustomData"

  public var id: String?

  public init(id: String? = nil) {
    self.id = id
  }

  public var variables: GraphQLMap? {
    return ["id": id]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("user", arguments: ["id": GraphQLVariable("id")], type: .object(User.selections)),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(user: User? = nil) {
      self.init(unsafeResultMap: ["__typename": "Query", "user": user.flatMap { (value: User) -> ResultMap in value.resultMap }])
    }

    public var user: User? {
      get {
        return (resultMap["user"] as? ResultMap).flatMap { User(unsafeResultMap: $0) }
      }
      set {
        resultMap.updateValue(newValue?.resultMap, forKey: "user")
      }
    }

    public struct User: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["User"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("id", type: .nonNull(.scalar(String.self))),
          GraphQLField("arn", type: .nonNull(.scalar(String.self))),
          GraphQLField("userPoolId", type: .nonNull(.scalar(String.self))),
          GraphQLField("status", type: .scalar(UserStatus.self)),
          GraphQLField("username", type: .scalar(String.self)),
          GraphQLField("email", type: .scalar(String.self)),
          GraphQLField("emailVerified", type: .scalar(Bool.self)),
          GraphQLField("phone", type: .scalar(String.self)),
          GraphQLField("phoneVerified", type: .scalar(Bool.self)),
          GraphQLField("identities", type: .list(.object(Identity.selections))),
          GraphQLField("unionid", type: .scalar(String.self)),
          GraphQLField("openid", type: .scalar(String.self)),
          GraphQLField("nickname", type: .scalar(String.self)),
          GraphQLField("registerSource", type: .list(.nonNull(.scalar(String.self)))),
          GraphQLField("photo", type: .scalar(String.self)),
          GraphQLField("password", type: .scalar(String.self)),
          GraphQLField("oauth", type: .scalar(String.self)),
          GraphQLField("token", type: .scalar(String.self)),
          GraphQLField("tokenExpiredAt", type: .scalar(String.self)),
          GraphQLField("loginsCount", type: .scalar(Int.self)),
          GraphQLField("lastLogin", type: .scalar(String.self)),
          GraphQLField("lastIP", type: .scalar(String.self)),
          GraphQLField("signedUp", type: .scalar(String.self)),
          GraphQLField("blocked", type: .scalar(Bool.self)),
          GraphQLField("isDeleted", type: .scalar(Bool.self)),
          GraphQLField("device", type: .scalar(String.self)),
          GraphQLField("browser", type: .scalar(String.self)),
          GraphQLField("company", type: .scalar(String.self)),
          GraphQLField("name", type: .scalar(String.self)),
          GraphQLField("givenName", type: .scalar(String.self)),
          GraphQLField("familyName", type: .scalar(String.self)),
          GraphQLField("middleName", type: .scalar(String.self)),
          GraphQLField("profile", type: .scalar(String.self)),
          GraphQLField("preferredUsername", type: .scalar(String.self)),
          GraphQLField("website", type: .scalar(String.self)),
          GraphQLField("gender", type: .scalar(String.self)),
          GraphQLField("birthdate", type: .scalar(String.self)),
          GraphQLField("zoneinfo", type: .scalar(String.self)),
          GraphQLField("locale", type: .scalar(String.self)),
          GraphQLField("address", type: .scalar(String.self)),
          GraphQLField("formatted", type: .scalar(String.self)),
          GraphQLField("streetAddress", type: .scalar(String.self)),
          GraphQLField("locality", type: .scalar(String.self)),
          GraphQLField("region", type: .scalar(String.self)),
          GraphQLField("postalCode", type: .scalar(String.self)),
          GraphQLField("city", type: .scalar(String.self)),
          GraphQLField("province", type: .scalar(String.self)),
          GraphQLField("country", type: .scalar(String.self)),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("externalId", type: .scalar(String.self)),
          GraphQLField("customData", type: .list(.object(CustomDatum.selections))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(id: String, arn: String, userPoolId: String, status: UserStatus? = nil, username: String? = nil, email: String? = nil, emailVerified: Bool? = nil, phone: String? = nil, phoneVerified: Bool? = nil, identities: [Identity?]? = nil, unionid: String? = nil, openid: String? = nil, nickname: String? = nil, registerSource: [String]? = nil, photo: String? = nil, password: String? = nil, oauth: String? = nil, token: String? = nil, tokenExpiredAt: String? = nil, loginsCount: Int? = nil, lastLogin: String? = nil, lastIp: String? = nil, signedUp: String? = nil, blocked: Bool? = nil, isDeleted: Bool? = nil, device: String? = nil, browser: String? = nil, company: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, profile: String? = nil, preferredUsername: String? = nil, website: String? = nil, gender: String? = nil, birthdate: String? = nil, zoneinfo: String? = nil, locale: String? = nil, address: String? = nil, formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, city: String? = nil, province: String? = nil, country: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, externalId: String? = nil, customData: [CustomDatum?]? = nil) {
        self.init(unsafeResultMap: ["__typename": "User", "id": id, "arn": arn, "userPoolId": userPoolId, "status": status, "username": username, "email": email, "emailVerified": emailVerified, "phone": phone, "phoneVerified": phoneVerified, "identities": identities.flatMap { (value: [Identity?]) -> [ResultMap?] in value.map { (value: Identity?) -> ResultMap? in value.flatMap { (value: Identity) -> ResultMap in value.resultMap } } }, "unionid": unionid, "openid": openid, "nickname": nickname, "registerSource": registerSource, "photo": photo, "password": password, "oauth": oauth, "token": token, "tokenExpiredAt": tokenExpiredAt, "loginsCount": loginsCount, "lastLogin": lastLogin, "lastIP": lastIp, "signedUp": signedUp, "blocked": blocked, "isDeleted": isDeleted, "device": device, "browser": browser, "company": company, "name": name, "givenName": givenName, "familyName": familyName, "middleName": middleName, "profile": profile, "preferredUsername": preferredUsername, "website": website, "gender": gender, "birthdate": birthdate, "zoneinfo": zoneinfo, "locale": locale, "address": address, "formatted": formatted, "streetAddress": streetAddress, "locality": locality, "region": region, "postalCode": postalCode, "city": city, "province": province, "country": country, "createdAt": createdAt, "updatedAt": updatedAt, "externalId": externalId, "customData": customData.flatMap { (value: [CustomDatum?]) -> [ResultMap?] in value.map { (value: CustomDatum?) -> ResultMap? in value.flatMap { (value: CustomDatum) -> ResultMap in value.resultMap } } }])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      /// 用户 ID
      public var id: String {
        get {
          return resultMap["id"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "id")
        }
      }

      public var arn: String {
        get {
          return resultMap["arn"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "arn")
        }
      }

      /// 用户池 ID
      public var userPoolId: String {
        get {
          return resultMap["userPoolId"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "userPoolId")
        }
      }

      /// 用户在组织机构中的状态
      public var status: UserStatus? {
        get {
          return resultMap["status"] as? UserStatus
        }
        set {
          resultMap.updateValue(newValue, forKey: "status")
        }
      }

      /// 用户名，用户池内唯一
      public var username: String? {
        get {
          return resultMap["username"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "username")
        }
      }

      /// 邮箱，用户池内唯一
      public var email: String? {
        get {
          return resultMap["email"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "email")
        }
      }

      /// 邮箱是否已验证
      public var emailVerified: Bool? {
        get {
          return resultMap["emailVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "emailVerified")
        }
      }

      /// 手机号，用户池内唯一
      public var phone: String? {
        get {
          return resultMap["phone"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "phone")
        }
      }

      /// 手机号是否已验证
      public var phoneVerified: Bool? {
        get {
          return resultMap["phoneVerified"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "phoneVerified")
        }
      }

      /// 用户的身份信息
      public var identities: [Identity?]? {
        get {
          return (resultMap["identities"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [Identity?] in value.map { (value: ResultMap?) -> Identity? in value.flatMap { (value: ResultMap) -> Identity in Identity(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [Identity?]) -> [ResultMap?] in value.map { (value: Identity?) -> ResultMap? in value.flatMap { (value: Identity) -> ResultMap in value.resultMap } } }, forKey: "identities")
        }
      }

      public var unionid: String? {
        get {
          return resultMap["unionid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "unionid")
        }
      }

      public var openid: String? {
        get {
          return resultMap["openid"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "openid")
        }
      }

      /// 昵称，该字段不唯一。
      public var nickname: String? {
        get {
          return resultMap["nickname"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "nickname")
        }
      }

      /// 注册方式
      public var registerSource: [String]? {
        get {
          return resultMap["registerSource"] as? [String]
        }
        set {
          resultMap.updateValue(newValue, forKey: "registerSource")
        }
      }

      /// 头像链接，默认为 https://usercontents.authing.cn/authing-avatar.png
      public var photo: String? {
        get {
          return resultMap["photo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "photo")
        }
      }

      /// 用户密码，数据库使用密钥加 salt 进行加密，非原文密码。
      public var password: String? {
        get {
          return resultMap["password"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "password")
        }
      }

      /// 用户社会化登录第三方身份提供商返回的原始用户信息，非社会化登录方式注册的用户此字段为空。
      public var oauth: String? {
        get {
          return resultMap["oauth"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "oauth")
        }
      }

      /// 用户登录凭证，开发者可以在后端检验该 token 的合法性，从而验证用户身份。详细文档请见：[验证 Token](https://docs.authing.co/advanced/verify-jwt-token.html)
      public var token: String? {
        get {
          return resultMap["token"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "token")
        }
      }

      /// token 过期时间
      public var tokenExpiredAt: String? {
        get {
          return resultMap["tokenExpiredAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "tokenExpiredAt")
        }
      }

      /// 用户登录总次数
      public var loginsCount: Int? {
        get {
          return resultMap["loginsCount"] as? Int
        }
        set {
          resultMap.updateValue(newValue, forKey: "loginsCount")
        }
      }

      /// 用户最近一次登录时间
      public var lastLogin: String? {
        get {
          return resultMap["lastLogin"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastLogin")
        }
      }

      /// 用户上一次登录时使用的 IP
      public var lastIp: String? {
        get {
          return resultMap["lastIP"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "lastIP")
        }
      }

      /// 用户注册时间
      public var signedUp: String? {
        get {
          return resultMap["signedUp"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "signedUp")
        }
      }

      /// 该账号是否被禁用
      public var blocked: Bool? {
        get {
          return resultMap["blocked"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "blocked")
        }
      }

      /// 账号是否被软删除
      public var isDeleted: Bool? {
        get {
          return resultMap["isDeleted"] as? Bool
        }
        set {
          resultMap.updateValue(newValue, forKey: "isDeleted")
        }
      }

      public var device: String? {
        get {
          return resultMap["device"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "device")
        }
      }

      public var browser: String? {
        get {
          return resultMap["browser"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "browser")
        }
      }

      public var company: String? {
        get {
          return resultMap["company"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "company")
        }
      }

      public var name: String? {
        get {
          return resultMap["name"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "name")
        }
      }

      public var givenName: String? {
        get {
          return resultMap["givenName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "givenName")
        }
      }

      public var familyName: String? {
        get {
          return resultMap["familyName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "familyName")
        }
      }

      public var middleName: String? {
        get {
          return resultMap["middleName"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "middleName")
        }
      }

      public var profile: String? {
        get {
          return resultMap["profile"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "profile")
        }
      }

      public var preferredUsername: String? {
        get {
          return resultMap["preferredUsername"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "preferredUsername")
        }
      }

      public var website: String? {
        get {
          return resultMap["website"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "website")
        }
      }

      public var gender: String? {
        get {
          return resultMap["gender"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "gender")
        }
      }

      public var birthdate: String? {
        get {
          return resultMap["birthdate"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "birthdate")
        }
      }

      public var zoneinfo: String? {
        get {
          return resultMap["zoneinfo"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "zoneinfo")
        }
      }

      public var locale: String? {
        get {
          return resultMap["locale"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locale")
        }
      }

      public var address: String? {
        get {
          return resultMap["address"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "address")
        }
      }

      public var formatted: String? {
        get {
          return resultMap["formatted"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "formatted")
        }
      }

      public var streetAddress: String? {
        get {
          return resultMap["streetAddress"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "streetAddress")
        }
      }

      public var locality: String? {
        get {
          return resultMap["locality"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "locality")
        }
      }

      public var region: String? {
        get {
          return resultMap["region"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "region")
        }
      }

      public var postalCode: String? {
        get {
          return resultMap["postalCode"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "postalCode")
        }
      }

      public var city: String? {
        get {
          return resultMap["city"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "city")
        }
      }

      public var province: String? {
        get {
          return resultMap["province"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "province")
        }
      }

      public var country: String? {
        get {
          return resultMap["country"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "country")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      /// 用户外部 ID
      public var externalId: String? {
        get {
          return resultMap["externalId"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "externalId")
        }
      }

      /// 用户自定义数据
      public var customData: [CustomDatum?]? {
        get {
          return (resultMap["customData"] as? [ResultMap?]).flatMap { (value: [ResultMap?]) -> [CustomDatum?] in value.map { (value: ResultMap?) -> CustomDatum? in value.flatMap { (value: ResultMap) -> CustomDatum in CustomDatum(unsafeResultMap: value) } } }
        }
        set {
          resultMap.updateValue(newValue.flatMap { (value: [CustomDatum?]) -> [ResultMap?] in value.map { (value: CustomDatum?) -> ResultMap? in value.flatMap { (value: CustomDatum) -> ResultMap in value.resultMap } } }, forKey: "customData")
        }
      }

      public struct Identity: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["Identity"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("openid", type: .scalar(String.self)),
            GraphQLField("userIdInIdp", type: .scalar(String.self)),
            GraphQLField("userId", type: .scalar(String.self)),
            GraphQLField("connectionId", type: .scalar(String.self)),
            GraphQLField("isSocial", type: .scalar(Bool.self)),
            GraphQLField("provider", type: .scalar(String.self)),
            GraphQLField("userPoolId", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(openid: String? = nil, userIdInIdp: String? = nil, userId: String? = nil, connectionId: String? = nil, isSocial: Bool? = nil, provider: String? = nil, userPoolId: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "Identity", "openid": openid, "userIdInIdp": userIdInIdp, "userId": userId, "connectionId": connectionId, "isSocial": isSocial, "provider": provider, "userPoolId": userPoolId])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var openid: String? {
          get {
            return resultMap["openid"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "openid")
          }
        }

        public var userIdInIdp: String? {
          get {
            return resultMap["userIdInIdp"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "userIdInIdp")
          }
        }

        public var userId: String? {
          get {
            return resultMap["userId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "userId")
          }
        }

        public var connectionId: String? {
          get {
            return resultMap["connectionId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "connectionId")
          }
        }

        public var isSocial: Bool? {
          get {
            return resultMap["isSocial"] as? Bool
          }
          set {
            resultMap.updateValue(newValue, forKey: "isSocial")
          }
        }

        public var provider: String? {
          get {
            return resultMap["provider"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "provider")
          }
        }

        public var userPoolId: String? {
          get {
            return resultMap["userPoolId"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "userPoolId")
          }
        }
      }

      public struct CustomDatum: GraphQLSelectionSet {
        public static let possibleTypes: [String] = ["UserCustomData"]

        public static var selections: [GraphQLSelection] {
          return [
            GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
            GraphQLField("key", type: .nonNull(.scalar(String.self))),
            GraphQLField("value", type: .scalar(String.self)),
            GraphQLField("dataType", type: .nonNull(.scalar(UDFDataType.self))),
            GraphQLField("label", type: .scalar(String.self)),
          ]
        }

        public private(set) var resultMap: ResultMap

        public init(unsafeResultMap: ResultMap) {
          self.resultMap = unsafeResultMap
        }

        public init(key: String, value: String? = nil, dataType: UDFDataType, label: String? = nil) {
          self.init(unsafeResultMap: ["__typename": "UserCustomData", "key": key, "value": value, "dataType": dataType, "label": label])
        }

        public var __typename: String {
          get {
            return resultMap["__typename"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "__typename")
          }
        }

        public var key: String {
          get {
            return resultMap["key"]! as! String
          }
          set {
            resultMap.updateValue(newValue, forKey: "key")
          }
        }

        public var value: String? {
          get {
            return resultMap["value"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "value")
          }
        }

        public var dataType: UDFDataType {
          get {
            return resultMap["dataType"]! as! UDFDataType
          }
          set {
            resultMap.updateValue(newValue, forKey: "dataType")
          }
        }

        public var label: String? {
          get {
            return resultMap["label"] as? String
          }
          set {
            resultMap.updateValue(newValue, forKey: "label")
          }
        }
      }
    }
  }
}

public final class WhitelistQuery: GraphQLQuery {
  /// The raw GraphQL definition of this operation.
  public let operationDefinition: String =
    """
    query whitelist($type: WhitelistType!) {
      whitelist(type: $type) {
        __typename
        createdAt
        updatedAt
        value
      }
    }
    """

  public let operationName: String = "whitelist"

  public var type: WhitelistType

  public init(type: WhitelistType) {
    self.type = type
  }

  public var variables: GraphQLMap? {
    return ["type": type]
  }

  public struct Data: GraphQLSelectionSet {
    public static let possibleTypes: [String] = ["Query"]

    public static var selections: [GraphQLSelection] {
      return [
        GraphQLField("whitelist", arguments: ["type": GraphQLVariable("type")], type: .nonNull(.list(.nonNull(.object(Whitelist.selections))))),
      ]
    }

    public private(set) var resultMap: ResultMap

    public init(unsafeResultMap: ResultMap) {
      self.resultMap = unsafeResultMap
    }

    public init(whitelist: [Whitelist]) {
      self.init(unsafeResultMap: ["__typename": "Query", "whitelist": whitelist.map { (value: Whitelist) -> ResultMap in value.resultMap }])
    }

    /// 用户池注册白名单列表
    public var whitelist: [Whitelist] {
      get {
        return (resultMap["whitelist"] as! [ResultMap]).map { (value: ResultMap) -> Whitelist in Whitelist(unsafeResultMap: value) }
      }
      set {
        resultMap.updateValue(newValue.map { (value: Whitelist) -> ResultMap in value.resultMap }, forKey: "whitelist")
      }
    }

    public struct Whitelist: GraphQLSelectionSet {
      public static let possibleTypes: [String] = ["WhiteList"]

      public static var selections: [GraphQLSelection] {
        return [
          GraphQLField("__typename", type: .nonNull(.scalar(String.self))),
          GraphQLField("createdAt", type: .scalar(String.self)),
          GraphQLField("updatedAt", type: .scalar(String.self)),
          GraphQLField("value", type: .nonNull(.scalar(String.self))),
        ]
      }

      public private(set) var resultMap: ResultMap

      public init(unsafeResultMap: ResultMap) {
        self.resultMap = unsafeResultMap
      }

      public init(createdAt: String? = nil, updatedAt: String? = nil, value: String) {
        self.init(unsafeResultMap: ["__typename": "WhiteList", "createdAt": createdAt, "updatedAt": updatedAt, "value": value])
      }

      public var __typename: String {
        get {
          return resultMap["__typename"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "__typename")
        }
      }

      public var createdAt: String? {
        get {
          return resultMap["createdAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "createdAt")
        }
      }

      public var updatedAt: String? {
        get {
          return resultMap["updatedAt"] as? String
        }
        set {
          resultMap.updateValue(newValue, forKey: "updatedAt")
        }
      }

      public var value: String {
        get {
          return resultMap["value"]! as! String
        }
        set {
          resultMap.updateValue(newValue, forKey: "value")
        }
      }
    }
  }
}
